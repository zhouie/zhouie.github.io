[{"title":"【分享】 SS、SSR科学上网小知识","date":"2019-10-11T22:11:39.000Z","path":"posts/201910111/","text":"早前在 🔗科学上网工具，请查收 这里就分享过一些可用的“科学上网”工具，从那之后，隔一段时间就能收到梯子需求之类的邮件，就感觉大家对这种事情特感兴趣。其实我本人平时不太爱去墙外，除了一些工作学习需要… Windows端：https://www.lanzous.com/i6plddi Android端：https://www.lanzous.com/i6ple7i 有疑问可留言或邮件 nanzhouieATqq.com 讨论。 WINDOWS设备安装使用SS/SSR 需要安装.NET Framework 4.6.2 和 Microsoft Visual C++ 2015 Redistributable (x86)（一般电脑已经安装，不需要再次安装）。若提示.NET framework过低，则需要下载.NET framework软件https://www.microsoft.com/zh-CN/download/details.aspx?id=53344，重新打开运行即可。 第一步，下载用于WINDOWS设备的SHADOWSOCKS-WINDOWS软件 描述 链接 Shadowsocks-4.1.3.1 https://github.com/shadowsocks Shadowsocks-4.1.3.1-备用 https://help.ss-ssr.com/download/Shadowsocks-4.1.3.1.zip ssr-win-4.9.0-备用 https://help.ss-ssr.com/download/ssr-win-4.9.0.zip 第二步，打开程序文件SHADOWSOCKS.EXE，鼠标右键单击配置节点信息下载后解压文件，打开EXE文件，右键单击左下角的飞机图标进行配置 目前主要有三种配置节点信息的方法，可以根据你的习惯和需要选择 方法 描述 从剪切板导入URL 每次复制SS链接，点击从剪切板导入URL即可配置服务器 扫二维码配置 通过扫描屏幕上的二维码，自动配置，推荐 手动编辑服务器配置 添加服务器，并逐一配置相关节点信息 方法一，从剪切板导入URL 首先复制SS地址 然后右键单击右下角的软件，点击“服务器”－“从剪切板导入URL” 方法二，扫二维码配置（推荐） 首先网页上或者是聊天窗口打开节点的二维码图片 然后右键单击右下角的软件，点击“服务器”－“扫描屏幕上的二维码” 程序自动识别二维码并导入服务器节点信息 最后启用系统代理即可使用 方法三，手动编辑服务器配置 右键单击右下角的软件，点击“服务器”－“编辑服务器” 最后需要更新PAC依次操作：PAC -&gt;从GFW List更新PAC （等待更新完毕后）-&gt;使用本地PAC-&gt;启动系统代理。完成后，即可打开游览器访问网站进行测试 Android设备安装使用SS/SSR 注意：此软件可能带广告，下载后删去即可 第一步，下载用于ANDROID设备的SHADOWSOCKS-ANDROID软件 描述 链接 Shadowsocks Android https://github.com/shadowsocks/shadowsocks-android/releases/download/v4.6.1/shadowsocks--universal-4.6.1.apk Google play 商店 https://play.google.com/store/apps/details?id=com.github.shadowsocks Android 影梭软件 https://help.ss-ssr.com/download/shadowsocksAndroid.apk ss-4.6.1-备用 https://help.ss-ssr.com/download/ss-4.6.1.apk ssr-3.4.0.8-备用 https://help.ss-ssr.com/download/ssr-3.4.0.8.apk 第二步，打开程序文件SHADOWSOCKS配置节点信息有多种配置节点信息的方法，可以根据你的习惯和需要选择，推荐使用“扫二维码配置”方法 首先网页上打开节点的二维码图片 然后打开软件右下角的“+”，选择“扫描屏幕上的二维码” 程序自动识别二维码并导入服务器节点信息 最后需要设置路由仅代理中国大陆无法访问的地址，完成后，即可打开游览器访问网站进行测试。 关于SS/SSR什么是SSShadowsocks是一款FQ代理软件，可翻译为“影梭”，简写为SS。作者是https://github.com/clowwindy，他把源码共享在了github上，火了之后被请去喝茶，就没再维护更新了。据说现在是由国外的谁谁谁在维护（https://shadowsocks.org/en/index.html、https://github.com/shadowsocks）。 什么是SSRShadowsocksR是在SS作者被喝茶之后，有拨人站出来表示SS容易被防火墙检测到，所以在混淆和协议方面做了改进，更加不容易被检测到，而且兼容SS，改进后的这个项目就叫ShadowsocksR，简称SSR。据说，江湖上关于“SS好还是SSR好”的争论始终存在！ SS与SSR的原理SS和SSR它的原理都是一样的，就是socks5代理。socks代理只是简单的传递数据包，而不必关心是何种协议，所以socks代理比其他应用层代理要快的多。socks5代理是把你的网络数据请求通过一条连接你和代理服务器之间的通道，由服务器转发到目的地，这个过程中你是没有通过一条专用通道的，只是数据包的发出，然后被代理服务器收到，整个过程并没有额外的处理。通俗的说，现在你有一个代理服务器在香港，比如你现在想要访问google，你的电脑发出请求，流量通过socks5连接发到你在香港的服务器上，然后再由你在香港的服务器去访问google，再把访问结果传回你的电脑，这样就实现了FQ。 SS/SSR与VPN的本质区别VPN虚拟专用隧道，在企业网络和高校的网络中应用很广泛，是为了保证通信的安全性、私密性，不是专门为FQ制定的技术；SS/SSR则是为了转发客户端流量，绕过防火墙的检测，从而达到FQ的真实意图，但是没有保证数据传输的安全性（至少没那么安全）。 SS/SSR的另类称呼如同VPN一样，SS/SSR这一关键词在国内搜索会被屏蔽，因此大多数情况下人们会用“酸酸乳”来称呼它。因为Shadowsocks、ShadowsocksR软件图标是纸飞机，故SS/SSR也称为“小飞机✈️”。同样地，上面讲到的“SS/SSR服务器”、“代理节点”、“节点”、“SS/SSR节点”这些概念，常被称为“飞机场”。 很显然，要想使用SS/SSR工具科学上网，关键要有一个稳定可用的代理节点，即“飞机场”。一般的话是可以找到免费的节点，当然了，这种方式没有那么稳定。 参考文献 阿雷科技分享频道 - Youtube（http://suo.im/4BIWbF） Shadowsocks - A secure socks5 proxy（https://shadowsocks.org/en/index.html） Shadowsocks-Github（https://github.com/shadowsocks） Shadowsocks 终极指南（https://s-s-r.github.io/wiki/） SS/ShadowsocksR Server（https://ss-ssr.com/） Free SS/ShadowsocksR Server（https://free.ss-ssr.com/index.html） Free-SS-SSR Repo（https://github.com/ThinkDevelop/Free-SS-SSR） 免费SS账号（https://www.youneed.win/free-ss） 免费SSR账号（https://www.youneed.win/free-ssr）","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"VPN","slug":"VPN","permalink":"https://zhouie.cn/tags/VPN/"}]},{"title":"【升级】 联想Y430p更换SSD、增加8G内存条","date":"2019-09-25T00:58:42.000Z","path":"posts/201909251/","text":"偶有卡顿、速率不高，是所有HDD（机械硬盘）用户最常经历的。在现在这个硬件设备读写高速、价格低廉的时候，SSD（固态硬盘）已不是早年间那种昂贵的物件了，市场上可供选择的也很多。 这是早年间一张固态硬盘与机械硬盘对比图。供参考。 这是为了防止我继续说废话的一条分割线。 这就是我的Y430p 上面这个是Y430p拆下E壳后拍的一张图片。其中，能和运行内存、硬盘这两个物件扯上关系的位置就在图中所标注的这几个地方了—— 首先是原装光驱位置。之所以说它能和硬盘扯上关系，是因为光驱是可以拆下的，然后用硬盘设备替代它以实现扩容。注意，这个地方的接口是基于SATA2协议，所以这里推荐上机械硬盘（上固态硬盘会损失性能），其实就可以买个光驱位硬盘盒，把你原装主硬盘位的那1T的机械硬盘拆装到这里来。 其次是原装主硬盘位置。这里推荐拿掉主硬盘位的那1T的机械硬盘，换上一块固态硬盘安装在这里，注意，这个地方的接口是基于SATA3协议。 然后就是那个空置的mSATA接口位置（图片中最右边）。可以购置一块mSATA接口的固态硬盘安装在这里，因为Y430P内部预留了一个空置的mSATA接口，方便用户升级。在网上看到一些地方说，这个地方的接口是NGFF接口。其实我并不是很懂，暂且这样认为吧——Y430p内部预留了一个空置的mSATA接口，同时兼容NGFF。 至于mSATA接口与NGFF的区别—— mSATA接口是迷你版本SATA接口，这种类型的固态硬盘尺寸小巧，单面厚度仅为4.85mm，不会占用太多笔记本内部空间。mSATA接口的固态硬盘在速度上并不逊色，理论上mSATA将提供跟SATA接口一样的速度和可靠度。由于体积小巧等优势，已被越来越多的笔记本所使用。 NGFF接口是Intel为超极本量身定做的新一代固态硬盘接口标准，其常规尺寸仅为42mm x 22mm，单面布置NAND Flash颗粒的厚度为2.75mm，双面颗粒的厚度是3.85mm，对mSATA来说体积进一步减小，非常适合轻薄的超极本产品。速度方面，采用PCI-Express x2传输标准的NGFF接口的固态硬盘，最大读取速度可达到700MB/s，写入为550MB/s，4K随机读写IOPS分别可达到100K及90K，相比mSATA来说，传输速度会更快。 最后就是中间那个内存条的区域。Y430P预留两个内存位，分别最大支持8G。至于你扩展内存是买4G还是8G的，看你的个人意愿吧，都行。另外呢，买这个内存条的时候，是不是一定要和原装内存条保持一样才好呢，实际上我不这么觉得，因为内存条这类产品，只要你关键参数没挑错，哪家的品牌应该也没多大影响吧。 还有一个细节，我想在这里提一下。当时我买的时候，没有拆下E壳。但后来装内存条的时候，看到待装的那个内存条边缘位置有类似这么一些信息——“DDR3L 1400”，而原装已安装好内存条位置那里的信息类似是“DDR3L 1600”，可恨当时忘了拍照！！ 所以说，其实联想在设计这个预留位置时，推荐的是“DDR3L 1400”参数的内存条，并不是两个位置的内存条都是一样的参数。 上面说的都是前期你需要准备去认识和来了解的基础知识，至于买哪个，我才装好没几天，也没啥好推荐的。能用、耐用、稳定就行。多看看一些评价。 最开始我是打算，不动光驱位置，在预留的mSTATA接口位置增加一块创见256G的SSD（m.2接口），然后将系统迁移到这个固态硬盘上来，还有就是增加一块金士顿8G的骇客神条内存（DDR3L 1600）。 但是，突然因为后续工作方面的原因，我不可以在工作PC上安装两块以上（含两块）硬盘，所以只能退货重新买了这块三星EVO 500G的SSD（SATA3接口），安装在原装主硬盘位置。 至于怎么装硬盘、内存条，过程就很简单了。值得注意的是，插那个内存条的时候，大家要方法正确，千万别插个一半进去，然后一检查发现没有增加这8G内存条还以为这块内存条是坏的。具体还不懂的话，问问jd客服或者度娘就好了。 这是我增加内存条、更换SSD之前用鲁大师这个软件检测的数据信息（鲁大师也就这一个用处了）—— 电脑型号 联想 Lenovo Y430P 20435 笔记本电脑 (扫描时间：2019年09月20日) 操作系统 Windows 10 专业版 64位 ( DirectX 12 ) 处理器 英特尔 第四代酷睿 i7-4710MQ @ 2.50GHz 四核 主板 联想 BIQY0 ( Lynx Point )内存 8 GB ( 镁光 DDR3L 1600MHz )主硬盘 希捷 ST1000LM024 HN-M101MBB ( 1 TB )显卡 Nvidia GeForce GTX 850M ( 2 GB )显示器 友达 AUO143D ( 14 英寸 )光驱 PLDS DVD-RW DU8A5SH DVD刻录机声卡 瑞昱 @ 英特尔 Lynx Point 高保真音频网卡 鈺硕 QCA8171 Gigabit Ethernet / 联想 装完之后，再检测一下—— 电脑型号 联想 Lenovo Y430P 20435 笔记本电脑 (扫描时间：2019年09月24日)操作系统 Windows 10 专业版 64位 ( DirectX 12 ) 处理器 英特尔 第四代酷睿 i7-4710MQ @ 2.50GHz 四核主板 联想 BIQY0 ( Lynx Point )内存 16 GB ( 金士顿 DDR3L 1600MHz / 镁光 DDR3L 1600MHz )主硬盘 三星 SSD 860 EVO 500GB ( 500 GB / 固态硬盘 )显卡 Nvidia GeForce GTX 850M ( 2 GB )显示器 友达 AUO143D ( 14 英寸 )光驱 PLDS DVD-RW DU8A5SH DVD刻录机声卡 瑞昱 @ 英特尔 Lynx Point 高保真音频网卡 鈺硕 QCA8171 Gigabit Ethernet / 联想 补充一个SSD 固态硬盘测试工具（AS SSD Benchmark 2.0.6821）的检测结果—— 这里有一个过程，我给忽略掉了。那就是装好新的硬件后，怎么重新在空白的SSD硬盘上安装操作系统。至于内存条，这个很简单，装上之后就会被检测到。 安装操作系统的过程:随便制作一个U盘系统启动工具（如大白菜啥的），用这里面的GHost软件分配好系统盘以及其他逻辑盘，多看看网上的就行。然后就可以使用某种方式来安装操作系统到系统盘了(因为这个方式太多了，这里不多赘述了)。 Ummmm，以上就是这次的升级体验了。 推荐几个与硬件检测相关的PC软件—— 链接：https://pan.baidu.com/s/19YliUIkq7t76PzfkBL2Tbg提取码：wito如链接失效，欢迎邮件nanzhouieATqq.com寻求帮助。 在这个过程中，我有阅读的几篇参考文章—— Y430P拆机：安装固态硬盘+内存+重装系统梳理 联想y430p固态硬盘安装教程 联想笔记本y430p加固态硬盘/ssd(M.2)","tags":[{"name":"联想Y430p","slug":"联想Y430p","permalink":"https://zhouie.cn/tags/联想Y430p/"},{"name":"拆机","slug":"拆机","permalink":"https://zhouie.cn/tags/拆机/"},{"name":"SSD/HDD","slug":"SSD-HDD","permalink":"https://zhouie.cn/tags/SSD-HDD/"},{"name":"内存条","slug":"内存条","permalink":"https://zhouie.cn/tags/内存条/"}]},{"title":"【核心网CN】 3GPP系统演进学习相关名词","date":"2019-08-14T17:25:35.000Z","path":"posts/201908142/","text":"今年是2019年，5G服务时代眼看就要在全球铺展开来。这段时间学习了一些通信方面的知识，这里首先梳理下各代移动通信网络中出现的各种特有名词。 什么是3GPP第三代合作伙伴计划3GPP（3rd Generation Partnership Project）是一个成立于1998年12月的标准化机构。该组织囊括了来自世界所有地区的标准化组织，当前其成员包括欧洲的ETSI、日本的ARIB和TTC、中国的CCSA、韩国的TTA、北美洲的ATIS和印度的电信标准开发协会。 这个组织机构的出现，最初是为了在国际电信联盟的IMT-2000计划范围内制订和实现全球性的（第三代）移动电话系统规范（也就是3G）。因为，在1998年末3GPP组织成立之前，3G的标准化工作一直在各个地区标准化组织之间并行进行。 名词翻译与大致发展第二代（2G）移动电话系统 GSM（Global System for Mobile Communications）：全球移动通讯系统。它经常被描述成“2G”。 GPRS（General Packet Radio Service）：通用分组无线服务。它经常被描述成“2.5G”。 EDGE（Enhanced Data rates for GSM Evolution）：GSM增强数据率演进。作为2G和2.5G（GPRS）的延伸，有时会称为2.75G。 GERAN （GSM EDGE Radio Access Network）：GSM／EDGE 无线通讯网络。是GSM/EDGE的无线接入部分（GPRS的空中接口）。 第三代（3G）移动电话系统 UMTS（Universal Mobile Telecommunications System）：通用移动通讯系统。有时也叫3GSM，强调结合了3G技术而且是GSM标准的后续标准。MTS分组交换系统是由GPRS系统所演进而来，故系统的架构颇为相像。 UTRAN（UMTS Terrestrial Radio Access Network）：UMTS的陆地无线接入网（UMTS的空中接口）。 UTRAN 架构 HSDPA（High Speed Downlink Packet Access）：高速下行分组接入。又称为3.5G，属于W-CDMA技术的延伸。 LTE（Long Term Evolution）：长期演进技术。是电信中用于手机及数据终端的高速无线通讯标准，为高速下行分组接入（HSDPA）过渡到4G的版本，俗称为3.9G。 E-UTRAN（Evolved Universal Terrestrial Radio Access Network)：演进的通用陆面无线接入网络。属于3GPP LTE 的空中界面。与 HSPA 不同的是，LTE 的 E-UTRA 系一全新的系统，绝不相容于W-CDMA。它提供了更高的传输速率，低延迟和最佳化数据包的能力，用OFDMA无线接入给下行连接，SC-FDMA给上行连接。 作为LTE和SAE网络一部分的EUTRAN架构 注意：这里有一个准确的说法，国际上来看，长期演进技术LTE实际上不能称为真正的4G，因为它没有匹配国际电信联盟无线电通信部门要求的4G标准；LTE-A才匹配国际电信联盟无线电通信部门要求的4G标准。但在国内，人们已经普遍将LTE认为是4G的代名词，这也没什么好纠结的，知道这个点就行。当然了，基于这样的认知，长期演进技术（LTE）的提升版本LTE-A在中国大陆称4G+。 第四代（4G）移动电话系统 LTE-A（LTE-Advanced）：高级长期演进技术，在中国大陆称4G+，是长期演进技术（LTE）的提升版本，也是4G规范的国际高速无线通信标准。 SAE（System Architecture Evolution）：系统架构演进。是3GPP对于LTE无线通信标准的核心网络架构的升级计划。SAE体系结构的主要组成部分是核心分组网演进（EPC，Evolved Packet Core )，也被称为SAE核心。 补充说明LTE与SAE的关系移动数据网络（PS）网络部分最早的资料都冠以SAE名头。SAE 全称是系统架构演进（System Architecture Evolution），是PS网络核心网网络架构向4G演进的工作项目。与SAE对应的概念是LTE。LTE全称是无线接口长期演进（Long Term Evolution，LTE），是无线接口部分向4G演进的工作项目。SAE和LTE都是工作项目（Work Item）的名字，是3GPP为达成某种目标，聚集了一群人，在某个时间开展的一项工作。所以，SAE和LTE是一群人从事的一个工作、一项事业。 而SAE和LTE所研究的对象，分别被称为EPC和E-UTRAN。这两个才构成我们看到的网络。 E-UTRAN：演进的UMTS陆地无线接入网（Evolved Universal Terrestrial Radio Access Network）是3GPP 4G空中接口部分。 EPC：演进分组核心网（Evolved Packet Core），即 4G核心网。 EPC和E-UTRAN共同构成了EPS（演进的分组系统）。EPS代表了整个端到端的4G网络。 由于业界在宣传4G网络时（特别是终端在宣传支持4G时）往往以LTE来表述，造成LTE在今天成了4G整个网络的代名词。 总结一下，就是：我们将LTE代表4G网络，E-UTRAN代表4G网络无线接入部分，EPC代表4G网络核心网部分。 非3GPP系统举例 WiMAX（Worldwide Interoperability for Microwave Access）：全球互通微波访问。是一项高速无线数据网络标准，主要用在城域网，由WiMAX论坛提出并于2001年6月成形。在概念上类似WiFi，WiMAX传送速率更快，传送范围距离更大，简单理解为一种“大WiFi”。 CDMA2000：也是一个3G移动通讯标准，但CDMA2000与另一个3G标准UMTS不兼容。 WIFI：在中文里又称作“无线热点”，是Wi-Fi联盟制造商的商标做为产品的品牌认证，是一个创建于IEEE 802.11标准的无线局域网技术。 不足与改进体现在哪传统3GPP网络的不足： 分组域网络业务支撑能力较弱，基本只能支持非实时性业务，语音业务依赖于电路域（CS）进行承载，造成分组域（PS）和电路域需要分网络运营，不利于网络的统一维护和管理，增加了运维成本。 现有网络由于网络层次较多，数据路由转发效率较低，网络性能需要进一步优化。 目前业务终端的处理能力及无线接入能力在不断增加，多种无线接入技术融合成为可能，促使网络支持多种无线接入系统。 LTE/EPC的研究目标是确定3GPP的长期演进计划，探索未来10年的关键技术。按照3GPP标准演进的构想，LTE/EPC的关键特性如下： 网络架构全面分组化：整个网络全部接口除空口部分外的其他部分已经全部IP化、分组化，电路域不再被定义，只有分组域，语音业务可以由分组域配合IMS(IP Multimedia Subsystem)域等方式提供，以提升网络效率和性能。 网络架构扁平化：网络结构趋于简单，简化了网络部署，同时大大缩短了时延。如：无线接入部分从3G时代的RNC+NodeB演进为一个eNodeB节点。网络部分的用户面只经过SAE-GW一个节点。 简单的3G架构 LTE/EPC融合了GERAN和UTRAN的互操作 支持多接入技术：支持与现有3GPP系统的互通，同时支持非3GPP网络的接入，支持用户在3GPP及非3GPP网络间的漫游和切换。 高速率：峰值速率可以达到下行100Mbit/s，上行50Mbit/s。 部署快：由于网络的简单化，可以快速部署网络，以适应业务不断丰富化发展的趋势。 实时业务增强：增加对实时业务的支持，简化业务连接建立的时延。 再补充一些3GPP2第三代合作伙伴计划2（3rd Generation Partnership Project 2）创建于1998年12月，成员包括：通信工业协会（北美）、中国通信标准化协会（中国）、电波产业会（日本）和TTA（韩国）。3GPP2声称其致力于使国际电信联盟的IMT-2000计划中的（3G）移动电话系统规范在全球的发展，实际上它是从2G的cdmaOne（IS-95）发展而来3G的CDMA2000（IS-2000）标准体系的标准化机构，它受到拥有多项CDMA关键技术专利的高通公司的较多支持。与之对应的第三代合作伙伴计划3GPP致力于从GSM向W-CDMA（UMTS）过渡，因此两个机构存在一定竞争。 移动通讯标准发展-ing","tags":[{"name":"3GPP","slug":"3GPP","permalink":"https://zhouie.cn/tags/3GPP/"},{"name":"3GPP2","slug":"3GPP2","permalink":"https://zhouie.cn/tags/3GPP2/"},{"name":"GSM/GPRS/EDGE/GERAN","slug":"GSM-GPRS-EDGE-GERAN","permalink":"https://zhouie.cn/tags/GSM-GPRS-EDGE-GERAN/"},{"name":"UMTS/UTRAN","slug":"UMTS-UTRAN","permalink":"https://zhouie.cn/tags/UMTS-UTRAN/"},{"name":"LTE/E-UTRAN","slug":"LTE-E-UTRAN","permalink":"https://zhouie.cn/tags/LTE-E-UTRAN/"},{"name":"LTE-A/SAE","slug":"LTE-A-SAE","permalink":"https://zhouie.cn/tags/LTE-A-SAE/"},{"name":"非3GPP","slug":"非3GPP","permalink":"https://zhouie.cn/tags/非3GPP/"},{"name":"CDMA2000","slug":"CDMA2000","permalink":"https://zhouie.cn/tags/CDMA2000/"}]},{"title":"【核心网CN】 IMSI、TMSI、P-TMSI、GUTI、S-TMSI、MSISDN、MSRN、IMEI等这些移动用户标识的辨析","date":"2019-08-14T17:21:33.000Z","path":"posts/201908141/","text":"写在前面3G下，接入网同时连接电路域CS（走语音的）和分组域PS（走得是IP，用于手机上网），即核心网分割为CS、PS，打电话信号走CS，数据业务信号走PS，而在LTE/EPC下，取消了CS域。 电路域使用TMSI和位置区标识LAI来表示用户，TMSI由VLR（拜访位置寄存器，Visitor Location Register）分配； 分组域使用P-TMSI和路由域标识RAI来表示用户，P-TMSI由SGSN分配。 其中，临时身份TMSI/P-TMSI只有在用户登记的位置区LA和路由区RA中才有意义。所以，它应该与LAI或RAI一起使用。IMSI和TMSI的关联保存在用户登记的拜访位置寄存器VLR/SGSN中。 IMSI International Mobile Subscriber Identification Number，即国际移动用户识别码。 国际上为唯一识别一个移动用户所分配的号码。此码在所有位置，包括在漫游区都是有效的。 结构组成：IMSI=MCC+MNC+ MSIN，其中：MCC（ Mobile Country Code）指移动国家代码 ，三个数字，如中国为460；MNC（Mobile Network Code）指移动网络代码，两个数字，如中国邮电的MNC为00；MSIN（Mobile Subscriber Identification Number ）指移动用户标识，在某一PLMN内MS唯一的识别码。编码格式为：H1 H2 H3 S XXXXXX（不超过10位），不同运营商有不同的与MSISDN间的对应关系。 采取E.212编码格式。 典型的IMSI举例：460-00-4777 770001 TMSI Temporary Mobile Subscriber Identity，即（电路域）用户临时标识符。 为了加强系统的保密性而在 VLR 内分配的临时用户识别，在某一 VLR 区域内与 IMSI 唯一对应。 由4个十进制数表示，使用BCD编码。注意： TMSI不可能设置全32位均为1（这是由于TMSI必须存储在SIM里，SIM用4个十进制全为1来标识没有可用的TMSI)。 当MS在位置区LA第一次注册时，就会将一个 TMSI 分配给MS，当MS离开该位置区LA时将释放该 TMSI 。当 MS 每次改变位置区LA时，执行 TMSI 再分配程序。 P-TMSI （分组域）用户临时标识符 为了加强系统的保密性而在SGSN内分配的临时用户识别，在某一SGSN区域内与IMSI唯一对应。 P-TMSI由3个十进制数组成。注意： 不会配置P-TMSI全24位都为1（这是由于P-TMSI有效位必须存储在SIM里，SIM用3个十进制数均设置为1，表示没有有效的P-TMSI值）。 GUTI 在 MME 内分配的临时用户识别。 用于EPS系统中在不暴露UE永久性标识的同时为UE提供一个明确的身份标识。在网络与UE进行信令交互时，网络与UE可以使用它建立用户标识。 在MME所控制的域内，用户使用M-TMSI进行标识。 结构组成：GUTI = GUMMEI+M-TMSI，其中： = = MCC和MNC的格式及长度如前所述，M-TMSI长度为32bit，MME Group ID长度为16bit，MME Code长度为8bit。 S-TMSI S-TMSI是GUTI的一种缩短格式，以保证能够对无线信令进行更有效的处理（如寻呼及服务请求）。S-TMSI由MMEC和M-TMSI组成，用于对用户进行寻呼。 结构组成：S-TMSI&gt; = MMEC+M-TMSI，其中：M-TMSI长度为32bit，MMEC长度为8bit。 M-TMSI由MME分配，在任一MME中不可重复。 MSISDN Mobile Subscriber International ISDN/PSTN number，即国际移动设备身份码，它是主叫用户为呼叫移动通信网中用户所需拨号的号码。 结构组成：MSISDN=CC+NDC+SN，也可以表示为：CC+ N1N2N3 + H0H1H2H3 ＋ ABCD，其中：CC：Country Code，国家码（CC），如中国的国家码为86。NDC：National Destination Code，表示国内目的码（N1N2N3 + H0H1H2H3）。SN：Subscriber Number，客户号码（ABCD）。 国内目的码（NDC）包括：移动接入码（MAC，Mobile Access Code）N1N2N3 和 HLR识别号H1H2H3H4，移动接入码（MAC）用于识别网络，我们目前采用：139、138……。HLR识别号表示用户归属的HLR，也表示移动业务本地网号。 若在以上号码中将国家码CC去除，就成了MS的国内身份号码，也就是我们日常所说的“手机号码”。 采取E.164编码格式（设备GT码）。 存储在HLR（归属位置寄存器，Home Location Register）和VLR中，在MAP接口上传送。 典型的MSISDN举例：86 152 7111 6868 MSRN Mobile Station Roaming Number，即漫游号码。 在移动被叫过程中，由所在业务区的MSC/VLR临时分配，用于寻址VMSC.当移动台漫游到另一个移动交换中心(MSC)业务区时，该移动交换中心将分 配给移动台一个临时漫游号码，用于路由选择。 当移动台离开该区后，被访位置寄存器(VLR)和原归属位置寄存器(HLR)都将这个临时漫游号码删除，以便再分配给其他移动台使用在HLR中每一个SIM卡有唯一识别码IMSI，每个IMSI对应一个MSISDN，你拨对方号码的时候在MSC中会自动把MSISDN转换成对应的 IMSI再来处理； MSRN是在主叫和被叫在不同的MSC下时，MSC之间建立连接的一个漫游号码，作为身份识别。 结构组成：CC + NDC + SN，在此情况下，SN是MSC交换机的地址。 MSC是如何通过MSRN寻找到被叫用户并建立通话的呢？ 图源百度百科 当每次呼叫发生时，主叫侧MSC会向被叫归属的HLR（Home Location Register，归属位置寄存器）请求路由信息。HLR知道被叫用户处在哪一个MSC/VLR服务区内。为了向主叫侧的MSC提供一个本次路由的信息，HLR请求被叫用户当前所处的MSC/VLR分配一个MSRN给被叫用户，并将此号码传递给HLR。HLR再将此号码转发给主叫侧MSC。此时主叫侧MSC就能根据MSRN将主叫用户的呼叫接续至被叫用户所在的MSC/VLR了。 IMEI International Mobile Equipment Identity，即国际移动设备身份码。 结构组成： 其中：TAC ： Type Approval Code , 型号批准码，由欧洲型号批准中心分配。FAC ： Final Assembly Code , 最后装配码，表示生产厂家或最后装配所在地，由厂家进行编码。SNR ： Serial Number , 这 个数字的独立序号码唯一地识别每个 TAC 和 FAC 的每个移动设备。spare ：备用比特，当手机发送时，此位要置 0 。 典型的IMEI举例：490547 40 376733 5","tags":[{"name":"IMSI","slug":"IMSI","permalink":"https://zhouie.cn/tags/IMSI/"},{"name":"TMSI","slug":"TMSI","permalink":"https://zhouie.cn/tags/TMSI/"},{"name":"P-TMSI","slug":"P-TMSI","permalink":"https://zhouie.cn/tags/P-TMSI/"},{"name":"GUTI","slug":"GUTI","permalink":"https://zhouie.cn/tags/GUTI/"},{"name":"S-TMSI","slug":"S-TMSI","permalink":"https://zhouie.cn/tags/S-TMSI/"},{"name":"MSISDN","slug":"MSISDN","permalink":"https://zhouie.cn/tags/MSISDN/"},{"name":"MSRN","slug":"MSRN","permalink":"https://zhouie.cn/tags/MSRN/"},{"name":"IMEI","slug":"IMEI","permalink":"https://zhouie.cn/tags/IMEI/"}]},{"title":"【维修】 生活终于对我的联想Y430P下手了","date":"2019-08-12T17:05:38.000Z","path":"posts/201908121/","text":"写在前面 如果你是个职业维修人员，请忽略本文！ 如果你使用的是超薄本，请忽略本文！ 如果你的电脑正常，请忽略本文！ 下手前最近干了一件“大事”，那就是我给自己的这台联想Y430p电脑拆了机换了壳（A壳、C壳以及D壳），也参照网上的教程对屏轴有所加固！ 没有坏的话，傻子才会去动原装的这些组件。先说明一点情况（病史）： 2015年8月份高考结束后，入手的这台电脑； 2017年寒假的某一天，电脑有不小心从1米左右高度被摔过，导致它的A壳、C壳以及金属散热片有损坏； 2018年的某一天，电脑D壳以及左侧屏轴出现严重损坏，说白了，就是屏轴顶坏了D壳边缘区域，所以屏幕不牢靠会晃动了，在关开屏幕的时候总是特别留意左侧屏轴，小心翼翼； 期间，我也有几次拆下E壳看看这能怎么维修，试过胶水、打火机熔合等不可行（不治本）的方法； 2019年7月末的一天，像以往一样小心打开屏幕，一声轻微的“咳呲”还是被我捕捉到了，下一秒就是电脑不断往复出现系统恢复引导界面，很是吓人。工具也不在身边，只好找了家维修店拆机，过程就不说了，结果就是我们发现问题是因为左侧屏轴顶到了一个硬件单元（系统恢复引导块），于是果断地把这个并没有太大实际作用的硬件单元给拆了。 “拖延癌晚期”的我终于也意识到了该修一下这台电脑了，不然小问题很可能真的就要成为大问题了。 损坏的A壳、C壳、D壳、金属散热片以及左侧屏轴 在开始维修之前，先看一下A、B、C、D、E壳分别指代什么—— A、B、C、D、E壳 当然了，肯定也是需要买一些新配件和工具的—— A、C、D壳 加固屏轴需要的螺丝螺帽等 加固屏轴需要的手捻钻（含钻头） 注意： 我给出购物界面截图纯粹为了省事，给大家一个实物参考。比如卖螺丝那家店就不是很推荐大家去，螺帽和螺丝就很不严丝缝合。 大家买C壳的时候一定要和客服沟通清楚，（一般来说，市面上的C壳配件有塑料材质和金属拉丝材质两种，后者价格自然会贵些），建议购买原装的（金属拉丝材质），而A、D壳每家店基本上也差不多； 如果A壳问题不大，不建议更换（其实像我这种就不需要更换），因为拆换A壳需要拆完E、C、D、B壳之后才能进行，过程麻烦就不说了，重新进行屏幕内部四周的走线是更麻烦的。 下手中说了这么多，下面就开始维修了—— 之前没有经验，当然需要先看一下这个 联想Y430p的拆机视频 以及 联想Y430p的C壳触摸板拆装视频！ 以防视频失效，贴一下百度云链接吧：https://pan.baidu.com/s/1p2P6isnIDNp_QBebX1LT7w提取码：6ylw 还可以参考这个从某宝商家截来的安装教程 具体来拆机，其实还是蛮顺畅的，关键是胆大心细慢慢来—— 拆下E壳后（维修前） 拆下E壳、C壳后（维修前） 拆下的这些零零件件 被替换的A、C、D壳 本来也是打算录个视频，因为是新手操作就没这样（花了好久）。 其实换完A、C、D壳就可以结束了，但这段时间我从网上查阅到不少关于“联想Y430p这款电脑左屏轴出问题”的求助帖子什么的，不难看出——这款笔记本的设计师脑袋有坑，左屏轴的问题不是我碰到的个案，而是它与生俱来的硬伤！ 网上的相似案例图片 所以为了给它加固一点，我找到了这样一篇帖子—— 联想430p屏轴手动打孔详尽教程，很感谢！（这就是为什么前面我有购买螺丝、手捻钻这些东西的原因） 大家在购买螺丝什么的时候，型号别弄错了（m2.5 x 20螺丝长度正好）！ 手工钻孔姿势 总结一下这个过程中需要留意的几个地方： 安装时候各个插线处要记得插到位（特别是触摸板排线，大概进去3mm，否则触摸板会不好用）； 要理清各个螺丝孔的螺丝型号是哪个，最好边拆边拍一些图片以防之后插线、上螺丝给忘记了； 遇到螺丝滑丝的情况，不要一直不停地用蛮力去较劲，可以试着换个新的螺丝刀，当然了，很多时候可能就得抛弃这个螺丝孔了； 打孔上螺丝的时候，要小心仔细，别损坏了其他硬件，否则捡了芝麻丢了西瓜可就不好了。 下手后 A、C、D壳更换后 总的来说，这次拆机、换壳以及加固屏轴是一次特别的体验，没有我想象的那么难，但也不算简单。比如我这次，全部步骤完成后就赶紧去合上E壳上螺丝，可之后发现触摸板不可用😭，只好依次拆下E壳、C壳排查问题（插线处不够紧合），再次组装之后又发现耳机孔没用，只好再依次拆下E壳、C壳排查问题（同样是插线处不够紧合）……类似这种小毛病往往复复。 所以呢，建议大家在合盖、全上螺丝之前先开机做个测试，看哪儿有没有什么问题，提前解决。 相关链接 联想Y430p的拆机视频 联想Y430p的C壳触摸板拆装视频 联想430p屏轴手动打孔详尽教程","tags":[{"name":"联想Y430p","slug":"联想Y430p","permalink":"https://zhouie.cn/tags/联想Y430p/"},{"name":"拆机","slug":"拆机","permalink":"https://zhouie.cn/tags/拆机/"},{"name":"换壳","slug":"换壳","permalink":"https://zhouie.cn/tags/换壳/"},{"name":"加固屏轴","slug":"加固屏轴","permalink":"https://zhouie.cn/tags/加固屏轴/"}]},{"title":"【数通】 从二层、三层的概念展开这段时间学习的数通知识","date":"2019-07-27T13:45:38.000Z","path":"posts/201907271/","text":"话题引入在数通学习中，不可避免的会看到“二层交换机与三层交换机”、“二层转发与三层转发”这些名词，那么这里说的“二层”、“三层”究竟意味着什么呢？ 我们知道，TCP/IP网络模型共有五层，其中第二层是数据链路层，第三层是网络层，简单来看，网络层负责封装 源IP地址以及 目的IP地址，而数据链路层负责封装 源MAC地址以及 目的MAC地址。（IP地址：标识一台网络设备；MAC地址：标识一台物理设备） 很显然，从应用层往下依次封装报文，在网络层和数据链路层分别获取 源IP地址 和 源MAC地址是很容易的，那么目的IP地址 和 目的MAC地址呢？目的IP地址很容易得到（这里面涉及到DNS服务器的作用），而目的MAC地址，则需要 ARP地址解析协议的帮助。 地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。主机发送信息时将包含目标IP地址的ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。（摘自百度百科） 在讲二层、三层之前，我们得先理解一下局域网LAN、广域网WAN、VLAN虚拟局域网这些概念。 局域网（Local Area Network，LAN）是指在某一区域内由多台计算机互联成的计算机组。广域网（Wide Area Network，WAN），一般又称外网、公网。是连接不同地区局域网或城域网计算机通信的远程网。（同样摘自百度百科，emm真香！） 也许你会在心里弱弱地想，为啥咱要弄这个局域网的概念？那么不妨逆向思维一下，在没有局域网这个概念的世界里，也就是全网任意两个网络设备都是直接互通的（Emmm…光想想就很可怕..），有一个广州的靓仔小Z想要去访问www.huawei.com，如果华为的服务器部署在北京，你的应用层数据经过传输层、网络层（也假设有台DNS服务器恰好成功解析了域名）封装后，在前往数据链路层封装时，会发送ARP广播消息向“全网”寻求位于北京的那台华为服务器的MAC地址。请注意，这里是广播，还只是靓仔小Z一个人的行为，在中国这么多网民、这么多网络设备，同一时刻会出现那么多上网行为，就算网络传输速率再快，同时出现如此数量的广播行为，COOL！200%会出现广播风暴！！！ 从上面这段假（fei）想（hua）可以看出，局域网的其中一个作用便是分割出多个广播域，换句话来理解，一个局域网就是一个广播域，这样能将广播域控制在一定范围内，不然的话，数据完全处理不过来。另一方面，我们的网络世界毕竟还是互联的，那么众多局域网之间借助什么介质实现互相通信呢？答案是——路由器！众所周知，路由器有一个“知名”功能——隔离广播，也就是划分出若干个局域网（广播域），相反地，通过路由器连接起多个局域网就得到了广域网。 思考一下：既然路由器隔离了广播，那么我又怎么和其他局域网通信呢？这里就涉及到网关（虚拟路由冗余协议VRRP、双向转发检测BFD）、IP路由表（静态路由、OSPF动态路由）、MAC地址表（地址解析协议ARP、泛洪、环路与生成树协议STP）等等这些新概念了，这些在后面具体都会讲到。 上面提到路由器，自然就不可避免地提到一个学习中常出现的设备——交换机，经常会在脑海中有这样的疑问——路由器和交换机的区别与联系在哪？ 上面这个问题很重要，所以！我准备加粗了！路由器是用于三层转发的（即工作于网络层），主要同IP地址、路由信息打交道，它可以隔离广播，提供路由表实现网络层数据报文的转发。而交换机是用于二层转发的（即工作于数据链路层），它主要同MAC地址打交道，提供MAC地址表实现数据链路层数据帧的转发。可能有人会问，这两者有联系吗？当然有了，这两者都有着数据转发功能，这是最基本的功能，也很好理解。但两者转发机制又有所不同，对路由器而言，如果在路由表中没有查到对应表项，路由器会自动丢弃该报文。对交换机而言，如果MAC表中也没有查到对应表项，交换机会触发泛洪（注意，此泛洪非彼犯浑，具体也放后面讲），从而将数据帧发送出去。总之，交换机总是能将数据转发出去！ 实例分析一波 在分析实例之前，给出二层转发、三层转发的解释（如果下面这段话你不理解，可以接着看完下面的内容再回过头来想）： 没错！二层L2就是指数据链路层，三层L3就是指网络层！可以这样理解：在A与B数据通信的中间传送路径上经过的各个物理设备都没有“经过”网络层（这里的“经过”可以理解为数据帧没有被拆包），就可以称为L2转发，否则，也就意味着数据需要经过网络层，这就称为L3转发！有一些很明显的特征，若通信的数据传送路径上有经过路由器，则可认定为L3转发，若只经过交换机转发，则认定为L2转发。L2转发只会依靠MAC地址表，L3转发主要依靠IP路由表，当然了也会涉及到MAC地址。再换种表述方法，若通信的数据传送过程只在同一LAN内进行，则可认定为L2转发，若传送过程在LAN间进行，则可认定为L3转发。 先贴一张“老实本分”的网络拓扑结构图！ 一张像模像样的网络拓扑结构图 图中已经标明了主机以及各个设备物理端口的IP地址、网络掩码SM的配置信息。可以看出： （主机PC3、PC4、交换机SW1、SW2、SW3以及路由器R1的Eth 0/0/0物理端口）处于同一LAN1； （主机PC1以及路由器R1的GE 0/0/0物理端口）处于同一LAN2； （路由器R1的Eth 0/0/1物理端口以及路由器R2的Eth 0/0/0物理端口）处于同一LAN3； （主机PC2以及路由器R2的Eth 0/0/1物理端口）这些处于同一LAN4。 为了你能看得具象些，我尽力了 很显然，处于同一LAN内的任意两台设备都能ping通（这主要因为我们在规划网络时，遵循这样的原则——同一LAN内的网络设备的IP地址必须处于同一网段。具体为什么要这样后面会提到）。 实例一结合上面的拓扑图来分析一下“PC3 上发一条微信给PC4”这个业务流程： PC3上的微信数据信息经过传输层TCP头部、网络层IP头部封装后，准备封装源MAC地址以及目的MAC地址（也就是数据链路层头部），源MAC很容易获得，而目的MAC地址的话，PC3会首先在自己本机的ARP缓存（目的IP地址、目的MAC地址）这样的映射表文件中查找是否有能匹配上目的IP地址的表项，若有，直接拿来用即可；若没有，则需要由PC3发送一个ARP请求帧（广播）到同一LAN内的所有主机。 注意：这个ARP请求帧中包括源主机PC3的IP地址、源主机PC3的MAC地址、目的主机PC4的IP地址，而“目的主机的MAC地址部分”用“0XFF FF FF FF”表示，从而实现广播功能。 从上面这个拓扑图可以看出，PC3发送的ARP请求帧（广播消息）会经过SW2，而SW2在收到ARP请求帧（广播消息）后，首先会在自己的MAC地址表中记录下（PC3的MAC地址，SW2的GE0/0/1）这样一条表项，然后再分析ARP请求帧（广播消息）具体往GE0/0/2还是GE0/0/3转发。 这里要给出一个新的概念——生成树协议STP，STP的目的是为了避免出现环路，试想一下，从SW2发出的广播可能会选择GE0/0/2发往SW1，而SW1发出的广播也可能会选择到GE0/0/2发往SW3，更糟糕的是，SW3发出的广播也可能会选择到GE0/0/3从而又回到了SW2，这样就形成了一个环路，而交换机并不知道，这严重消耗了带宽资源，甚至会产生广播风暴，导致交换机死机。对于所有的环路问题，最直接、最容易想到的一种环路避免方法就是“破环”，在这里具体就是手动随机关闭交换机的某个端口，让环路不得存在！很显然，对于结构复杂的现网，这样手动随机关闭的方法是不现实的，所以，我们这才有了生成树协议STP，STP协议是在逻辑上断开网络的环路，防止广播风暴的产生，而一旦正在用的线路出现故障，逻辑上被断开的路线又被连通，继续传输数据。其实这个协议，我们是可以在空闲状态下，SW2的GE0/0/2端口抓包分析看到，STP协议是一直在处于不间断运行状态的。 在SW2的GE0/0/2抓包分析 我们假设STP协议机制选择了在逻辑上断开SW2的GE0/0/2端口（环路便不存在了），那么SW2只能向SW3发送ARP请求帧（广播消息），SW3收到ARP请求帧（广播消息）后，也会在自己的MAC地址表中记录下（PC3的MAC地址，SW3的GE0/0/3）这样一条表项，然后就会将ARP请求帧（广播消息）分别向SW1和PC4方向转发，当主机PC4接收到ARP请求，并且检查到这个ARP请求帧中所包含的目的IP地址与自己的IP地址匹配上了，它首先会将主机PC3的IP地址和MAC地址映射添加到它自己本地的ARP缓存中，然后再将包含PC4主机MAC地址的ARP回复消息直接发送回主机PC3（注意，此时不再是广播回复，而是单播）。而送往SW1方向的ARP请求会首先经过SW1（当然SW1也会记录下（PC3的MAC地址，SW1的GE0/0/2）到它的MAC地址表中），最终会到达路由器R1的Eth0/0/0端口，而路由器是会隔离广播消息的，所以无法传输过去，当然也不会给出任何回复消息。 那么PC4返回的ARP回复消息是怎么回送给PC3呢，具体回送过程如何？ PC4返回的ARP回复消息中包含PC4的IP地址、PC4的MAC地址、PC3的IP地址、PC3的MAC地址。当这条消息发送到SW3时，会在SW3的MAC地址表中添加一条（PC4的MAC地址，SW3的GE0/0/2）表项，同时，根据消息帧中的目的MAC地址（即上句话中的PC3的MAC地址）查询SW3的MAC地址表，匹配到之前记录下的一条表项（PC3的MAC地址，SW3的GE0/0/3），故此，这条ARP回复消息会从SW3的GE0/0/3端口转发，到达SW2后同理，首先在SW2的MAC地址表中添加一条（PC4的MAC地址，SW2的GE0/0/3）表项，再根据消息帧中的目的MAC地址（同样也是PC3的MAC地址）查询SW2的MAC地址表，匹配到之前记录下的一条表项（PC3的MAC地址，SW3的GE0/0/1），故此，这条ARP回复消息从SW2的GE0/0/1端口转发，这样就将ARP回复消息送到了主机PC3。 当主机PC3收到从主机PC4发来的ARP回复消息时，首先会用（主机PC4的IP地址，主机PC4的MAC地址）映射关系更新它自己本地的ARP缓存，至此，也就算完成了上面的ARP请求。其次，主机PC4既然拿到了PC3的MAC地址，那么我们回过头再看前面的数据封装步骤，这时就可以进行数据链路层的头部封装了。 更新一下经过上面ARP请求后，各个交换机的MAC地址表状况，如果你看懂了上面的ARP过程，那么这些表项如何添加进来应当就不难理解了！ 各个交换机的MAC地址表以及各主机ARP缓存表情况 数据链路层封装的头部主要包含：目的MAC地址即PC4的MAC地址、源MAC地址即PC3的MAC地址，（数据链路层封装的数据信息称为帧），再然后，数据帧经过物理层转换为比特流形式通过物理层设备传输，具体在我们这个实例中，就是从PC3到SW2的数据比特流的传输，到了SW2后，这些比特流又会反过来转换为数据帧的形式，这样交换机SW2就能从中读出目的MAC地址，（其实，交换机真正感兴趣的、能处理的也就只有这个目的MAC地址，这点必须要理解清楚！！！），SW2会根据这个目的MAC地址即PC4的MAC地址在自己的MAC地址表中查找是否有对应项，很显然，能找到表项匹配上（可以参照着看上面的MAC地址表图），即依次经过SW2、SW3转发（依靠MAC地址表），能实现PC3与PC4间的数据通信过程。 从网上找了一下ARP报文格式，我们可以结合这个部分再回顾一下前面的ARP请求帧： ARP报文格式 首先，可以看到ARP报文是由14位的以太网首部和28位的以太网ARP请求/应答字段构成的。按顺序来看，首先看以太网首部： 第一部分，以太网目的地址，也就是目的MAC地址，这是一个广播地址，所以就是用0XFF-FF-FF-FF-FF-FF表示目标是网络上所有的主机。 第二部分，以太网源地址，也就是源MAC地址，这是请求端(发送端)的MAC地址。 第三部分，帧类型，表明这个以太网帧的类型，其中0x0806代表这是ARP协议帧，即后面的数据是属于ARP包的。 再看以太网ARP请求/应答字段： 第一部分，硬件类型，其中1代表是以太网。 第二部分，协议类型，表明上层协议的类型，其中0x0800表示上层协议是IP协议 第三部分，硬件地址长度，这很显然是6个字节 第四部分，协议地址长度，其中IP协议的长度是4个字节 第五部分，操作类型，在报文中占2个字节，其中1表示ARP请求，2表示ARP应答，3表示RARP请求，4表示RARP应答。这前五个部分就是ARP首部。 第六部分，发送者硬件地址，即发送方(源)MAC地址。 第七部分，发送者IP地址，即发送方(源)IP地址。 第八部分，目标硬件地址，即目的MAC地址。 第九部分，目标IP地址，即目的IP地址。 实例二结合上面的拓扑图来分析一下“PC3 上发一条微信给PC2”这个业务流程： 在分析这个业务流程之前，应当有这样的认识，主机PC3、PC2的IP地址不在同一LAN，那么数据信息应当首先转发到网关（通过MAC地址），这属于L2转发，跨过网关后就进入了L3转发（通过IP路由转发）。具体看下面： 传输数据之前，PC3能判断出自己与PC2不在同一LAN内，那么PC3发出的微信消息依次经过传输层、网络层、数据链路层会经过类似如下封装（草图）： TCP/IP协议栈的封装过程 从上面这个图也可以看出，TCP/IP协议数据整体封装方式如下： TCP/IP协议数据整体封装方式 其中，应用层（第一层）提供应用程序网络协议端口号，区分不同的应用进程，例如HTTP（80）、HTTPS（443）、Telnet（23）、FTP（21）、SMTP（25）、DNS（53）、TFTP（69）、SNMP（161）等等； 传输层（第二层）位于应用层和网络层之间，存在一个复用和分用的功能（应用层所有的应用进程都可以通过传输层再传到网络层，这就是复用。传输层从网络层收到发送给各应用进程的数据后，必须分别交付给由端口号指明的各应用进程，这就是分用），也就是说传输层协议（TCP或UDP）用端口号来标识和区分各种上层应用程序； TCP/UDP报文格式 网络层位于数据链路层和传输层中间，接收传输层的数据报文，分段为合适的大小，封装上IP报文头部，交给数据链路层。网络层为了保证数据包的成功转发，主要涉及了这些协议：IP（IPv4/IPv6）协议、ARP协议（工作于网络层与数据链路层之间）、RARP、ICMP、IGMP等。 IP报文格式 数据链路层主要功能就是保证将源端主机网络层的数据包准确无误地传送到目的主机的网络层。数据链路层的帧使用物理层提供的比特流传输服务来到达目的主机数据链路层。 数据链路层对网络层数据(IP数据报文)长度的限制——MTU 物理层的功能是在终端设备间传输比特流，目前常用的数据信号传输介质主要有同轴电缆（coaxical cable）、双绞线（twisted pair）、光纤（fibre）、无线电波（wireless radio）等，常见的网络设备有：中继器、集线器等。传输数据的方式能满足点到点，一点到多点，串行或并行，半双工或者全双工，同步或异步传输的需要。 上面这些内容其实只是“九牛一毛”，详细的各层封装处理还有很多细节值得深抠，我这里也就不做这些拓展了，以后有时间一点一点来。 回到我们这个实例，PC3想要发送的微信消息会在传输层封装上包含源端口号（一般由操作系统给应用进程自动分配一个）以及目的端口号（根据你想要的的应用服务来生成，比如你想要的获取HTTP服务，那么就是80）的传输层头部，然后在网络层封装上包含源主机PC3的IP地址（这个很容易得到）以及目的主机PC2的IP地址（DNS解析）的网络层头部，再然后，应当进行数据链路层的封装了，PC3通过目的IP地址发现这个目的主机PC2与我不在同一LAN内，那么PC3会首先在自己本地的ARP缓存映射表中找到就会发出一个ARP请求网关的MAC地址（过程类似于PC3向全网广播说：“我的IP是192.168.1.1/24，我的MAC地址是XX XX XX XX XX XX，我想知道IP地址为192.168.1.3/24的网关的MAC地址是多少？”，而只有这条广播消息帧到达路由器R1的Eth0/0/0接口才能匹配上，它就会回复：“我的IP地址是192.168.1.3/24，我的MAC地址是XX XX XX XX XX XX”，具体ARP过程这里就不再赘述了）。 这里提到了网关GateWay这个概念，对于网关，我们需要知道这几点：1. 网关这个概念是相对于主机而言的；2. 主机想要访问不属于本LAN内的网络设备时，必然会选择从网关出去；3. 最常见的网关设备便是路由器；4. 不难发现，主机IP地址及其网关IP地址应该处于同一LAN内（即同一网段内）；5. 在谈及网关时，我们常常会碰到虚拟路由冗余协议VRRP和双向转发检测协议BFD（具体可以通过看我在这里介绍的——VRRP虚拟路由冗余协议的配置来帮助理解这两者）！ 当PC3收到了包含网关MAC地址（即路由器R1的MAC地址）的ARP回复消息时，首先会将（R1的MAC地址，R1的Eth0/0/0端口IP地址）这条映射关系添加到自己本地的ARP缓存表中，然后就可以在数据链路层对之前从网络层送来的IP数据报文进行封装成帧，主要包含源主机PC3的MAC地址以及路由器R1的MAC地址（这就是这个数据帧的目的MAC地址）。 到了这一步，数据帧就会转换成比特流形式（高低电频表示二进制）通过物理层传输介质到达SW2，SW2接收到数据流又会转换成数据帧，从中读出目的MAC地址（即R1的MAC地址）并在自己的MAC地址表查找能匹配上的表项，选出从哪个端口转发，按照我们前面的描述，这个比特流向应当是“SW2-&gt;SW3-&gt;SW1-&gt;R1”。 到达R1后，R1会首先将（PC3的MAC地址，PC3的IP地址）这样一条表项添加进R1自己的ARP缓存中去，然后，R1会发现这个数据帧头部包含的目的MAC地址与自己的MAC地址是一致的，那么R1就会“解一层包”（因为单从这一层来看，R1就是这个数据帧的目的地），但解开后，很快R1就会发现IP数据报文首部中的目的IP地址为192.168.2.3/24（很容易得出目的网络地址为192.168.2.0/24），这显然不是发给自己的。故有随后的转发判断规则与流程如下： ① 若该目的网络地址192.168.2.0/24就是与路由器R1直接相连的某个网络地址（路由表中为Direct类型），则不需要经过其他路由器，直接把这个IP数据报文封装成帧（这里封装的数据链路层头部包括源MAC地址即R1的MAC地址，目的MAC地址即目的主机的MAC地址，同样的，路由器中也是有一个ARP高速缓存表，所以如果路由器所保存的ARP缓存中如果没有目的IP地址对应的表项，那么也会使用ARP），交付给目的主机，否则，执行② ； ② 若R1的路由表中有某个特定表项的目的IP地址与该目的主机PC2的IP地址192.168.2.3/24一致，则把数据报转发给路由器表中所指明的下一跳路由器，否则，执行③ ； ③ 若R1的路由表中有到达目的网络地址192.168.2.0/24的路由，则把数据报传送给路由表中所指明的下一跳路由，否则，执行④； ④ 若R1的路由表中有一个默认路由（缺省路由，即目的地址为0.0.0.0），则把数据传送给路由表所指明的默认下一跳，否则，执行⑤； ⑤ 报告路由器R1转发出错，数据无法转发出去，丢弃处理。 具体在我们这个实例中，显然路由器R1会符合②或③（或④）这两种情况之一，但其实不论哪种情况，都会向下一跳路由器R2转发，转发之前，路由器R1应当将这个IP数据报文头部中的源IP地址改为路由器R1的Eth 0/0/1端口的IP地址，目的IP地址依然是PC2的IP地址，重新封装成帧（这里封装的数据链路层头部包括源MAC地址即R1的MAC地址，目的MAC地址即R2的MAC地址，同样的，路由器中也是有一个ARP高速缓存表，所以如果路由器所保存的ARP缓存中如果没有对应的表项，那么也会使用ARP以获取想要知道的MAC地址。比如这里，R1就会在LAN3这个局域网内产生一个ARP广播消息去拿到R2的MAC地址的）。 上面这段话还有两个前面一直在提的细节没有描述： 为什么我们在IP数据报文封装成帧和路由转发之前要将IP数据报文头部中的源IP地址修改成路由器R1的Eth 0/0/1端口的IP地址？这是因为，为了让R2在接收到我这个IP数据报文时，能够更新它的ARP缓存，即添加（R1的MAC地址，R1的Eth0/0/1端口IP地址）这样的一条表项。 R2收到ARP广播请求消息后，会首先在自己的ARP缓存中添加（R1的MAC地址，R1的Eth0/0/1端口IP地址）这样的一条表项，而R1在收到R2回复的ARP回复消息后，也会首先在本地ARP缓存中添加（R2的MAC地址，R2的Eth0/0/0端口IP地址）这样的一条表项，这点是ARP协议的重要部分，别给轻易忘了。 上面的步骤已经让比特流流向路由器R2了，R2同样在将比特流转换为数据帧后，发现这个帧头部中的目的MAC地址和自己的MAC地址是一致的，也会拆一层包，那么看到的便是IP数据报文了，这时，R2会首先在自己的ARP缓存中添加（R1的MAC地址，R1的Eth0/0/1端口IP地址）这样的一条表项，而且，路由器R2会发现IP数据报文中所指明的目的IP地址符合①这种情况，也就是同R2直接相连（路由表中为Direct类型），那么直接把这个IP数据报文封装成帧（同理，在封装成帧和路由转发之前要将IP数据报文头部中的源IP地址修改成路由器R2的Eth 0/0/1端口的IP地址192.168.2.1/24，目的IP地址依然是PC2的IP地址），在这里封装的数据链路层头部包括源MAC地址即R2的MAC地址，目的MAC地址即目的主机PC2的MAC地址（同样可以通过ARP得到），这样封装成帧后经物理层转换为比特流从而抵达目的主机PC2！ PC2在将比特流转换为数据帧后，发现这个帧头部中的目的MAC地址和自己的MAC地址是一致的，会拆一层包，那么看到的便是IP数据报文了，这里同样会首先将（R2的MAC地址，R2的Eth 0/0/1端口的IP地址）添加到自己的ARP缓存中，然后又发现这个IP数据报文首部中的目的IP地址和自己的IP地址也是一致的，会再拆一层包，那么看到的便是了TCP数据段了，这个时候它会从TCP数据段的头部中识别出目的端口号是啥，去掉这些头部信息后，从而交付给由端口号指明的上层各应用进程。 当然了，PC2也是需要给PC3回复消息的，在前面这些步骤描述中，其实一些配置信息包括路由器R1、R2和主机PC2的ARP缓存映射表，交换机SW1、SW2、SW3的MAC地址表也随之建立完善了起来，也就是说PC2给PC3回复消息的过程会免去这些ARP请求步骤（但对用户来说，这是透明的，因为用户是感受不到也完全看不到ARP请求过程的）。 实例小结下面，我们就这两个例子总结一下知识点以及还需要注意的地方： ARP是解决同一局域网上的主机或路由器的IP地址和MAC地址的映射问题，对于主机而言，它是不知道这种地址解析过程的，只要主机或路由器要和本网络上的另一个已知IP地址的主机或路由器通信，ARP协议就会自动把这个IP地址解析为数据链路层封装是所需要的MAC地址； 通常，主机和路由器所拥有的ARP缓存是有生存期的，这是很有必要的，设想有一种情况，主机A和B通信，A的ARP缓存中保存有B的硬件地址。但B的网络适配器突然坏了，B立即更换了一块，因此B的MAC地址就改变了，假定A还要和B继续通信，A在其ARP缓存中查找到B原先的MAC地址，并使用该MAC地址向B发送数据帧，但B原先的MAC地址以及失效了，因此A无法找到主机B。但是过了一段不长的生成时间，A的ARP缓存中已经删除了B原先的MAC地址，于是A重新广播发送ARP请求消息，又找到了B； ARP广播消息帧中的“目的MAC地址部分”是0XFF FF FF FF FF FF，所以交换机对于这样的目的MAC地址，可不必去MAC地址表中查询（当然也不可能有表项能匹配上），而是统一会向其他端口广播发出； 我们在理解“封装”时，需要知道，有时也可能在数据尾部加上某些报文信息，这种也可称为封装，比如在数据链路层封装成帧时，就会在头部、尾部都会加上一些报文信息； “封装”的另一个重要认知：以数据链路层封装为例，如果网络层传来的IP数据报文比较长（超出上限），那么是无法套在一个TCP头部之后的，这个时候需要需要对数据分片处理， ， 然后在组装成多个帧（而不是一个）。其他各层也有类似特点。 路由器很明显的一个特性是，同一路由器各个端口所在的网段是不可以冲突的，也就是必须互相位于不同网段。从最上面那张网络拓扑图也可以看出，在规划网络时，我们始终遵循这样的原则——同一LAN内的网络设备的IP地址必须处于同一网段。这也符合路由器隔离广播域、划分出各个LAN的特性。 实例二涉及到“路由表”这个概念，我们需要知道，路由分为静态路由（手动配置添加路由）、动态路由（主要有四种RIP、OSPF、IS-IS、BG）。具体路由表配置可以参看我的这篇文章——静态路由表的配置（含负载分担、路由备份） 以及 多区域OSPF动态路由协议的配置。 关于L2转发、L3转发，我们上面所描述的实例一便属于L2转发，而实例二属于L3转发。可以借助下面这个图来帮助理解（其中1-5依次表示TCP/IP协议五层模型）： L2转发、L3转发 补充内容局域网&amp;以太网局域网是在20世纪70年代末发展起来的，局域网技术在计算机网络中占有非常重要的地位。其主要特点是：网络为一个单位所拥有，且地址范围和站点数目均有限。局域网刚出现的时候，局域网比广域网具有较高的数据率、较低的时延和较低的误码率。但随着光纤技术在广域网中普遍使用，现在广域网也具有较高的数据率和较低的误码率。 必须指出，局域网工作层次跨越了数据链路层和物理层。局域网可使用多种传输媒体，其中双绞线已成为局域网中的主流传输媒体，当数据率很高时，往往需要使用光纤作为传输媒体。 按拓扑结构划分，局域网可以分为星形网（集线器Hub的大量应用）、环形网（与令牌机制相关）、总线网（以传统的以太网最为出名）。局域网经过四十多年的发展，尤其是在快速以太网（Fast Ethernet，100Mbit/s）和吉比特以太网（Gigabit Ethernet，1Gbit/s）、10吉比特以太网（10 Gbit/s）相继进入市场后，以太网已经在局域网市场占据绝对优势。可以这样说，现在的以太网几乎成了局域网的同义词。（由于以太网的传输速率已演进到每秒吉比特甚至100Gbit/s，因此通常用“传统以太网”来表示最早流行的10Mbit/s速率的以太网） 以太网的发展与两个标准 最开始的以太网是一种基带总线局域网（数据率为2.94Mbit/s），于1975年由美国施乐公司研制成功。1980年，DEC公司、英特尔公司和施乐公司联合提出了10Mbit/s以太网规约的第一个版本DIX V1。1982年修改为第二版规约（实际上也是最后的版本），即DIX Ethernet V2，成为世界上第一个局域网产品的规约。在此基础上，IEEE 802 委员会的802.3工作组与1983年制定了第一个IEEE的以太网标准 IEEE 802.3，数据率为10Mbit/s。但实际上，以太网的两个标准 DIX Ethernet V2 和 IEEE 802.3标准只有很小的差别，因此很多人也会把802.3局域网称为“以太网”（严格来讲，“以太网”应当指符合DIX Ethernet V2标准的局域网）。 出于有关厂商在商业上的竞争，IEEE 委员会未能形成一个统一的、“最佳的”局域网标准，而是被迫制定了几个不同的局域网标准，如802.4令牌总线网、802.5令牌环网等。 为了使数据链路层更好地适应不同的局域网标准，IEEE 802委员会就把局域网的数据链路层拆成两个子层，即逻辑链路控制子层LLC（Logical Link Control）和媒体接入控制子层MAC（Medium Access Control）。 与接入到传输媒体有关的内容都放到MAC子层，而LLC子层则与传输媒体无关，不管采用何种传输媒体和MAC子层的局域网对LLC子层来说都是透明的。 但需要注意的是，局域网市场的竞争在20世纪90年代逐渐明朗。以太网在局域网市场已经取得了垄断地位，并且几乎成为了局域网的代名词。TCP/IP体系中经常使用的局域网只剩下DIX Ethernet V2 而不是 802.3标准中的局域网，因此，IEEE 802委员会制定的逻辑链路控制子层LLC的作用也就消失了。现在的很多厂商生产的适配器上就仅安装有MAC协议而没有LLC协议。（回顾我们上面的两个分析实例，就没有考虑LLC子层） 网络适配器从一般概念上理解，计算机同外部局域网的连接是通过适配器进行的，而最开始适配器是在主机箱内插入的一块网络接口卡（简称“网卡”）。但现在的计算机大都将这种适配器嵌入计算机主板，不再单独使用单独的网卡，所以，“网络适配器”的说法会比“网卡”说法更精确。 适配器和局域网之间的通信是通过电缆或双绞线以串行传输方式进行的，而适配器和计算机之间的通信则是通过计算机主板上的I/O总线以并行传输方式进行的。因此，适配器一个重要功能就是要进行数据串行传输和并行传输的转换。 网络上的数据率和计算机总线上的数据率并不相同，因此是适配器中必须装有对数据进行缓存的存储器模块。 在主板插上适配器后，还必须把管理该适配器的设备驱动程序安装在计算机的操作系统中，这个驱动程序以后就会告诉适配器，应当从存储器的什么位置把多长的数据块发送到局域网，或者应当在存储器的什么位置上吧局域网发过来的数据块存储下来。 计算机的硬件地址固化在了网络适配器的ROM中，故硬件地址的概念等同于物理地址、MAC地址。这和IP地址这种逻辑上的概念不同，所以IP地址则会保存在计算机的存储器中。 根据上面的内容表述，总结：适配器所实现的功能包含了数据链路层和物理层，适配器上装有处理器模块和存储器模块（包括RAM和ROM）。 （摘自《计算机网络》谢希仁版） 适配器接收和发送各种帧时不使用计算机的CPU。这时CPU可以处理其他任务。当适配器收到有差错的帧时，就把这个帧丢弃而不必通知计算机。当适配器收到正确的帧时，它就使用中断来通知该计算机并交付协议栈中的网络层。当计算机要发送IP数据报时，就由协议栈把IP数据报向下交给适配器，组装成帧后发送到局域网。 计算机通过适配器和局域网进行通信 三层交换机三层交换机就是指具有部分路由器功能的交换机。 （再次摘自百度百科）出于安全和管理方便的考虑，主要是为了减小广播风暴的危害，必须把大型局域网按功能或地域等因素划成一个个小的局域网，这就使VLAN技术在网络中得以大量应用，而各个不同VLAN间的通信都要经过路由器来完成转发，随着网间互访的不断增加。单纯使用路由器来实现网间访问，不但由于端口数量有限，而且路由速度较慢，从而限制了网络的规模和访问速度。基于这种情况三层交换机便应运而生，三层交换机是为IP设计的，接口类型简单，拥有很强二层包处理能力，非常适用于大型局域网内的数据路由与交换，它既可以工作在协议第三层替代或部分完成传统路由器的功能，同时又具有几乎第二层交换的速度，且价格相对便宜些。 三层交换机出现最重要的目的是加快大型局域网内部的数据交换，所具备的路由功能也多是围绕这一目的而展开的，所以它的路由功能没有同一档次的专业路由器强。毕竟在安全、协议支持等方面还有许多欠缺，并不能完全取代路由器工作。 在实际应用过程中，典型的做法是：处于同一个局域网中的各个子网的互联以及局域网中VLAN间的路由，用三层交换机来代替路由器，而只有局域网与公网互联之间要实现跨地域的网络访问时，才通过专业路由器。 VLAN虚拟局域网VLAN，英文全称为Virtual Local Area Network，很显然，“虚拟”意味着不存在物理实体的，因此在理解VLAN的时候，需要我们有一定的逻辑思维。我们前面一直有提到——一个局域网LAN就是一个广播域，这种观点在VLAN出现后就应当有所改变了，VLAN技术就是将一个物理的局域网LAN在逻辑上划分成多个广播域，每一个广播域就是一个VLAN。可以根据交换机的端口，或每个主机的MAC地址，或每个主机的网络层地址或协议类型(如果支持多协议)等来进行划分。 上面这段解释透露了这样一个信息——虚拟局域网只是局域网提供给用户的一种“技术服务”，而并不是一种什么“新型局域网”。 （摘自《计算机网络》谢希仁版）有这样一个网络拓扑如下图，设有10台主机分配在三个楼层中，构成三个局域网（由此可知这里使用的以太网交换机是指带路由功能的三层交换机），即：LAN1；（A1，A2，B1，C1），LAN2：（A3，B2，C2），LAN3：（A4，B3，C3）。但这10个主机划分为三个工作组，也就是说划分为三个虚拟局域网。即：VLAN1：（A1，A2，A3，A4），VLAN2：（B1，B2，B3），VLAN3：（C1，C2，C3）。 三个虚拟局域网VLAN1、VLAN2、VLAN3的构成 从图中可以看出，每个VLAN的主机可以在同一局域网LAN中，也可以处在不同的局域网LAN中，也可以不在同一楼层中。这说明同一个VLAN内的各个工作点没有限制在同一个物理地址范围，也没有限制在同一物理的LAN网段。利用以太网交换机（带路由功能的三层交换机）可以很方便地将这10台主机划分为三个虚拟局域网：VLAN1、VLAN2、VLAN3。在虚拟局域网上的每一个工作点都可以收到同一虚拟局域网上的其他成员所发出的广播。例如，主机B1~B3同属于虚拟局域网VLAN2，那么A1、A2和C1都不会收到B1发出的广播消息，虽然他们与B1连接在同一个以太网交换机上。这样，虚拟局域网限制了接收广播信息的主机数，使得网络不会因传播过多的广播消息而引起性能恶化（广播风暴）。 从上面这个例子可以看出，由于虚拟局域网是用户和网络资源的逻辑组合，因此可以按照需要将有关设备和资源非常方便地重新组合。例如，某个单位拥有财物、开发和办公三个部门，出于安全和管理方面的考虑，希望每个部门的计算机可以无障碍通信，部门之间的通信则需要进行控制。采用VLAN技术就可以容易地实现这种用户需求。 可能你有发现上面那张拓扑图中有这样一行小字“使用802.1Q帧格式”，这是IEEE为支持虚拟局域网，对标准以太网的帧格式进行了拓展。由于这部分拓展给以太网帧的首部增加了4个字节，因此以太网的最大帧长从原来的1518字节（1500字节的数据加上18字节的“首部”封装）变成了1522字节。 插入VLAN标记TAG的802.1Q帧格式 在大型局域网中，VLAN技术给网络管理员和网络用户都带来了许多好处。归纳起来主要有以下几点： 减少移动和改变的代价，即所说的动态管理网络，也就是当一个用户从一个位置移动到另一个位置时，他的网络属性不需要重新配置，而是动态地完成，这种动态管理网络给网络管理者和使用者都带来了极大的好处。一个用户，无论他到哪里，他都能不作任何修改地接入网络。当然，并不是所有的VLAN定义方法都能做到这一点。* 虚拟工作组（Grouping）。使用VLAN的最终目标就是建立虚拟工作组，例如，在企业网中，同一个部门好像在同一个LAN上一样，很容易互相访问、交流信息，同时，所有的广播包也都限制在该虚拟LAN上，而不影响其他VLAN的人。一个人如果从一个办公地点换到另外一个办公地点，而他仍然在该部门，那么，该用户的配置无须改变。同时，如果一个人虽然办公地点没有变，但他更换了部门，那么，只需网络管理员更改一下该用户的配置即可。这个功能的目标就是建立一个动态的组织环境。 VLAN的应用解决了许多大型二层交换网络产生的问题：限制广播包，提高带宽的利用率，有效地解决了广播风暴带来的性能下降问题。一个VLAN形成一个小的广播域，同一个VLAN成员都在由所属VLAN确定的广播域内。那么，当一个数据包没有路由时，交换机只会将此数据包发送到所有属于该VLAN的其他端口，而不是所有的交换机的端V1，这样，就将数据包限制在了一个VLAN内，从而在一定程度上可以节省带宽。 增强通信的安全性。一个VLAN的数据包不会发送到另一个VLAN，这样，其他VLAN用户的网络上收不到任何该VLAN的数据包，这样就确保了该VLAN的信息不会被其他VLAN的人窃听，从而实现了信息的保密。 由于VLAN是从逻辑上对网络进行划分，组网方案灵活，配置管理简单，从而降低了管理维护的成本。 （再次摘自百度百科）大约有80%的通信流量发生在VLAN内，20%的通信流量要跨越不同的VLAN。目前，解决VLAN之间的通信一般采用两种路由策略，即集中式路由和分布式路由。 集中式路由集中式路由策略是指所有VLAN都通过一个中心路由器实现互联。对于同一交换机（一般指二层交换机）上的两个端口，如果它们属于两个不同的VLAN，尽管它们在同一交换机上，在数据交换时也要通过中心路由器来选择路由。这种方式的优点是简单明了，逻辑清晰。缺点是由于路由器的转发速度受限，会加大网络时延，容易发生拥塞现象。因此，这就要求中心路由器提供很高的处理能力和容错特性。 分布式路由分布式路由策略是将路由选择功能适当地分布在带有路由功能的交换机上（指三层交换机），同一交换机上的不同VLAN可以直接实现互通，这种路由方式的优点是具有极高的路由速度和良好的可伸缩性。 没讨论到的地方 物理层知识 曼切斯特编码 信道复用技术（频分复用、时分复用、波分复用、码分复用CDMA） 数据链路层知识 CRC（循环冗余检验）检错技术 PPP协议（点对点协议） CSMA/CD协议（载波监听多点接入/碰撞检测协议） 网络层知识 路由动态协议（RIP、OSPF、IS-IS、BGP） 虚拟专用网VPN 网络地址转换协议NAT 传输层知识 TCP/UDP各自工作特点 应用层知识 域名系统DNS 文件传送协议FTP 简单邮件传送协议SMTP 网络安全知识 防火墙策略 参考资料 《计算机网络》谢希仁. pdf版 基于VLAN的二层、三层转发原理 VRRP虚拟路由冗余协议的配置 静态路由表的配置（含负载分担、路由备份） 多区域OSPF动态路由协议的配置 某些数通基本知识梳理 IP编址分类和子网划分 OSI七层（或TCP/IP五层）网络模型","tags":[{"name":"二层(三层)转发","slug":"二层-三层-转发","permalink":"https://zhouie.cn/tags/二层-三层-转发/"},{"name":"路由表","slug":"路由表","permalink":"https://zhouie.cn/tags/路由表/"},{"name":"MAC地址表","slug":"MAC地址表","permalink":"https://zhouie.cn/tags/MAC地址表/"},{"name":"ARP缓存","slug":"ARP缓存","permalink":"https://zhouie.cn/tags/ARP缓存/"},{"name":"VLAN","slug":"VLAN","permalink":"https://zhouie.cn/tags/VLAN/"}]},{"title":"【数通】 多区域OSPF动态路由协议的配置","date":"2019-07-26T12:01:55.000Z","path":"posts/201907261/","text":"OSPF协议简介开放式最短路径优先OSPF（Open Shortest Path First）是IETF组织开发的一个基于链路状态的内部网关协议（Interior Gateway Protocol）。OSPF分为OSPFv2和OSPFv3两个版本,其中OSPFv2用在IPv4网络，OSPFv3用在IPv6网络。 主要要了解OSPF的三张表： 邻居表（Peer table）OSPF是一种可靠的路由协议，要求在路由器之间传递链路状态通告之前，需先建立OSPF邻居关系，hello报文用于发现直连链路上的其他OSPF路由器，再经过一系列的OSPF消息交互最终建立起全毗邻的邻居关系，OSPF路由器的邻居信息显示在邻居表中。 链路状态数据库（Link-state database，简称LSDB）OSPF用LSA（link state Advertisement，链路状态通告）来描述网络拓扑信息，然后OSPF路由器用LSDB来存储网络的这些LSA。OSPF将自己产生的以及邻居通告的LSA搜集并存储在LSDB中。掌握LSDB的查看以及对LSA的深入分析才能够深入理解OSPF。 OSPF路由表（Routing table）基于LSDB进行SPF（Dijkstra算法）计算，而得出的OSPF路由表。 拓扑图（含IP规划） 配置任务按照拓扑图要求配置IP地址，配置多区域OSPF动态路由协议，最终实现PC1和PC2的互相通信。 配置工具华为网络设备仿真平台eNSP 配置多区域OSPF动态路由协议 配置步骤（含完整指令）首先，配置主机PC1、PC2的IP信息很简单（留意网关就好），比如PC1就这样： 配置主机PC1 然后，需要配置的是R1、R2、R3、R4的各个端口所分配的IP地址，以R1为例，需要配置的有Eth0/0/0（10.1.1.2/30）、Eth0/0/1（10.1.4.1/30）、G0/0/0（10.1.3.1/30）这三个端口。 12345678910111213141516171819&lt;Huawei&gt;sys # R1Enter system view, return user view with Ctrl+Z.[Huawei]int eth0/0/0[Huawei-Ethernet0/0/0]ip address 10.1.1.2 30[Huawei-Ethernet0/0/0]Jul 25 2019 20:13:20-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP on the interface Ethernet0/0/0 has entered the UP state.Jul 25 2019 20:13:24-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 1, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/0]int eth0/0/1[Huawei-Ethernet0/0/1]ip address 10.1.4.1 30[Huawei-Ethernet0/0/1]Jul 25 2019 20:13:47-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP on the interface Ethernet0/0/1 has entered the UP state.Jul 25 2019 20:13:54-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 2, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/1]int g0/0/0[Huawei-GigabitEthernet0/0/0]ip address 10.1.3.1 30[Huawei-GigabitEthernet0/0/0]Jul 25 2019 20:14:12-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[2]:The line protocol IP on the interface GigabitEthernet0/0/0 has entered the UP state.Jul 25 2019 20:14:14-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 3, the change loop count is 0, and the maximum number of records is 4095.[Huawei-GigabitEthernet0/0/0]q[Huawei] 12345678910111213141516171819&lt;Huawei&gt;sys # R1Enter system view, return user view with Ctrl+Z.[Huawei]int eth0/0/0[Huawei-Ethernet0/0/0]ip address 10.1.2.2 30[Huawei-Ethernet0/0/0]Jul 25 2019 20:16:05-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP on the interface Ethernet0/0/0 has entered the UP state.Jul 25 2019 20:16:13-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 1, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/0]int eth0/0/1[Huawei-Ethernet0/0/1]ip address 10.1.5.1 30[Huawei-Ethernet0/0/1]Jul 25 2019 20:16:39-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP on the interface Ethernet0/0/1 has entered the UP state.Jul 25 2019 20:16:43-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 2, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/1]int g0/0/0[Huawei-GigabitEthernet0/0/0]ip address 10.1.3.2 30[Huawei-GigabitEthernet0/0/0]Jul 25 2019 20:16:59-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[2]:The line protocol IP on the interface GigabitEthernet0/0/0 has entered the UP state.Jul 25 2019 20:17:03-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 3, the change loop count is 0, and the maximum number of records is 4095.[Huawei-GigabitEthernet0/0/0]q[Huawei] 12345678910111213141516171819&lt;Huawei&gt;sys #R3Enter system view, return user view with Ctrl+Z.[Huawei]int eth0/0/0[Huawei-Ethernet0/0/0]ip address 10.1.1.1 30[Huawei-Ethernet0/0/0]Jul 25 2019 20:18:56-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP on the interface Ethernet0/0/0 has entered the UP state.Jul 25 2019 20:19:03-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 1, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/0]int eth0/0/1[Huawei-Ethernet0/0/1]ip address 10.1.2.1 30[Huawei-Ethernet0/0/1]Jul 25 2019 20:19:22-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP on the interface Ethernet0/0/1 has entered the UP state.Jul 25 2019 20:19:23-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 2, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/1]int g0/0/0[Huawei-GigabitEthernet0/0/0]ip address 192.168.1.2 24[Huawei-GigabitEthernet0/0/0]Jul 25 2019 20:19:40-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[2]:The line protocol IP on the interface GigabitEthernet0/0/0 has entered the UP state.Jul 25 2019 20:19:43-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 3, the change loop count is 0, and the maximum number of records is 4095.[Huawei-GigabitEthernet0/0/0]q[Huawei] 12345678910111213141516171819&lt;Huawei&gt;sys #R4Enter system view, return user view with Ctrl+Z.[Huawei]int eth0/0/0[Huawei-Ethernet0/0/0]ip address 10.1.5.2 30[Huawei-Ethernet0/0/0]Jul 25 2019 20:21:02-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP on the interface Ethernet0/0/0 has entered the UP state.Jul 25 2019 20:21:03-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 1, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/0]int eth0/0/1[Huawei-Ethernet0/0/1]ip address 10.1.4.2 30[Huawei-Ethernet0/0/1]Jul 25 2019 20:21:25-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP on the interface Ethernet0/0/1 has entered the UP state.Jul 25 2019 20:21:33-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 2, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/1]int g0/0/0[Huawei-GigabitEthernet0/0/0]ip address 192.168.2.2 24[Huawei-GigabitEthernet0/0/0]Jul 25 2019 20:21:50-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[2]:The line protocol IP on the interface GigabitEthernet0/0/0 has entered the UP state.Jul 25 2019 20:21:53-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 3, the change loop count is 0, and the maximum number of records is 4095.[Huawei-GigabitEthernet0/0/0]q[Huawei] 接下来，需要开始配置OSPF协议了，大致步骤如下： 创建OSPF进程，并指定OSPF进程号及Router-ID 1ospf [ process-id | router-id router-id ] 进入特定area的配置视图 1area area-id 在特定area的配置视图内，在特定接口激活OSPF 1network ip-address wildcard-mask（通配符掩码） 下面就按照上面这个配置步骤一步一步来： 1234567891011121314151617# R3[Huawei]ospf 1 router-id 1.1.1.1Jul 25 2019 20:25:13-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 4, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1]area 1[Huawei-ospf-1-area-0.0.0.1]Jul 25 2019 20:25:33-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 5, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.1]network 10.1.1.0 0.0.0.3[Huawei-ospf-1-area-0.0.0.1]Jul 25 2019 20:28:34-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 6, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.1]network 10.1.2.0 0.0.0.3[Huawei-ospf-1-area-0.0.0.1]Jul 25 2019 20:28:54-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 7, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.1]network 192.168.1.0 0.0.0.255[Huawei-ospf-1-area-0.0.0.1]Jul 25 2019 20:29:24-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 8, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.1]q[Huawei-ospf-1] 1234567891011121314151617181920212223242526272829303132# R1[Huawei]ospf 1 router-id 2.2.2.2[Huawei-ospf-1]Jul 25 2019 20:35:25-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 4, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1]area 0[Huawei-ospf-1-area-0.0.0.0]Jul 25 2019 20:35:55-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 5, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.0]network 10.1.3.0 0.0.0.3[Huawei-ospf-1-area-0.0.0.0]Jul 25 2019 20:36:15-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 6, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.0]q[Huawei-ospf-1]area 1[Huawei-ospf-1-area-0.0.0.1]Jul 25 2019 20:36:35-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 7, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.1]network 10.1.1.0 0.0.0.3[Huawei-ospf-1-area-0.0.0.1]Jul 25 2019 20:36:55-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 8, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.1]Jul 25 2019 20:36:57-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[0]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.1.1, NeighborEvent=HelloReceived, NeighborPreviousState=Down, NeighborCurrentState=Init)Jul 25 2019 20:36:57-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[1]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.1.1, NeighborEvent=2WayReceived, NeighborPreviousState=Init, NeighborCurrentState=2Way)Jul 25 2019 20:36:57-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[2]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.1.1, NeighborEvent=AdjOk?, NeighborPreviousState=2Way, NeighborCurrentState=ExStart)Jul 25 2019 20:36:57-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[3]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.1.1, NeighborEvent=NegotiationDone, NeighborPreviousState=ExStart, NeighborCurrentState=Exchange)Jul 25 2019 20:36:58-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[4]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.1.1, NeighborEvent=ExchangeDone, NeighborPreviousState=Exchange, NeighborCurrentState=Loading)Jul 25 2019 20:36:58-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[5]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.1.1, NeighborEvent=LoadingDone, NeighborPreviousState=Loading, NeighborCurrentState=Full)[Huawei-ospf-1-area-0.0.0.1]q[Huawei-ospf-1]area 2[Huawei-ospf-1-area-0.0.0.2]Jul 25 2019 20:37:25-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 9, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.2]network 10.1.4.0 0.0.0.3[Huawei-ospf-1-area-0.0.0.2]Jul 25 2019 20:37:45-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 10, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.2] 12345678910111213141516171819202122232425262728293031323334353637383940# R2[Huawei]ospf 1 router-id 3.3.3.3[Huawei-ospf-1]Jul 25 2019 20:42:44-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 4, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1]area 0[Huawei-ospf-1-area-0.0.0.0]Jul 25 2019 20:43:04-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 5, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.0]network 10.1.3.0 0.0.0.3[Huawei-ospf-1-area-0.0.0.0]Jul 25 2019 20:43:24-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[0]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.3.1, NeighborEvent=HelloReceived, NeighborPreviousState=Down, NeighborCurrentState=Init)Jul 25 2019 20:43:24-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[1]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.3.1, NeighborEvent=2WayReceived, NeighborPreviousState=Init, NeighborCurrentState=2Way)Jul 25 2019 20:43:24-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[2]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.3.1, NeighborEvent=AdjOk?, NeighborPreviousState=2Way, NeighborCurrentState=ExStart)Jul 25 2019 20:43:24-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 6, the change loop count is 0, and the maximum number of records is 4095.Jul 25 2019 20:43:24-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[3]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.3.1, NeighborEvent=NegotiationDone, NeighborPreviousState=ExStart, NeighborCurrentState=Exchange)Jul 25 2019 20:43:24-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[4]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.3.1, NeighborEvent=ExchangeDone, NeighborPreviousState=Exchange, NeighborCurrentState=Loading)Jul 25 2019 20:43:24-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[5]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.3.1, NeighborEvent=LoadingDone, NeighborPreviousState=Loading, NeighborCurrentState=Full)[Huawei-ospf-1-area-0.0.0.0]q[Huawei-ospf-1]area 1[Huawei-ospf-1-area-0.0.0.1]Jul 25 2019 20:43:34-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 7, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.1]network 10.1.2.0 0.0.0.3[Huawei-ospf-1-area-0.0.0.1]Jul 25 2019 20:43:51-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[6]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.2.1, NeighborEvent=HelloReceived, NeighborPreviousState=Down, NeighborCurrentState=Init)Jul 25 2019 20:43:51-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[7]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.2.1, NeighborEvent=2WayReceived, NeighborPreviousState=Init, NeighborCurrentState=2Way)Jul 25 2019 20:43:51-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[8]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.2.1, NeighborEvent=AdjOk?, NeighborPreviousState=2Way, NeighborCurrentState=ExStart)Jul 25 2019 20:43:51-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[9]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.2.1, NeighborEvent=NegotiationDone, NeighborPreviousState=ExStart, NeighborCurrentState=Exchange)Jul 25 2019 20:43:51-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[10]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.2.1, NeighborEvent=ExchangeDone, NeighborPreviousState=Exchange, NeighborCurrentState=Loading)Jul 25 2019 20:43:51-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[11]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.2.1, NeighborEvent=LoadingDone, NeighborPreviousState=Loading, NeighborCurrentState=Full)Jul 25 2019 20:43:54-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 8, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.1]q[Huawei-ospf-1]area 2[Huawei-ospf-1-area-0.0.0.2]Jul 25 2019 20:44:04-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 9, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.2]network 10.1.5.0 0.0.0.3[Huawei-ospf-1-area-0.0.0.2]Jul 25 2019 20:44:24-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 10, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.2] 1234567891011121314151617181920212223242526272829# R4[Huawei]ospf 1 router-id 4.4.4.4[Huawei-ospf-1]areaJul 25 2019 20:48:14-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 4, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1]area 2[Huawei-ospf-1-area-0.0.0.2]Jul 25 2019 20:48:24-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 5, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.2]network 10.1.5.0 0.0.0.3[Huawei-ospf-1-area-0.0.0.2]Jul 25 2019 20:48:44-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 6, the change loop count is 0, and the maximum number of records is 4095.Jul 25 2019 20:48:47-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[0]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.5.1, NeighborEvent=HelloReceived, NeighborPreviousState=Down, NeighborCurrentState=Init)Jul 25 2019 20:48:47-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[1]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.5.1, NeighborEvent=2WayReceived, NeighborPreviousState=Init, NeighborCurrentState=2Way)Jul 25 2019 20:48:47-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[2]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.5.1, NeighborEvent=AdjOk?, NeighborPreviousState=2Way, NeighborCurrentState=ExStart)Jul 25 2019 20:48:47-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[3]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.5.1, NeighborEvent=NegotiationDone, NeighborPreviousState=ExStart, NeighborCurrentState=Exchange)Jul 25 2019 20:48:47-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[4]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.5.1, NeighborEvent=ExchangeDone, NeighborPreviousState=Exchange, NeighborCurrentState=Loading)Jul 25 2019 20:48:47-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[5]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.5.1, NeighborEvent=LoadingDone, NeighborPreviousState=Loading, NeighborCurrentState=Full)[Huawei-ospf-1-area-0.0.0.2]network 10.1.4.0 0.0.0.3[Huawei-ospf-1-area-0.0.0.2]Jul 25 2019 20:49:04-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 7, the change loop count is 0, and the maximum number of records is 4095.Jul 25 2019 20:49:07-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[6]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.4.1, NeighborEvent=HelloReceived, NeighborPreviousState=Down, NeighborCurrentState=Init)Jul 25 2019 20:49:07-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[7]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.4.1, NeighborEvent=2WayReceived, NeighborPreviousState=Init, NeighborCurrentState=2Way)Jul 25 2019 20:49:07-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[8]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.4.1, NeighborEvent=AdjOk?, NeighborPreviousState=2Way, NeighborCurrentState=ExStart)Jul 25 2019 20:49:07-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[9]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.4.1, NeighborEvent=NegotiationDone, NeighborPreviousState=ExStart, NeighborCurrentState=Exchange)Jul 25 2019 20:49:07-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[10]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.4.1, NeighborEvent=ExchangeDone, NeighborPreviousState=Exchange, NeighborCurrentState=Loading)Jul 25 2019 20:49:07-08:00 Huawei %%01OSPF/4/NBR_CHANGE_E(l)[11]:Neighbor changes event: neighbor status changed. (ProcessId=1, NeighborAddress=10.1.4.1, NeighborEvent=LoadingDone, NeighborPreviousState=Loading, NeighborCurrentState=Full)[Huawei-ospf-1-area-0.0.0.2]network 192.168.2.0 0.0.0.255[Huawei-ospf-1-area-0.0.0.2]Jul 25 2019 20:49:34-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 8, the change loop count is 0, and the maximum number of records is 4095.[Huawei-ospf-1-area-0.0.0.2] 至此，上面这些步骤算是配置完成了多区域OSPF动态路由协议！ 结果验证 ping验证（PC1 上 ping PC2） 1234567891011121314PC&gt;ping 192.168.2.1Ping 192.168.2.1: 32 data bytes, Press Ctrl_C to breakFrom 192.168.2.1: bytes=32 seq=1 ttl=125 time=125 msFrom 192.168.2.1: bytes=32 seq=2 ttl=125 time=172 msFrom 192.168.2.1: bytes=32 seq=3 ttl=125 time=172 msFrom 192.168.2.1: bytes=32 seq=4 ttl=125 time=140 msFrom 192.168.2.1: bytes=32 seq=5 ttl=125 time=110 ms--- 192.168.2.1 ping statistics --- 5 packet(s) transmitted 5 packet(s) received 0.00% packet loss round-trip min/avg/max = 110/143/172 ms tracert验证 12345678PC&gt;tracert 192.168.2.1traceroute to 192.168.2.1, 8 hops max(ICMP), press Ctrl+C to stop 1 192.168.1.2 31 ms 31 ms 32 ms 2 10.1.2.2 62 ms 63 ms 62 ms 3 10.1.5.2 78 ms 94 ms 94 ms 4 192.168.2.1 125 ms 109 ms 125 ms 查看路由表情况（以R2为例）很明显，OSPF动态协议配置成功了，动态增加了两条协议类型为OSPF的路由表项！ 12345678910111213141516171819202122[Huawei]display ip routing-tableRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public Destinations : 12 Routes : 12Destination/Mask Proto Pre Cost Flags NextHop Interface 10.1.1.0/30 OSPF 10 2 D 10.1.2.1 Ethernet0/0/0 10.1.2.0/30 Direct 0 0 D 10.1.2.2 Ethernet0/0/0 10.1.2.2/32 Direct 0 0 D 127.0.0.1 Ethernet0/0/0 10.1.3.0/30 Direct 0 0 D 10.1.3.2 GigabitEthernet0/0/0 10.1.3.2/32 Direct 0 0 D 127.0.0.1 GigabitEthernet0/0/0 10.1.4.0/30 OSPF 10 2 D 10.1.5.2 Ethernet0/0/1 10.1.5.0/30 Direct 0 0 D 10.1.5.1 Ethernet0/0/1 10.1.5.1/32 Direct 0 0 D 127.0.0.1 Ethernet0/0/1 127.0.0.0/8 Direct 0 0 D 127.0.0.1 InLoopBack0 127.0.0.1/32 Direct 0 0 D 127.0.0.1 InLoopBack0 192.168.1.0/24 OSPF 10 2 D 10.1.2.1 Ethernet0/0/0 192.168.2.0/24 OSPF 10 2 D 10.1.5.2 Ethernet0/0/1 这里的话，补充一下几条OSPF中常用的查看和验证指令： 查看OSPF协议相关运行参数——display ospf brief 查看OSPF邻居表——display ospf peer 查看LSDB表 ——display ospf lsdb 查看OSPF路由——display ospf routing 比如display ospf peer，我们可以看看路由器R2： 1234567891011121314151617181920212223242526272829303132333435[Huawei]display ospf peer OSPF Process 1 with Router ID 3.3.3.3 Neighbors Area 0.0.0.0 interface 10.1.3.2(GigabitEthernet0/0/0)'s neighbors Router ID: 2.2.2.2 Address: 10.1.3.1 State: Full Mode:Nbr is Slave Priority: 1 DR: 10.1.3.2 BDR: 10.1.3.1 MTU: 0 Dead timer due in 32 sec Retrans timer interval: 5 Neighbor is up for 01:31:04 Authentication Sequence: [ 0 ] Neighbors Area 0.0.0.1 interface 10.1.2.2(Ethernet0/0/0)'s neighbors Router ID: 1.1.1.1 Address: 10.1.2.1 State: Full Mode:Nbr is Slave Priority: 1 DR: 10.1.2.1 BDR: 10.1.2.2 MTU: 0 Dead timer due in 40 sec Retrans timer interval: 5 Neighbor is up for 01:31:09 Authentication Sequence: [ 0 ] Neighbors Area 0.0.0.2 interface 10.1.5.1(Ethernet0/0/1)'s neighbors Router ID: 4.4.4.4 Address: 10.1.5.2 State: Full Mode:Nbr is Master Priority: 1 DR: 10.1.5.2 BDR: 10.1.5.1 MTU: 0 Dead timer due in 39 sec Retrans timer interval: 5 Neighbor is up for 01:31:09 Authentication Sequence: [ 0 ] 参考资料 OSPF基础介绍 《计算机网络》谢希仁. pdf版 静态路由表的配置（含负载分担、路由备份） 某些数通基本知识梳理","tags":[{"name":"OSPF","slug":"OSPF","permalink":"https://zhouie.cn/tags/OSPF/"},{"name":"动态路由协议","slug":"动态路由协议","permalink":"https://zhouie.cn/tags/动态路由协议/"}]},{"title":"【数通】 静态路由表的配置（含负载分担、路由备份）","date":"2019-07-26T11:33:42.000Z","path":"posts/201907261/","text":"拓扑图（含IP规划） 配置任务按照拓扑图要求配置IP地址，手动添加构建路由表，并在路由器R1和R2间实现静态路由的负载分担（到相同目的地址的下一跳不同，但优先级相同；到目的地的流量将均匀分布），在路由器R2和R3间实现静态路由的主备路由备份（到相同目的地址的下一跳和优先级都不同，优先级高的为主，低的为备），最终实现PC1和PC2的互相通信。 配置工具华为网络设备仿真平台eNSP 静态路由表的配置 配置步骤（含完整指令）首先，配置主机PC1、PC2的IP信息很简单（留意网关就好），比如PC1就这样： 配置主机PC1 然后，需要配置的是R1、R2、R3、R4的各个端口所分配的IP地址，以R1为例，需要配置的有Eth0/0/0（192.168.1.2/24）、Eth0/0/1（10.1.1.1/30）、G0/0/0（10.1.2.1/30）这三个端口。 1234567891011121314151617181920212223242526272829303132333435363738&lt;Huawei&gt;sys #R1Enter system view, return user view with Ctrl+Z.[Huawei]int Eth0/0/0[Huawei-Ethernet0/0/0]ip address 192.168.1.2 24[Huawei-Ethernet0/0/0]Jul 25 2019 17:11:56-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP on the interface Ethernet0/0/0 has entered the UP state.Jul 25 2019 17:12:02-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 1, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/0]q[Huawei]int Eth0/0/1[Huawei-Ethernet0/0/1]ip address 10.1.1.1 30[Huawei-Ethernet0/0/1]Jul 25 2019 17:14:34-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP on the interface Ethernet0/0/1 has entered the UP state.Jul 25 2019 17:14:42-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 2, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/1]q[Huawei]int g0/0/0[Huawei-GigabitEthernet0/0/0]ip address 10.1.2.1 30[Huawei-GigabitEthernet0/0/0]Jul 25 2019 17:21:12-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[2]:The line protocol IP on the interface GigabitEthernet0/0/0 has entered the UP state.Jul 25 2019 17:21:13-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 3, the change loop count is 0, and the maximum number of records is 4095.[Huawei-GigabitEthernet0/0/0]q[Huawei]display ip routing-table # 查询一下当前的路由表中有哪些表项Route Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public Destinations : 8 Routes : 8Destination/Mask Proto Pre Cost Flags NextHop Interface 10.1.1.0/30 Direct 0 0 D 10.1.1.1 Ethernet0/0/1 10.1.1.1/32 Direct 0 0 D 127.0.0.1 Ethernet0/0/1 10.1.2.0/30 Direct 0 0 D 10.1.2.1 GigabitEthernet0/0/0 10.1.2.1/32 Direct 0 0 D 127.0.0.1 GigabitEthernet0/0/0 127.0.0.0/8 Direct 0 0 D 127.0.0.1 InLoopBack0 127.0.0.1/32 Direct 0 0 D 127.0.0.1 InLoopBack0 192.168.1.0/24 Direct 0 0 D 192.168.1.2 Ethernet0/0/0 192.168.1.2/32 Direct 0 0 D 127.0.0.1 Ethernet0/0/0 类似地方法不断操作，可以完成R1、R1、R2、R3、R4的各个端口IP地址的配置。 123456789101112131415161718192021222324252627&lt;Huawei&gt;sys #R2Enter system view, return user view with Ctrl+Z.[Huawei]int eth0/0/0[Huawei-Ethernet0/0/0]ip address 10.1.1.2 30[Huawei-Ethernet0/0/0]Jul 25 2019 18:28:03-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP on the interface Ethernet0/0/0 has entered the UP state.Jul 25 2019 18:28:05-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 1, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/0]q[Huawei]int eth0/0/1[Huawei-Ethernet0/0/1]ip address 10.1.2.2 30[Huawei-Ethernet0/0/1]Jul 25 2019 18:28:32-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP on the interface Ethernet0/0/1 has entered the UP state.Jul 25 2019 18:28:35-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 2, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/1]q[Huawei]int g0/0/0[Huawei-GigabitEthernet0/0/0]ip address 10.1.3.1 30[Huawei-GigabitEthernet0/0/0]Jul 25 2019 18:28:52-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[2]:The line protocol IP on the interface GigabitEthernet0/0/0 has entered the UP state.Jul 25 2019 18:28:55-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 3, the change loop count is 0, and the maximum number of records is 4095.[Huawei-GigabitEthernet0/0/0]q[Huawei]int g0/0/1[Huawei-GigabitEthernet0/0/1]ip address 10.1.4.1 30[Huawei-GigabitEthernet0/0/1]Jul 25 2019 18:29:09-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[3]:The line protocol IP on the interface GigabitEthernet0/0/1 has entered the UP state.Jul 25 2019 18:29:15-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 4, the change loop count is 0, and the maximum number of records is 4095.[Huawei-GigabitEthernet0/0/1]q[Huawei] 123456789101112131415161718192021&lt;Huawei&gt;sys #R3Enter system view, return user view with Ctrl+Z.[Huawei]int eth0/0/0[Huawei-Ethernet0/0/0]ip address 10.1.3.2 30[Huawei-Ethernet0/0/0]Jul 25 2019 18:31:29-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP on the interface Ethernet0/0/0 has entered the UP state.Jul 25 2019 18:31:35-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 1, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/0]q[Huawei]int eth0/0/1[Huawei-Ethernet0/0/1]ip address 10.1.4.2 30[Huawei-Ethernet0/0/1]Jul 25 2019 18:31:59-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP on the interface Ethernet0/0/1 has entered the UP state.Jul 25 2019 18:32:05-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 2, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/1]q[Huawei]int g0/0/0[Huawei-GigabitEthernet0/0/0]ip address 10.1.5.1 30[Huawei-GigabitEthernet0/0/0]Jul 25 2019 18:32:27-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[2]:The line protocol IP on the interface GigabitEthernet0/0/0 has entered the UP state.Jul 25 2019 18:32:35-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 3, the change loop count is 0, and the maximum number of records is 4095.[Huawei-GigabitEthernet0/0/0]q[Huawei] 123456789101112131415&lt;Huawei&gt;sys #R4Enter system view, return user view with Ctrl+Z.[Huawei]int Eth0/0/0[Huawei-Ethernet0/0/0]ip address 10.1.5.2 30[Huawei-Ethernet0/0/0]Jul 25 2019 18:33:47-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP on the interface Ethernet0/0/0 has entered the UP state.Jul 25 2019 18:33:55-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 1, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/0]q[Huawei]int Eth0/0/1[Huawei-Ethernet0/0/1]ip address 192.168.2.2 24[Huawei-Ethernet0/0/1]Jul 25 2019 18:34:13-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP on the interface Ethernet0/0/1 has entered the UP state.Jul 25 2019 18:34:15-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 2, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/1]q[Huawei] 接下来，需要在各个路由器上添加路由表信息，配置任务只需要我们“打通”PC1和PC2之间的数据通信，那么这里的会我偷个懒，用至少的配置步骤添加路由，过程如下：1234567891011&lt;Huawei&gt;sys #R1Enter system view, return user view with Ctrl+Z.[Huawei]ip route-static 192.168.2.1 24 10.1.2.2 #添加两条静态路由 负载分担Info: The destination address and mask of the configured static route mismatched, and the static route 192.168.2.0/24 was generated.Jul 25 2019 18:41:35-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 4, the change loop count is 0, and the maximum number of records is 4095.[Huawei]ip route-static 192.168.2.1 24 10.1.1.2 #添加两条静态路由 负载分担Info: The destination address and mask of the configured static route mismatched, and the static route 192.168.2.0/24 was generated.Jul 25 2019 18:42:25-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 5, the change loop count is 0, and the maximum number of records is 4095.[Huawei] 12345678910111213141516171819&lt;Huawei&gt;sys #R2Enter system view, return user view with Ctrl+Z.[Huawei]ip route-static 192.168.2.1 24 10.1.3.2 preference 100 #添加主/备静态路由 备Info: The destination address and mask of the configured static route mismatched, and the static route 192.168.2.0/24 was generated.Jul 25 2019 18:47:26-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 5, the change loop count is 0, and the maximum number of records is 4095.[Huawei]ip route-static 192.168.2.1 24 10.1.4.2 preference 60 #添加主/备静态路由 主Info: The destination address and mask of the configured static route mismatched, and the static route 192.168.2.0/24 was generated.Jul 25 2019 18:51:26-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 6, the change loop count is 0, and the maximum number of records is 4095.[Huawei]ip route-static 192.168.1.1 24 10.1.1.1 #添加两条静态路由 负载分担Info: The destination address and mask of the configured static route mismatched, and the static route 192.168.1.0/24 was generated.Jul 25 2019 18:53:16-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 7, the change loop count is 0, and the maximum number of records is 4095.[Huawei]ip route-static 192.168.1.1 24 10.1.2.1 #添加两条静态路由 负载分担Info: The destination address and mask of the configured static route mismatched, and the static route 192.168.1.0/24 was generated.Jul 25 2019 18:53:36-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 8, the change loop count is 0, and the maximum number of records is 4095.[Huawei] 123456789101112131415&lt;Huawei&gt;sys #R3Enter system view, return user view with Ctrl+Z.[Huawei]ip route-static 192.168.2.1 24 10.1.5.2 #添加一条静态路由Info: The destination address and mask of the configured static route mismatched, and the static route 192.168.2.0/24 was generated.Jul 25 2019 18:57:46-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 4, the change loop count is 0, and the maximum number of records is 4095.[Huawei]ip route-static 192.168.1.1 24 10.1.3.1 preference 100 #添加主/备静态路由 备Info: The destination address and mask of the configured static route mismatched, and the static route 192.168.1.0/24 was generated.Jul 25 2019 18:58:26-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 5, the change loop count is 0, and the maximum number of records is 4095.[Huawei]ip route-static 192.168.1.1 24 10.1.4.1 preference 60 #添加主/备静态路由 主Info: The destination address and mask of the configured static route mismatched, and the static route 192.168.1.0/24 was generated.Jul 25 2019 18:58:56-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 6, the change loop count is 0, and the maximum number of records is 4095.[Huawei] 12345678&lt;Huawei&gt;sys #R4Enter system view, return user view with Ctrl+Z.[Huawei]ip route-static 192.168.1.1 24 10.1.5.1 #添加一条静态路由Info: The destination address and mask of the configured static route mismatched, and the static route 192.168.1.0/24 was generated.[Huawei]Jul 25 2019 19:01:36-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 3, the change loop count is 0, and the maximum number of records is 4095.[Huawei] 经过上面的路由配置，我们的主机PC1和PC2应当可以就互相通信了！ 结果验证 ping验证（PC1 上 ping PC2） 1234567891011121314PC&gt;ping 192.168.2.1Ping 192.168.2.1: 32 data bytes, Press Ctrl_C to breakFrom 192.168.2.1: bytes=32 seq=1 ttl=124 time=219 msFrom 192.168.2.1: bytes=32 seq=2 ttl=124 time=156 msFrom 192.168.2.1: bytes=32 seq=3 ttl=124 time=187 msFrom 192.168.2.1: bytes=32 seq=4 ttl=124 time=187 msFrom 192.168.2.1: bytes=32 seq=5 ttl=124 time=187 ms--- 192.168.2.1 ping statistics --- 5 packet(s) transmitted 5 packet(s) received 0.00% packet loss round-trip min/avg/max = 156/187/219 ms tracert验证很显然，这同我们所期望的路由转发路径是一致的！主要看R2-R3这一段转发，我们配置了主备路由备份，转发路径必须沿着R2的GE0/0/1（10.1.4.1/30） -&gt; R3的Eth0/0/1（10.1.4.2/30） 转发！ 123456789PC&gt;tracert 192.168.2.1traceroute to 192.168.2.1, 8 hops max(ICMP), press Ctrl+C to stop 1 192.168.1.2 15 ms 31 ms 32 ms 2 10.1.2.2 93 ms 79 ms 62 ms 3 10.1.4.2 94 ms 94 ms 125 ms 4 10.1.5.2 140 ms 125 ms 125 ms 5 *192.168.2.1 156 ms 188 ms 查看路由表情况 1234567891011121314151617181920212223242526[Huawei]display ip routing-tableRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public Destinations : 12 Routes : 13Destination/Mask Proto Pre Cost Flags NextHop Interface 10.1.1.0/30 Direct 0 0 D 10.1.1.2 Ethernet0/0/0 10.1.1.2/32 Direct 0 0 D 127.0.0.1 Ethernet0/0/0 10.1.2.0/30 Direct 0 0 D 10.1.2.2 Ethernet0/0/1 10.1.2.2/32 Direct 0 0 D 127.0.0.1 Ethernet0/0/1 10.1.3.0/30 Direct 0 0 D 10.1.3.1 GigabitEthernet0/0/0 10.1.3.1/32 Direct 0 0 D 127.0.0.1 GigabitEthernet0/0/0 10.1.4.0/30 Direct 0 0 D 10.1.4.1 GigabitEthernet0/0/1 10.1.4.1/32 Direct 0 0 D 127.0.0.1 GigabitEthernet0/0/1 127.0.0.0/8 Direct 0 0 D 127.0.0.1 InLoopBack0 127.0.0.1/32 Direct 0 0 D 127.0.0.1 InLoopBack0 192.168.1.0/24 Static 60 0 RD 10.1.1.1 Ethernet0/0/0 Static 60 0 RD 10.1.2.1 Ethernet0/0/1 192.168.2.0/24 Static 60 0 RD 10.1.4.2 GigabitEthernet0/0/1 这里其实有一个问题，我们在路由器R2上给目的地址192.168.1.1/24即主机PC1定义了两条静态路由负载分担，这在上面的路由表中有体现出来，没什么问题。但同时我们也有在给目的地址192.168.2.1/24即主机PC2定义了两条主/备静态路由（优先级不同），不过在路由表中没有这样的两条记录。 其实，这很好理解，对于这种主/备路由备份模式，由于我们给“主用路由表项”定义的优先级始终最高，所以它应当是处于Active状态的，根本轮不到那条“备用路由表项”，因此它的状态应当是Inactive的！ 那么，既然display ip routing-table这条命令无法查看到那条Inactive状态的路由表项，我们就得另想办法，这里介绍这样几条指令——display ip routing-table protocol static，display ip routing-table verbose以及display current-configuration! display ip routing-table protocol static这条指令表示查看协议类型为static的所有路由表项（包括Inactive状态的），类似的，查看协议类型为ospf的所有路由表项，就是用display ip routing-table protocol ospf。 display ip routing-table verbose这条指令可以查看路由表的详细信息（也就是包括所有路由表项）。 display current-configuration显示当前配置信息。 参考文献 《计算机网络》谢希仁. pdf版 多区域OSPF动态路由协议的配置 某些数通基本知识梳理","tags":[{"name":"负载分担","slug":"负载分担","permalink":"https://zhouie.cn/tags/负载分担/"},{"name":"主备路由备份","slug":"主备路由备份","permalink":"https://zhouie.cn/tags/主备路由备份/"},{"name":"静态路由","slug":"静态路由","permalink":"https://zhouie.cn/tags/静态路由/"}]},{"title":"【数通】 VRRP虚拟路由冗余协议的配置","date":"2019-07-25T01:15:15.000Z","path":"posts/201907251/","text":"VRRP协议简述VRRP（虚拟路由冗余协议）：通过把几台路由设备联合组成一台虚拟路由设备，将虚拟路由设备的IP地址作为用户的默认网关地址实现与外部的通讯。当网关设备发生故障时，VRRP协议能够快速选举新的网关设备承担数据流量，保障网络的可靠通信。 Master路由器的选举：首先比较每台路由器的优先级，优先级大的成为Master路由器，优先级相同的话，就比较接口IP地址，IP地址大的成为Master路由器。Master路由器会周期性的发送Advertisement报文（组播），如果Backup路由器在规定的间隔时间内没收到Master路由器发来的Advertisement报文，则认为Master路由器“挂掉”了，那么就会进行新一轮的选举。 VRRP的三种状态：Initialize、Master和Backup VRRP有三种状态：Initialize , Master, Backup Initialize 状态：系统刚启动VRRP的状态；在此状态，不处理VRRP报文。 Master状态：当路由器处于Master状态时，路由器会处理： 1、每隔1s发送VRRP组播报文，来报告自己的状态。 2、响应对虚拟IP地址的ARP请求，并且响应的是虚拟MAC地址，而不是接口的真实MAC地址。 3、转发目的MAC是虚拟MAC的IP报文。 4、如果是虚拟IP拥有者，接受目的IP地址是虚拟IP地址的报文，否则丢弃。 5、当接受到优先级大的VRRP报文时，变成backup；接口shutdown后，变为initialize状态。 Backup状态：当路由器处于backup状态时，路由器将： 1、监听Master发送的VRRP报文，如果在3个周期内不能接受到，变为master，并发送免费ARP（为什么）。 2、不响应对虚拟IP地址的ARP请求。 3、丢弃目的MAC为虚拟MAC的IP报文。 4、丢弃目的IP为虚拟IP地址的报文。 拓扑图（含IP规划） 配置任务按照拓扑图要求配置IP地址，配置VRRP虚拟路由冗余协议（将R1的eth0/0/0、R2的eth0/0/0加入到vrrid 1中并设置好优先级选择R1作为主用路由器、将R1的eth0/0/1、R2的eth0/0/1加入到vrrid 2中并设置好优先级选择R2作为主用路由器），并最终实现PC1和PC3的互相通信，且PC1-&gt;PC3所使用的网关设备是R1，PC3-&gt;PC1所使用的网关设备是R2。 配置工具华为网络设备仿真平台eNSP VRRP虚拟路由冗余协议的配置 配置步骤（含完整指令）首先，配置主机PC1、PC2、PC3的IP信息很简单（注意，我们这里准备配置VRRP协议，所以这个网关地址就填那个“虚拟”的IP地址），比如PC1就这样： 配置主机PC1 然后，需要配置的是R1、R2的各个端口所分配的IP地址，以R1为例，需要配置的有Eth0/0/0（192.168.1.2/24）、Eth0/0/1（192.168.2.2/24）端口。 12345678910111213&lt;Huawei&gt;sys #R1Enter system view, return user view with Ctrl+Z.[Huawei]int eth0/0/1[Huawei-Ethernet0/0/1]ip address 192.168.2.2 24[Huawei-Ethernet0/0/1]Jul 26 2019 15:47:40-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP on the interface Ethernet0/0/1 has entered the UP state.Jul 26 2019 15:47:42-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 1, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/1]int eth0/0/0[Huawei-Ethernet0/0/0]ip address 192.168.1.2 24[Huawei-Ethernet0/0/0]Jul 26 2019 15:50:59-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP on the interface Ethernet0/0/0 has entered the UP state.Jul 26 2019 15:51:02-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 2, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/0] 12345678910111213&lt;Huawei&gt;sys #R2Enter system view, return user view with Ctrl+Z.[Huawei]int eth0/0/0[Huawei-Ethernet0/0/0]ip address 192.168.1.3 24[Huawei-Ethernet0/0/0]Jul 26 2019 15:51:50-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP on the interface Ethernet0/0/0 has entered the UP state.Jul 26 2019 15:51:52-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 1, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/0]int eth0/0/1[Huawei-Ethernet0/0/1]ip address 192.168.2.3 24[Huawei-Ethernet0/0/1]Jul 26 2019 15:52:05-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP on the interface Ethernet0/0/1 has entered the UP state.Jul 26 2019 15:52:12-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 2, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/1] 再然后，就具体在路由器上配置vrrp协议： 123456789101112131415161718192021222324[Huawei]int eth0/0/0 #R1[Huawei-Ethernet0/0/0]vrrp vrid 1 virtual-ip 192.168.1.254[Huawei-Ethernet0/0/0]Jul 26 2019 16:19:10-08:00 Huawei %%01VRRP/4/STATEWARNINGEXTEND(l)[4]:Virtual Router state BACKUP changed to MASTER, because of protocol timer expired. (Interface=Ethernet0/0/0, VrId=1, InetType=IPv4)Jul 26 2019 16:19:13-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 10, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/0]vrrp vrid 1 priority 120 #设置优先级（默认优先级为100，所以120这个就会在选举中成为主用路由）[Huawei-Ethernet0/0/0]Jul 26 2019 16:19:33-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 11, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/0]vrrp vrid 1 preempt-mode ? disable Cancel current configuration timer Specify timer[Huawei-Ethernet0/0/0]vrrp vrid 1 preempt-mode timer delay 20 #设置抢占等待时间[Huawei-Ethernet0/0/0]Jul 26 2019 16:20:23-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 12, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/0]vrrp vrid 1 track interface eth0/0/1 reduced 30 # 监控上层端口状态调整优先级[Huawei-Ethernet0/0/0]Jul 26 2019 16:20:53-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 13, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/0]int eth0/0/1[Huawei-Ethernet0/0/1]vrrp vrid 2 virtual-ip 192.168.2.254[Huawei-Ethernet0/0/1]Jul 26 2019 16:24:13-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 14, the change loop count is 0, and the maximum number of records is 4095.Jul 26 2019 16:24:15-08:00 Huawei %%01VRRP/4/STATEWARNINGEXTEND(l)[5]:Virtual Router state BACKUP changed to MASTER, because of protocol timer expired. (Interface=Ethernet0/0/1, VrId=2, InetType=IPv4)[Huawei-Ethernet0/0/1] 针对这条指令vrrp vrid 1 preempt-mode timer delay 20 #设置抢占等待时间 举个例子，R1的Eth0/0/0地址192.168.1.2/24 和 R2的Eth0/0/0地址192.168.1.3/24作为下层PC1的待选择网关，根据我们上面的拓扑图设置，R1的Eth0/0/0地址192.168.1.2/24会被选举为Master状态，也就是说下层PC1、PC2的网关地址会是192.168.1.2/24。假设我们的R1因为故障宕机了，那么下层的PC1、PC2的网关地址岂不是会出错？当然了，VRRP自然不会容忍这种情况，即VRRP机制会让处于Master状态的R1不断地向所有处于Backup状态的R2间隔性发生VRRP组播报文，这样在R1宕机或是出现其他故障问题后，R2就会发现在一段时间内它都无法收到R1的VRRP组播报文，这样它就会认为R1已经“离开”了，然后发起新一轮的“选举”。那么，这里的抢占等待时间，也就是说，R1在20s内没有发送VRRP组播报文（即R2在20s内没有收到VRRP组播报文），才会发起新的“选举”。（默认这个延迟等待时间是0s）试想一下，我们这里为什么不推荐直接采用默认配置（0s）呢？ 再来谈谈这条指令vrrp vrid 1 track interface eth0/0/1 reduced 30 # 监控上层端口状态调整优先级! 分析这种情况 上面图中很明显地，标明VRRP协议所“选举”出来的Master状态的R1的上层链路出现故障，这时候，R1的Eth0/0/0端口的IP地址就不能再担当下层PC1、PC2的网关IP地址了，这在本拓扑图中很明显吧。VRRP协议有这样的规定——我可以监控R1的所有（或特定的某个）上层端口（可以理解为“非网关”端口），每当我探查到其中一个出现链路故障，我就给这个参与“选举”的R1降低优先级。试想一下，我们为什么不对出现上层链路不通的路由器直接做“剥夺选举资格”的操作？ 12345678910111213141516171819[Huawei]int eth0/0/0 #R2[Huawei-Ethernet0/0/0]vrrp vrid 1 virtual-ip 192.168.1.254[Huawei-Ethernet0/0/0]Jul 26 2019 16:27:53-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 3, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/0]int eth0/0/1[Huawei-Ethernet0/0/1]vrrp vrid 2 virtual-ip 192.168.2.254[Huawei-Ethernet0/0/1]Jul 26 2019 16:28:33-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 4, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/1]vrrp vrid 2 priority 120[Huawei-Ethernet0/0/1]Jul 26 2019 16:28:45-08:00 Huawei %%01VRRP/4/STATEWARNINGEXTEND(l)[0]:Virtual Router state BACKUP changed to MASTER, because of priority calculation. (Interface=Ethernet0/0/1, VrId=2, InetType=IPv4)Jul 26 2019 16:28:53-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 5, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/1]vrrp vrid 2 preempt-mode timer delay 20[Huawei-Ethernet0/0/1]Jul 26 2019 16:29:13-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 6, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/1]vrrp vrid 2 track interface eth0/0/0 reduced 30[Huawei-Ethernet0/0/1]Jul 26 2019 16:29:43-08:00 Huawei DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25.191.3.1 configurations have been changed. The current change number is 7, the change loop count is 0, and the maximum number of records is 4095.[Huawei-Ethernet0/0/1] 结果验证 ping验证（PC1上ping PC3） 1234567891011121314PC&gt;ping 192.168.2.1Ping 192.168.2.1: 32 data bytes, Press Ctrl_C to breakFrom 192.168.2.1: bytes=32 seq=1 ttl=127 time=187 msFrom 192.168.2.1: bytes=32 seq=2 ttl=127 time=78 msFrom 192.168.2.1: bytes=32 seq=3 ttl=127 time=94 msFrom 192.168.2.1: bytes=32 seq=4 ttl=127 time=78 msFrom 192.168.2.1: bytes=32 seq=5 ttl=127 time=94 ms--- 192.168.2.1 ping statistics --- 5 packet(s) transmitted 5 packet(s) received 0.00% packet loss round-trip min/avg/max = 78/106/187 ms tracert验证 123456789PC&gt;tracert 192.168.2.1 #PC1-&gt;PC3的路由追踪-YI7';]=`traceroute to 192.168.2.1, 8 hops max(ICMP), press Ctrl+C to stop 1 192.168.1.2 78 ms 47 ms 46 ms 2 192.168.2.1 94 ms 78 ms 94 ms 123456PC&gt;tracert 192.168.1.4 #PC3-&gt;PC1的路由追踪traceroute to 192.168.1.4, 8 hops max(ICMP), press Ctrl+C to stop 1 192.168.2.3 78 ms 47 ms 47 ms 2 192.168.1.4 78 ms 94 ms 93 ms VRRP与BFD当R1或R1到R2间链路出现故障时，VRRP报文“重新选举”需要一定的协商周期。为了实现链路故障时快速切换，在链路中部署了BFD链路检测机制，实现当主用接口或者链路出现故障时，Backup状态设备迅速切换为Master状态，承担网络流量，以减少故障对业务传输的影响。 BFD：(Bidirectional Forwarding Detection，双向转发检测)协议提供一种轻负载、快速检测两台邻接路由器/交换机之间转发路径连通状态的方法，它是一个简单的“Hello”协议，在很多方面，它与那些著名的路由协议的邻居检测部分相似。之所以被称为双向，是因为BFD协议通过三次握手机制，能提供链路来回两个方向的连通性检测。 参考文献 《计算机网络》谢希仁. pdf版 简述BFD原理与配置 VRRP与BFD联动 华为VRRP综合配置 华为BFD可靠性配置 某些数通基本知识梳理","tags":[{"name":"VRRP","slug":"VRRP","permalink":"https://zhouie.cn/tags/VRRP/"},{"name":"BFD","slug":"BFD","permalink":"https://zhouie.cn/tags/BFD/"}]},{"title":"【数通】 IP编址分类和子网划分","date":"2019-07-22T10:25:35.000Z","path":"posts/201907221/","text":"IP地址IP地址唯一标示一台网络设备 IP地址：192.168.1.11-&gt; 经二进制转化：1 1 0 0 0 0 0 0 . 1 0 1 0 1 0 0 0.0 0 0 0 0 0 0 1.0 0 0 0 1 0 1 1 IP地址组成 网络部分（后来会从主机部分划出几位子网部分，也算网络部分）IP地址的网络部分称为网络地址，网络地址用于唯一地标识一个网段，或者若干网段的聚合，同一网段中的网络设备有同样的网络地址。 主机部分IP地址的主机部分称为主机地址，主机地址用于唯一的标识同一网段内的网络设备。 IP地址分类常见的IP地址分为IPv4与IPv6两大类，我们这里只讨论32位的IPv4地址。 为了和已存在的IP地址空间及IP数据报兼容，对IP地址的定义在1981年的RFC 791进行了修改。修改后的IP地址共有三种网络地址长度不同的单播地址（即A、B、C类地址）。如下所示： 把IP地址分为A、B、C、D、E五类 每个类别所用的地址范围 注意一点：我们这里计算可用的主机地址时，总是2^N - 2，其中，N是主机地址的位数，减2是因为第一个（即主机地址全0）和最后一个地址（即主机地址全1）都是无效的。因此，对于用8位来表示主机地址的C类地址来说，最多可用的主机数就是2^N - 2 = 254。（后面也有详讲） 其中，D类地址通常作为组播地址。E类地址保留用于科学研究。我们经常用到的是A、B、C三类地址。 私有IP地址私有IP地址可以理解为本地局域网上的IP，私有IP地址范围： A: 10.0.0.0~10.255.255.255 即10.0.0.0/8 B: 172.16.0.0~172.31.255.255即172.16.0.0/12 C: 192.168.0.0~192.168.255.255 即192.168.0.0/16 这些地址是不会被Internet分配的，它们在Internet上也不会被路由，虽然它们不能直接和Internet网连接，但通过NAT（Network Address Translation，网络地址转换）技术手段把私有IP地址转换为Internet可识别的公有IP地址，仍旧可以和 Internet通讯。 注意：现在进行IP地址规划时，我们通常在公司内部网络使用私有IP地址。比如，有些不需要与 Internet通讯的设备，如打印机、可管理集线器等可以使用这些地址，以节省IP地址资源。 特殊IP地址IP地址用于唯一的标识一台网络设备，但并不是每一个IP地址都是可用的，一些特殊的IP地址被用于各种各样的其他用途，不能用于标识网络设备。 特殊IP地址 主机部分全为“0”对于主机部分全为“0”的IP地址，称为网络地址，网络地址用来标识一个网段。例如，A类地址1.0.0.0，私有地址10.0.0.0, 192.168.1.0等。 主机部分全为“1”对于主机部分全为“1”的IP地址，称为网段广播地址，广播地址用于标识一个网络的所有主机。例如，10.255.255.255, 192.168.1.255等，路由器可以在10.0.0.0或者192.168.1.0等网段转发广播包。广播地址用于向本网段的所有节点发送数据包。 网络部分为127对于网络部分为127的IP地址，例如127.0.0.1往往用于环回测试目的（环回测试是决定设备是否正常运行或是确定网络中失效节点的方式）。 全“0”的IP地址全“0”的IP地址0.0.0.0代表所有的主机，华为Quidway系列路由器用0.0.0.0地址指定默认路由。 全“1”的IP地址全“1”的IP地址255.255.255.255，也是广播地址（为受限广播地址”limited broadcast” destination address），但255.255.255.255代表所有主机，用来将一个分组以广播方式发送给本网络中的所有主机，路由器则阻挡该分组通过，将其广播功能限制在本网内部。 从上面可以看出，每一个网段都会有一些IP地址不能用作主机IP地址。 【例1】B类网段172.16.0.0, 有16个主机位,因此有2^16 个IP地址，去掉一个网络地址172.16.0.0，一个广播地址172.16.255.255不能用作标识主机，那么共有2^16 -2个可用地址。 【例2】C类网段192.168.1.0，有8个主机位，共有2^8=256个IP地址，去掉一个网络地址192.168.1.0，一个广播地址192.168.1.255，共有254个可用主机地址。 现在，我们可以这样计算每一个网段可用主机地址：假定这个网段的主机部分位数为n，那么可用的主机地址个数为2^n-2个。 ###子网掩码SM 使用目的网络设备使用子网掩码（subnet masking）决定IP地址中哪部分为网络部分，哪部分为主机部分。 子网掩码的好处就是：不管网络有没有划分子网，只要把子网掩码和IP地址进行逐位的“与”运算（AND）即得出网络地址来。这样在路由器处理到来的分组时就可以采用同样的方法。 子网掩码使用与IP地址一样的格式。子网掩码的网络部分和子网部分全都是1，主机部分全都是0。缺省状态下，如果没有进行子网划分： A类网络的子网掩码为255.0.0.0 B类网络的子网掩码为255.255.0.0 C类网络子网掩码为255.255.255.0 变长子网掩码VLSM引入子网划分的概念（子网的划分就是一个将主机部分的若干位分配到网络部分的过程）后，IPv4地址被分为三部分：网络部分（network）、子网部分（subnetwork，现在常被认为是网络部分的一部分——尽管它本来是“rest”部分的一部分）和主机（host）部分。 注意：这里提到的“rest”部分就是指在没有引入子网划分时，自然状态下A、B、C、D、E类地址中的主机部分，这很好理解，毕竟子网划分来自于主机部分。 例如，对于一个给定的A类网络：10.0.0.0，子网掩码：255.255.0.0可以将其划分为256个子网（从10.0.0.0到10.255.0.0）——第一个八位位组表示网络地址，第二个表示子网号，而最后两个表示主机部分。 无类别域间路由CIDR无类别域间路由是 基于可变长子网掩码（VLSM）来进行任意长度的前缀的分配的，CIDR包括： 指定任意长度的前缀的可变长子网掩码技术。遵从CIDR规则的地址有一个后缀说明前缀的位数，例如：192.168.0.0/16。这使得对日益缺乏的IPv4地址的使用更加有效。 将多个连续的前缀聚合成超网，以及在互联网中，只要有可能，就显示为一个聚合的网络，因此在总体上可以减少路由表的表项数目。聚合使得互联网的路由表不用分为多级，并通过VLSM逆转“划分子网”的过程。 根据机构的实际需要和短期预期需要而不是分类网络中所限定的过大或过小的地址块来管理IP地址的分配的过程。 无类别域间路由表示法无类别域间路由（Classless Inter-Domain Routing）表示方法给出的是一个地址加上一个斜杠以及网络掩码的二进制表示法中“1”的位数（即网络号中和网络掩码相关的是哪些位）。 例如，192.168 .1 .7/28表示的是一个前28位被用作网络号的IP地址（和255.255.255.240所表示子网掩码的意思一样），具体来看： IP地址：192.168 .1 .7（11000000 10101000 00000001 00000111） 子网掩码：255.255.255 .240（11111111 11111111 11111111 11110000） 其中，子网掩码比特数：8 + 8 + 8+ 4 = 28，这个指的是子网掩码中连续1的个数。因此，便有子网掩码的一种表示方法：192.168.1.7/28！ 前缀路由聚合 无类别域间路由（CIDR） CIDR的另一个好处就是可以进行前缀路由聚合。如上图所示，一个ISP被分配了一些C类网络，198.168.0.0~198.168.255.0。这个ISP准备把这些C类网络分配给各个用户群，目前已经分配了三个C类网段给用户。如果没有实施CIDR技术，ISP的路由器的路由表中会有三条下连网段的路由条目，并且会把它通告给Internet上的路由器。 通过实施CIDR技术，我们可以在ISP的路由器上把这三条网段198.168.1.0，198.168.2.0，198.168.3.0汇聚成一条路由198.168.0.0/16。这样ISP路由器只向Internet通告198.168.0.0/16这一条路由，大大减少了路由表的数目。这有效地减少了要对外显示的网络数，防止了路由表爆炸，也遏制了互联网进一步扩大。 注意，使用CIDR技术汇聚的网络地址的比特位必须是一致的，如上例所示。如果上图所示的ISP连接了一个172.178.1.0网段，这些网段路由将无法汇聚，无法实现CIDR技术。 了解IPv6过去通常把A类地址保留给政府机构，B类地址分配给中等规模的公司，C类地址分配给小单位。然而，随着互联网络飞速发展，再加上IP地址的浪费，IP地址已经非常紧张。 因此，相应的科研组织已研究出128位的IPv6，其IP地址数量最高可达3.402823669 × 10^38个，届时每个人家居中的每件电器，每件对象，甚至地球上每一粒沙子都可以拥有自己的IP地址。 IPv6地址为128位长，但通常写作8组，每组四个十六进制数的形式。例如：2001:0db8:85a3:08d3:1319:8a2e:0370:7344是一个合法的IPv6地址。 如果四个数字都是0，可以被省略。例如：2001:0db8:85a3:0000:1319:8a2e:0370:7344等价于2001:0db8:85a3::1319:8a2e:0370:7344。 参考文献 《计算机网络》谢希仁. pdf版","tags":[{"name":"IP编址","slug":"IP编址","permalink":"https://zhouie.cn/tags/IP编址/"},{"name":"CIDR","slug":"CIDR","permalink":"https://zhouie.cn/tags/CIDR/"},{"name":"VLSM","slug":"VLSM","permalink":"https://zhouie.cn/tags/VLSM/"}]},{"title":"【数通】 某些基本知识梳理","date":"2019-07-21T08:45:30.000Z","path":"posts/201907211/","text":"路由环路路由环路，就是数据包不断在这个网络传输，始终到达不了目的地，导致掉线或者网络瘫痪。 这里引用百度百科中的一个示例来理解路由环路产生的原因。 如图所示，在网络11.4.0.0发生故障之前，所有的路由器都具有正确一致的路由表，网络是收敛的。 图源百度百科 在本例中，路径开销用跳数来计算，所以，每条链路的开销是1。路由器C与网络11.4.0.0直连，跳数为0。路由器B经过路由器C 到达网络11.4.0.0，跳数为1。路由器A 经过路由器B到达网络11.4.0.0，跳数为2。如果网络11.4.0.0 故障，就可能会在路由器之间产生路由环路，下面是产生路由环路的步骤： 当网络11.4.0.0 发生故障，路由器C 最先收到故障信息，路由器C 把网络11.4.0.0 设为不可达，并等待更新周期到来通告这一路由变化给相邻路由器。如果，路由器B的路由更新周期在路由器C之前到来，那么路由器C就会从路由器B那里学习到去往11.4.0.0的新路由（实际上，这一路由已经是错误路由了）。这样路由器C的路由表中就记录了一条错误路由（经过路由器B，可去往网络11.4.0.0，跳数增加到2 ）。 路由器C 学习了一条错误信息后，它会把这样的路由信息再次通告给路由器B，根据通告原则，路由器B也会更新这样一条错误路由信息，认为可以通过路由器C去往网络11.4.0.0，跳数增加到 3 。 这样，路由器 B 认为 可以通过路由器C 去往网络11.4.0.0，路由器C 认为 可以通过路由器B 去往网络11.4.0.0，就形成了环路。（以上示例摘自百度百科） 概括来讲，解决路由环路问题的方法主要分为六种： 定义最大值； 水平分割技术； 路由中毒； 反向路由中毒； 控制更新时间； 触发更新 参考阅读： 如何避免多路径网络中的路由环路? 解决路由环路问题的六种方法 直通网线和交叉网线在学校的网络实验中也有自己动手制作直通网线，这里也算是回顾一下： 当时制作过程中的几个步骤 直通线是指一根双绞线的两端水晶头（最常见的就是RJ45水晶头）压线的标准一致，这样做出来的线叫直通线。也就是一根网线的一头是用T568A标准压的，那另一头也用T568A标准来压，或者两头都用T568B标准来做，这叫直通线。交叉线就是一根双绞线的两端水晶头压线的标准不同，一头用T568A标准做，一头用T568B标准来做，那这根线就叫交叉线。（即两个水晶头的连线交叉连接，A水晶头的1，2对应B水晶头的3，6;而A水晶头的3，6对应B水晶头的1，2。） 上面提到了两种水晶头压线的国际标准——T568A标准、T568B标准（其中，T568B为平常所使用的线序）！ T568A：从左到右依次为1-绿白、2-绿、3-橙白、4-蓝、5-蓝白、6-橙、7-棕白、8-棕。 T568B：从左到右依次为1-橙白、2-橙、3-绿白、4-蓝、5-蓝白、6-绿、7-棕白、8-棕。 既然直通线与交叉线的两端水晶头压线不同，那么用途自然也有区别： 直通线主要用于交换机（或者集线器Hub）UPLINK口来连接另一台交换机（或者集线器Hub）的普通端口，或者交换机普通端口连接计算机(终端)网卡。 交叉线主要用于交换机（或者集线器Hub）普通端口连接到交换机（或者集线器Hub）普通端口，或者计算机(终端)网卡连接计算机(终端)网卡。 某些网络测试工具pingping 程序通常用来检测网络的连通性和延时 命令格式： ping IP地址或主机名 [-t] [-a] [-n count] [-l size] 参数含义： -t不停地向目标主机发送数据； -a 以IP地址格式来显示目标主机的网络地址 ； -n count 指定要ping 多少次，具体次数由count来指定 ； -l size 指定发送到目标主机的数据包的大小。 ping示例 tracert tracert用来跟踪报文到达目的地所经过的路由器，也是常见的网络诊断工具之一（基于ICMP协议），UNIX下与之对应的是traceroute（基于UDP协议）。 通常的网络诊断顺序是首先使用ping程序来检测网络的连通性，如果不通，则使用Trace程序来跟踪报文在那台路由器上丢失，然后再进行下一步的处理。 处理机制: tracert通过发送端口大于30000的UDP报文达到目的地，目的地的应用程序不能识别该端口，会返回ICMP的错误消息“port unreachable”给源；tracert同时使用IP header的TTL值，通过设置TTL值从1到最大值逐渐增加，UDP报文每经过一台设备，TTL值加一，并返回ICMP的消息，同时在返回的ICMP消息中记录设备接口地址，并打印处理。 tracert在每个TTL都发送三个UDP /ICMP报文，并记录每个报文返回的ICMP的时间值，如果在5秒内不能收到返回的ICMP报文，该时间值记录为“*”号。 tracert示例 参考文献 《计算机网络》谢希仁. pdf版","tags":[{"name":"路由环路","slug":"路由环路","permalink":"https://zhouie.cn/tags/路由环路/"},{"name":"直通网线和交叉网线","slug":"直通网线和交叉网线","permalink":"https://zhouie.cn/tags/直通网线和交叉网线/"},{"name":"网络测试工具","slug":"网络测试工具","permalink":"https://zhouie.cn/tags/网络测试工具/"}]},{"title":"【数通】 OSI七层（或TCPIP五层）网络模型","date":"2019-07-20T10:13:29.000Z","path":"posts/201907201/","text":"OSI模型OSI模型，即开放式系统互联通信参考模型（Open System Interconnection Reference Model），是一种由国际标准化组织提出的概念模型，一个试图使各种计算机在世界范围内互连为网络的标准框架。 注意：OSI参考模型并没有提供一个可以实现的方法，而是描述了一些概念，用来协调进程间通信标准的制定。它定义了开放系统的层次结构、层次之间的相互关系以及各层所包括的可能的任务，作为一个框架来协调和组织各层所提供的服务。即OSI参考模型并不是一个标准，而是一个在制定标准时所使用的概念性框架。（摘自维基百科） 这里大概了解一下OSI各层的功能与协议： 图源网络 应用层网络服务与最终用户的一个接口。协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP 表示层数据的表示、安全、压缩。（在五层模型里面已经合并到了应用层）格式有，JPEG、ASCll、DECOIC、加密格式等 会话层建立、管理、终止会话。（在五层模型里面已经合并到了应用层）对应主机进程，指本地主机与远程主机正在进行的会话 传输层定义传输数据的协议端口号，以及流控和差错校验。协议有：TCP UDP，数据包一旦离开网卡即进入网络传输层 网络层进行逻辑地址寻址，实现不同网络之间的路径选择。协议有：ICMP IGMP IP（IPV4 IPV6） ARP RARP 数据链路层建立逻辑连接、进行硬件地址寻址、差错校验等功能。（由底层网络定义协议）将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。 物理层建立、维护、断开物理连接。（由底层网络定义协议）常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的传输介质。 TCP/IP五层网络模型通常人们认为OSI模型的最上面三层（应用层、表示层和会话层）在TCP/IP组中是一个应用层。TCP/IP五层协议和OSI的七层协议对比关系如下： 图源网络 图源网络 提醒一下，可能大家有时候会发现有这样的说法——TCP/IP协议簇分为四层。我也查阅了国内外一些文献上的叫法求证，用我个人的话来理解，之所以说TCP/IP协议簇将网络分为四层，依次是应用层、传输层、网际层、网络接口层，这是基于这样的原则来考虑的——“不关注底层物理介质，主要关注终端之间的逻辑数据流转发”。换一种简单的理解，我们可以直接将将四层模型中的网络接口层理解为“TCP/IP五层模型中的数据链路层和物理层”。 参考文献 《计算机网络》谢希仁. pdf版 OSI七层模型与TCP/IP五层模型","tags":[{"name":"OSI七层","slug":"OSI七层","permalink":"https://zhouie.cn/tags/OSI七层/"},{"name":"TCP/IP五层","slug":"TCP-IP五层","permalink":"https://zhouie.cn/tags/TCP-IP五层/"}]},{"title":"【Oracle数据库】 Oracle Linux上部署Oracle 11g服务并实现SSH远程登录管理","date":"2019-03-24T00:03:09.000Z","path":"posts/201903241/","text":"写在前面贴上与这次安装相关文件、安装包的链接： 实体机（客户端）链接：https://pan.baidu.com/s/13lpEv04jb1AL41yFRkU6kQ提取码：dqa0 虚拟机（服务器端）链接：https://pan.baidu.com/s/1AYuwHc2ECMawgc8sEf-H7Q提取码：jel2 如遇链接失效，Mail To nanzhouieATqq.com! 实验内容 安装 virtualbox 虚拟机（我更喜欢的是VMware）； 在虚拟机上安装Oracle Linux； 在Oracle Linux上安装Oracle 11g； 配置虚拟机的网络，数据库服务器的监听，TNS，使得可以远程访问数据库服务器。 采用远程登录方式，使用ssh登录数据库服务器，进行数据库实例管理。 采用远程访问方式，使用 i*sqlplus或者第三方管理软件登录服务器，进行数据库实例管理。 建立HR的模式（建议使用官方脚本）。 实验前期准备软件目录 名称 版本号 Vmware虚拟机 15.0.0-full-10134415-64bit linux_11gR2_database_1of2 11.2.0.1.0 - 64bit Putty.exe Release 0.70-64bit Toad for oracle 12.8.0.49 -32bit Oracle_11gR2_client 11g Release2 (11.2)-32bit Oracle Linux文件(DOC-1002902.ova) Oracle Linux x64 准备配置文件、脚本文件 在Oracle服务器端建立HR(Human Resource)模式所需的脚本执行文件； Oracle客户端配置TNS服务所需要的tnsname.ora、listener.ora文件。 ps：以上这些安装、配置、脚本文件在上面我分享的百度云链接文件中都能找到。 实验方案（具体步骤）在虚拟机上安装Oracle Linux 在虚拟机中导入老师提供的 DOC-1002902.ova文件，由于实验室32位PC机的原因，导入过程总是以失败结束；因此改选64位PC机(配载VM虚拟机)来操作。 在VM虚拟机成功安装Oracle linux（我的账户登录密码 oracle ），可以去设置语言、时区、用户名及密码等。 在Linux上安装Oracle 11g R2(服务器端)前期准备硬件环境监测 Content Instruction 检查物理内存 grep MemTotal /proc/meminfo 查看交换分区 grep SwapTotal /proc/meminfo 查看当前内存使用情况 free PS：这一类指令可以有很多，但其实只要在之前导入虚拟机文件过程没有什么异常，不是很有必要去了解这些硬件环境信息，那么这一步可以跳过。 检查各种补丁包、函数依赖包 方法：通过上网查找到需要的函数依赖包有以下这些： 12345678910111213141516171819202122232425binutils-2.17.50.0.6compat-libstdc++-33-3.2.3compat-libstdc++-33-3.2.3 (32 bit)elfutils-libelf-0.125elfutils-libelf-devel-0.125gcc-4.1.2gcc-c++-4.1.2glibc-2.5-24glibc-2.5-24 (32 bit)glibc-common-2.5glibc-devel-2.5glibc-devel-2.5 (32 bit)glibc-headers-2.5ksh-20060214libaio-0.3.106libaio-0.3.106 (32 bit)libaio-devel-0.3.106libaio-devel-0.3.106 (32 bit)libgcc-4.1.2libgcc-4.1.2 (32 bit)libstdc++-4.1.2libstdc++-4.1.2 (32 bit)libstdc++-devel 4.1.2make-3.81sysstat-7.0.2 通过类似重复以下的操作，借助root用户终端 yum search/install 命令将这些未安装的依赖包全部安装到服务端。 image 然后，再使用yum快速安装oracle预装环境——yum install oracle-rdbms-server-11gR2-preinstall 修改用户环境配置等参数文件 通过vi .bash_profile命令进入编辑界面，点击i进入insert模式，就可以写入以下数据了，写完数据后，点击ESC退出insert模式敲入:wq 保存本次修改并回到终端。 1234#!/bin/bashORACLE_BASE=/u01/app/oracleORACLE_HOME=$ORACLE_BASE/product/11.2.0/db_1ORACLE_SID=prod #这个位置填写的是Service_name 修改 /etc/hosts ,增加 ip地址 和 主机名 的对应关系，按照和上面同样的方法，添加下面这条： 1192.168.216.128 docker.oracleworld.com #ip地址 hostname 注意：如果出现 其他IP地址 与 hostname 的对应关系，应当在前面加上#注释掉或者直接删掉。 同样的方法，通过终端vi mk_dir.sh 添入以下数据 123456789mkdir -p /u01/app/oraInventorychmod -R 775 /u01/app/oraInventorymkdir -p /u01/app/oraclemkdir /u01/app/oracle/cfgtoollogschown -R oracle:oinstall /u01chmod -R 775 /u01/app/oraclemkdir -p /u01/app/oracle/product/11.2.0/db_1chown -Roracle:oinstall/u01/app/oracle/product/11.2.0/db_1chmod -R 775 /u01/app/oracle/product/11.2.0/db_1 切换到Oracle用户去设置里面找到users，解锁并修改已经生成的oracle用户密码，再切换用户登录到oracle下。 安装Oracle 11g在终端输入命令：unzip oracle11g 11.2.0.4 两个安装文件（也可以手动合并到同一个文件夹下），进入安装文件中的目录database，运行命令: ./runInstaller 同时，如果由于环境配置的原因，发现随后安装界面出现乱码，那么最好在执行安装之前添上这样一条语句：export LANG=en_US_UTF-8。 在随后出现的安装界面中，依次选择如下： 注意:过程中可能省去了一些安装界面（默认Next即可） 这里不填email等直接next，出现弹窗点击Yes； 在接下来的界面中，依次选 install software only。 选择单实例类型的数据库 选择oracle的语言，选择英文 数据库类型选择企业版 这里注意查看Oracle_Base路径和Oracle_home路径，必须保证和用户的初始化参数文件一致 设置 INVENTORY DIRECTORY 检查oracle用户所属的组 preinstall检查阶段，监测oracle所依赖的软件包，重新安装缺失的软件包，如果仍然有错误，那么全部忽略即可 最后一步监测oracle的情况 久违的安装界面安装到这个步骤，基本上问题不多了, copying files 阶段时，root模式下开一个终端，进入安装目录下的sysman/lib，编辑ins_emagent.mk文件。把 $(MK_EMAGENT_NMECTL)替换成$(MK_EMAGENT_NMECTL) -lnnz11 同时这个过程中有可能会有一个提示对话框，然后按照指定路径及说明方法运行两个脚本。打开终端，通过su – root切换到root用户，再通过bash命令依次执行对应目录的两个脚本，然后再来这个弹窗界面点击OK即可。 随后，就可以点击next，出现如下界面，表示在虚拟机这边安装服务端的Oracle 11g就已经成功了 服务端NETCA创建配置监听程序执行netca指令 接下来的界面弹窗中直接默认Next在选择TCP/IP端口号时，可能会出现一个弹窗提示：默认的1521端口可能被占用。通过查找并没有发现被占用问题，因此选择Yes继续。 建立一个数据库实例DBCA建库 设置数据库名和SID 不启用OEM 设置密码 不需修改、直接next 不启用快速恢复区、不启用归档 不需修改、直接next 至此，Oracle服务端实例数据库创建完毕。 服务端启用ssh服务 在主机上安装Oracle 11g Client(客户端)检查ssh服务是否正常下载putty.exe，打开以后，安装下图填入相对应信息（虚拟机IP地址可以在网络设置中找到，同时，建议虚拟机端网络连接方式选择仅主机模式）进行测试（确保虚拟机处于开启状态）。 安装Oracle客户端并配置本地网络服务监听点击setup.exe启动安装 安装过程中，除修改安装路径外，其余直接默认Next即可。 选择管理员选项 配置前的一些准备 将之前准备好的 listener.ora、tnsnames.ora文件（两个文件里面的内容如下所示）放到如下所示目录下。 同时，在环境变量中添加以下系统变量。 在ssh服务控制终端执行如下（开启数据库、开启监听） 本地网络服务名配置在所有程序中找到Net Configuration Assistant，进入配置界面操作如下。在测试连接过程中更改登录如果忘了数据库服务端密码（以sys用户为例），则需要重新给sys设置密码（详见后面的实验问题及解决办法）。 第三方软件Toad for Oracle连接数据库TNS检测进入cmd测试如下，说明数据库监听配置无误 使用Toad连接打开Toad for Oracle中的toad.exe启动，输入数据库服务端用户名以及密码后成功连接会出现如下的工作界面。 建立HR的模式（服务器端进行）准备脚本文件在如下所示目录中，将已准备好的脚本文件粘贴过来 执行脚本文件进入数据库层面，按照下面流程执行hr_main.sql这个脚本文件设置参数，就可以解锁HR用户并构建HR模式，且数据表中都有初始样例数据。 实验出现的问题及解决办法 第一次尝试安装时，总是在Linking Text File出失败，且界面卡死在那里。 解决办法：虚拟机重新启动并通过恢复快照这一特性重新进行安装，主要在对那些依赖包的安装过程要尤为注意，一个一个一次检查确保已安装，虽然方法很笨拙，但至少不会出错。同时，在Prerequisite Checks阶段忽略所有错误继续下一步，随后完成安装。 整个过程中经常会出现各种类型的错误,下面列出一些我遇到的这类问题 错误类型 错误原因 解决方案 ORA-12162 TNS:net service name is incorrectly specified 给出ORACLE_SID（可赋临时值或是去host文件添加参数），重新尝试登录数据库服务端 TNS-12545 Connect failed because target host or object does not exist 服务端root模式下修改host和listener.ora文件（即host文件里添上一条“IP地址 主机名”，listener文件里将host赋为修改后的主机名） ORA-01078、LRM-00109 Failure in processing system parameters 将$ORACLE_BASE/admin/数据库名称/pfile目录下的init.ora.\\********形式的文件copy到$ORACLE_HOME/dbs目录下 initoracle.ora即可 ORA-12514 TNS 监听程序当前无法识别连接描述符中请求服务 listener.ora中添加：(SID_DESC = (GLOBAL_DBNAME=全局数据库名) (ORACLE_HOME =依照相对应的路径来填) (SID_NAME = 数据库服务名) ) ORA-12154 TNS无法解析指定的连接标识符 重新进行配置网络，在服务端查询此数据库服务下的服务名，并重新检查配置，填写相对应虚拟机的IP地址，对于账号、口令登陆的问题，需要去sysdba用户下去设置。 用户忘记了数据库服务端的口令，导致在本地客户端进行配置网络服务时总是出现口令错误的提示 解决办法：按照下面的操作步骤进行，这样使用修改后的用户名和口令就可以测试成功了。 只能选择用户状态是open的用户进行重新设置口令的处理 参考文章 ⭐Oracle linux安装Oracle 11G HR Schema Oracle 11g中执行Execute的时候报异常ORA-01031的解决办法 Oracle PL/SQL DBA 编程实践基础 Oracle数据库任何用户密码都能以sysdba角色登入 浅析Oracle PL/SQL 学习（部分） Oracle 11gR2安装乱码解决方案 最后一点说明这是我有史以来写过的最长最长的一篇安装配置教程了，大部分的内容步骤都还是大三选修所记录的实验报告内容。这段时间需要准备数据库知识的复习，这才重新拾起来，大体按照上面的步骤依次给重现了。让我意外的是，当时竟然没有po出一份安装配置教程放网上。所以，这次赶紧加了把劲，整理了这篇。 这里面有些地方可能比较混乱，一是因为图片量太大了，可能会有一些偏差，还有就是我得承认文中有用了几张别的地方的图片；二是因为这次的整个安装配置过程相当繁琐，很多地方可能会出现报错、失败等等，我还记得当年选修这门课第一个实验就是弄这个，当时Linux指令等一些知识还不够娴熟，好像前后花了三天时间才完事。 最后，我想说的就是，教程写的再完美，实际去操作的时候，每个人可能都难免会出现这样那样的问题，放在这篇来讲，出现最多的就是形如 “ORA-××××××” 的类似问题，出了问题并不可怕，去某度和谷歌搜一下“ORA-××××××”，只要不是特别棘手，基本上都能解决。 贴张图！！！ 提神醒脑","tags":[{"name":"Oracle数据库","slug":"Oracle数据库","permalink":"https://zhouie.cn/tags/Oracle数据库/"},{"name":"Oracle 11g","slug":"Oracle-11g","permalink":"https://zhouie.cn/tags/Oracle-11g/"},{"name":"SSH","slug":"SSH","permalink":"https://zhouie.cn/tags/SSH/"}]},{"title":"【重装系统】 整理U盘启动快捷键查询列表","date":"2019-03-20T22:11:09.000Z","path":"posts/201903201/","text":"因为业务需要的原因，再一次重装了电脑系统（Windows 10 专业版），每次给自己或者别人重装电脑系统的时候，总记不太牢不同品牌电脑的U盘启动快捷键是什么，所以，这次的话，特地cp了下面这份U盘启动快捷键查询表！ 所谓快捷键就是快速启动的按键（比如我的电脑是联想笔记本，那么对应快捷键就是F12）！快捷键的作用就是可以不用通过繁琐地设置bios，即可实现快速启动u盘！不同品牌的电脑、不同型号的主板它的快捷键都可能不同。 品牌台式 台式机品牌 启动按键 台式机品牌 启动按键 联想台式电脑 F12 惠普台式电脑 F12 宏基台式电脑 F12 戴尔台式电脑 ESC 神舟台式电脑 F12 硕台式电脑 F8 方正台式电脑 F12 清华同方台式电脑 F12 海尔台式电脑 F12 明基台式电脑 F8 品牌笔记本 笔记本品牌 启动按键 笔记本品牌 启动按键 联想笔记本 F12 宏基笔记本 F12 华硕笔记本 ESC 惠普笔记本 F9 联想Thinkpad F12 戴尔笔记本 F12 神舟笔记本 F12 东芝笔记本 F12 三星笔记本 F12 IBM笔记本 F12 富士通笔记本 F12 海尔笔记本 F12 方正笔记本 F12 清华同方笔记本 F12 微星笔记本 F11 明基笔记本 F9 技嘉笔记本 F12 Gateway笔记本 F12 eMachines笔记本 F12 索尼笔记本 ESC 苹果笔记本 开机长按option键 主板 主板品牌 启动按键 主板品牌 启动按键 华硕主板 F8 技嘉主板 F12 微星主板 F11 映泰主板 F9 梅捷主板 ESC或F12 七彩虹主板 ESC或F11 华擎主板 F11 斯巴达卡主板 ESC 昂达主板 F11 双敏主板 ESC 翔升主板 F10 精英主板 ESC或F11 冠盟主板 F11或F12 富士康主板 ESC或F12 顶星主板 F11或F12 铭瑄主板 ESC 盈通主板 F8 捷波主板 ESC Intel主板 F12 杰微主板 ESC或F8 致铭主板 F12 磐英主板 ESC 磐正主板 ESC 冠铭主板 F9 PS：其它机型请尝试或参考以上品牌常用启动热键，也欢迎各位在下面留言添加更新！","tags":[{"name":"重装系统","slug":"重装系统","permalink":"https://zhouie.cn/tags/重装系统/"},{"name":"U盘启动盘","slug":"U盘启动盘","permalink":"https://zhouie.cn/tags/U盘启动盘/"},{"name":"快捷键查询","slug":"快捷键查询","permalink":"https://zhouie.cn/tags/快捷键查询/"}]},{"title":"【祝福】 用33种编程语言祝福全天下所有的情侣","date":"2019-02-14T21:03:22.000Z","path":"posts/2019021401/","text":"语言 祝福 C printf(&quot;爱情美满&quot;); C++ cout&lt;&lt;&quot;甜甜蜜蜜&quot;; C# System.Console.WriteLine(&quot;温馨浪漫&quot;) VB Msg(&quot;白头偕老&quot;) VC MessageBox(&quot;恩爱百年&quot;); Java System.out.println(&quot;佳偶天成&quot;); JavaScript alert(&quot;相濡以沫&quot;) PHP echo &quot;百年好合&quot;; Python print(&quot;心心相印&quot;) Html &lt;br/&gt;互敬互爱&lt;br/&gt; Objectivec NSLog(@&quot;爱心永驻&quot;); QBasic Print &quot;永浴爱河&quot; Asp Response.Write &quot;一见钟情&quot; Ruby puts &quot;情海浪涌&quot; VBScript MsgBox &quot;鸾凤和鸣&quot; XML &lt;TextView android:text=&quot;温情脉脉&quot; /&gt; LUA print(&quot;地久天长&quot;) Delphi ShowMessage(&#39;长此以往&#39;); shell echo 相亲相爱 perl print &#39;白头到老&#39; LISP (format t &quot;相敬如宾~%&quot;) powerBuilder messagebox（&quot;夫唱妇随&quot;) COBOL DISPLAY &#39;妇唱夫随&#39; aswing JOptionPane.showMessageDialog(&quot;happy&quot;,&quot;福禄鸳鸯&quot;) Android Toast.makeText(getApplicationContext(),&quot;美满良缘&quot;,Toast.LENGTH_SHORT).show() flex Alert.show(&quot;百年琴瑟&quot;); Foxpro ?[宜室宜家！] iapp tw(&quot;情投意合&quot;) DOS批处理 echo 如鼓琴瑟 易语言 调试输出(“执子之手”) Clojure (println &quot;与子偕老&quot;) verilog/systemverilog/e $display(&quot;海枯石烂&quot;) as trace(&quot;同心永结&quot;);","tags":[{"name":"节日祝福","slug":"节日祝福","permalink":"https://zhouie.cn/tags/节日祝福/"},{"name":"编程人生","slug":"编程人生","permalink":"https://zhouie.cn/tags/编程人生/"}]},{"title":"【公告】 北岛向南的小屋评论准则","date":"2019-01-11T20:39:13.000Z","path":"posts/201901111/","text":"我很喜欢阅读评论，哪怕是那些直指痛点的评论，因为评论和评论者是网站的重要组成部分。 也希望来这里评论的每个人都尽可能地有宾至如归的感觉，其实准则很简单，您只需要遵守以下： 尽量保持主题一致 尽可能地讨论与本篇文章相关的话题内容 不要多次交叉发布同一件事 更希望在评论中看到有用的、建设性的批评 注意礼仪 不允许任何形式的辱骂、人身攻击、骚扰 不允许性别歧视 不允许种族主义 除此之外，也 绝不允许出现以下内容 有针对性的骚扰并鼓励他人这样做 垃圾邮件 冒充作者或其他评论者 发布个人身份信息 不恰当的个人资料内容 需要声明的是，我不会一味地通过删除/禁止来剥夺您的言论自由，但是，如果您威胁、骚扰或以其他不当方式破坏了正常的讨论气氛与干净的社区环境，我们保留删除评论和禁止用户评论的权利。 如果您看到违反这些准则的评论，那么您可以做的最有效的事情就是标记它，或是通过社交媒体或电子邮件 &lt;nanzhouieATqq.com&gt; 与我们联系。 最后，感谢您抽出宝贵时间阅读这篇评论准则，希望您在这里逛得愉快！","tags":[{"name":"公告","slug":"公告","permalink":"https://zhouie.cn/tags/公告/"},{"name":"评论准则","slug":"评论准则","permalink":"https://zhouie.cn/tags/评论准则/"}]},{"title":"【公告】 这是一则临时公告的标题啊","date":"2018-10-02T23:47:43.000Z","path":"posts/201810021/","text":"前几天有朋友和我说，我的网站“加载好慢”，我还以为是他的网络差了些，今天做了一下检查之后才发现，原来它出事了… 这个问题，从一开始也就想过，一篇稳定的配图博文，图床的选择尤为重要。 却没想过，有一天，我也遇到了同样的难题，七牛云 在前一段时间默默地关闭了它提供的测试域名的永久性（30天内有效），而我又一直也没有去绑定个人域名 zhouie.cn（因为 DNS 解析选用的是国外的服务商，所以也只是一直也没能去弄 ICP备案，这就间接导致没能成功绑定个人域名）。 总之呢，不幸的是，我之前所有在七牛云上的图床链接全都失效了😭！！！ 因此，绝大多数文章的图片都无法加载出来，对不住了各位看官！ 但是，因为我这段时间，在学习上的事还挺忙的，一时也不方便抽开身去做一下维护调整（虽然我心中已经有计划了…），所以，可能要对一些不慎访问的水友们表示抱歉啦希望能理解 最后，祝大家万事胜意！也祝我终将能去我想去的地方！","tags":[{"name":"公告","slug":"公告","permalink":"https://zhouie.cn/tags/公告/"}]},{"title":"【分享】 VPN工具整理","date":"2018-08-09T21:21:43.000Z","path":"posts/201808091/","text":"近日，谷歌想借助其正在研发的过滤版搜索引擎应用程序，重返中国市场的消息在圈内传得沸沸扬扬，连官媒人民日报海外版在 Twitter 和 Facebook 上发文表示，“欢迎谷歌重返中国大陆，但前提必须遵守中国法律法规”。据悉，此前8月1日，即市场首次传出谷歌将在中国大陆重启搜索业务当天，在美国上市的百度股价跌近 8% ，市值跌破 800 亿美元… 对此，国内搜索引擎兼AI科技巨头 百度 CEO 李彦宏 表示百度有实力和信心与谷歌再 PK 一次并再赢一次。诚然，如今的百度已不是八年前的百度，但如今的谷歌在体量和业务上与2010年相比扩张也不是一星半点，从互联网搜索、安卓系统到 AI 技术、云计算等领域，开发并提供大量基于互联网的产品与服务。 虽然明面上谷歌是否会高调回归中国市场尚未可知，但不可否认的是，这几年来，谷歌想要进入中国市场的念头从未断过。而且啊，咱们大家在 “用谷歌” 与 “用百度” 这一问题上，也是 “分歧” 蛮大的… 为此，新浪财经发出 “如果谷歌回归，用百度还是用谷歌” 之类的微博投票，一边倒似的投票结果也反映出了很多网民的态度 如果谷歌回归，你选择用百度还是用谷歌 下面给大家整理分享了几个还挺实用的 VPN 工具，网络，因互联而精彩… 何为 VPN VPN属于远程访问技术，简单地说就是利用公用网络架设专用网络。例如某公司员工出差到外地，他想访问企业内网的服务器资源，这种访问就属于远程访问。 在传统的企业网络配置中，要进行远程访问，传统的方法是租用DDN（数字数据网）专线或帧中继，这样的通讯方案必然导致高昂的网络通讯和维护费用。对于移动用户（移动办公人员）与远端个人用户而言，一般会通过拨号线路（Internet）进入企业的局域网，但这样必然带来安全上的隐患。 VPN 让外地员工访问到内网资源，利用VPN的解决方法就是在内网中架设一台VPN服务器。外地员工在当地连上互联网后，通过互联网连接VPN服务器，然后通过VPN服务器进入企业内网。为了保证数据安全，VPN服务器和客户机之间的通讯数据都进行了加密处理。 有了数据加密，就可以认为数据是在一条专用的数据链路上进行安全传输，就如同专门架设了一个专用网络一样，但实际上VPN使用的是互联网上的公用链路，因此VPN称为虚拟专用网络，其实质上就是利用加密技术在公网上封装出一个数据通讯隧道。有了VPN技术，用户无论是在外地出差还是在家中办公，只要能上互联网就能利用VPN访问内网资源，这就是VPN在企业中应用得如此广泛的原因。 VPN 在中国今年1月份起，工信部发布了 《工业和信息化部关于清理规范互联网网络接入服务市场的通知》，在全国范围内对互联网网络接入服务市场开展清理规范工作。 根据 《中华人民共和国电信条例》 和 《中国人民共和国刑法》 等相关法律规定，未取得 《增值电信业务经营许可证》 的情况下，在网络上销售 VPN 代理服务，属于非法经营范畴。 据市场研究机构 Global WebIndex 的调查研究估测，中国的 VPN 用户可能多达 9000 万。 我个人觉得，不论从信息安全的角度，还是政治文化上来看，如此庞大的用户规模，必然需要一定的行业监管与市场干预，毕竟，我们所发送与接收的数据会通过 VPN 服务提供商的机器，用户的账号密码、信用卡信息等存在着被 VPN 服务提供商 ISP 看到的风险。更何况，这种监管绝非中国仅有。 VPN 服务风险 然而，形势政策上的方向性问题，可能大家很难找到或是稳定使用某一款 VPN 工具，这里的话，也只是推荐几款我用过的还好的工具（至少目前是这样）… VPN ToolAndroid Android Platform 蓝奏云链接：https://www.lanzous.com/i6ple7i 扫一扫二维码也可获取 Windows Psiphon &#103;&#101;&#x74;&#64;&#x70;&#115;&#105;&#112;&#x68;&#111;&#110;&#51;&#x2e;&#x63;&#x6f;&#x6d; Windscribe https://chn.windscribe.com/ Shadowsocks https://shadowsocks.org/ Betternet https://www.betternet.co/zh/ 蓝奏云链接：https://www.lanzous.com/i6plddi 扫一扫二维码也可获取 ps：以上链接若还是失效的话，可以邮我 nanzhouieATqq.com 获取最新链接 或 在评论区留下你的邮箱 …","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"VPN","slug":"VPN","permalink":"https://zhouie.cn/tags/VPN/"}]},{"title":"【分享】 Qiniu_upload windows工具","date":"2018-08-03T23:11:31.000Z","path":"posts/201808033/","text":"介绍一款 提升markdown贴图体验的实用小工具，支持 windows 及 mac，基于 AutoHotkey 和 qshell 实现，支持本地文件、截图及网络图片一键上传至七牛云，并获取图片的 markdown引用 至剪贴板（Ctrl+Alt+V），并自动粘贴到当前编辑器。 支持各种格式图片上传 支持截图及网络图片直接复制上传 支持各种格式单个文件上传 AutoHotkey开放源码，完全免费 安装使用非常简单 参考文档 windows版本markdown一键贴图工具（2.x及以上版本） AutoHotkey&amp;qshell实现图片一键上传七牛并返回markdown引用（适用1.x版本） AutoHotkey中文帮助 You can use the following modifier symbols to define hotkeys Powershell-Scripts for dumping images from clipboard 安装1、 下载 qimage-win首先从 github 下载最新的release版本(推荐使用2.*正式版)，并解压到任意目录，在qimage-win文件夹中看到的目录结构应该如下： 其中dump-clipboard-png.ps1是保存截图的powershell脚本，qiniu-image-upload.ahk即完成文件上传的AutoHotkey脚本。 2、 安装 AutoHotkey AutoHotkey官网下载安装最新版本，这是一款免费的、Windows平台下开放源代码的 热键脚本语言，利用其通过 自定义热键 触发一系列系统调用从而完成自动化操作。 这款软件的安装很简单，正常安装Next就行。具体软件更多学习内容可参照——AutoHotkey中文帮助 3、 注册七牛云账号并创建一个bucket 还没有七牛云帐号的朋友，😉欢迎通过我的邀请注册链接：https://portal.qiniu.com/signup?code=3lowm9s25ur82完成七牛云的注册，注册后会发邮件到你邮箱，通过邮件激活并登录即可。 ps：注册的时候，你要填一项个人网站域名，如果没网站的，就请随便填一个真实存在的网站吧，www.baidu.com也是可以的哦~ 这个部分的操作请参照 Md2All的云图床 注意，在新建七牛云存储空间(bucket)时，选择存储区域上要多加留意，参照文档 存储区域 地域简称 上传域名 华东 z0 服务器端上传：http(s)://up.qiniup.com 客户端上传： http(s)://upload.qiniup.com 华北 z1 服务器端上传：http(s)://up-z1.qiniup.com 客户端上传：http(s)://upload-z1.qiniup.com 华南 z2 服务器端上传：http(s)://up-z2.qiniup.com 客户端上传：http(s)://upload-z2.qiniup.com 北美 na0 服务器端上传：http(s)://up-na0.qiniup.com 客户端上传：http(s)://upload-na0.qiniup.com 东南亚 as0 服务器端上传：http(s)://up-as0.qiniup.com 客户端上传：http(s)://upload-as0.qiniup.com 4、 配置文件 qimage-win 文件夹中打开settings.ini文件，可以看到: 这里的配置项都需要根据自己的七牛云账号以及所创建的 bucket 进行修改，后面的两个配置项为可选配置，默认情况下可以暂时先不管。 ACCESS_KEY &amp; SECRET_KEY 这是qshell操作个人账号的账号凭证，登陆七牛账号后在个人面板-&gt;密钥管理中查看，或者直接访问https://portal.qiniu.com/user/key查看。 BUCKET_NAME &amp; BUCKET_DOMAIN 在对象存储-&gt;存储空间列表中选择或新建一个存储空间即 bucket，点击该 bucket 在右边看到一个测试域名，该域名bucketDomain便是图片上传后的访问域名，特别注意域名不要少了前面的http://头部。 完成文件上传的AutoHotkey脚本中默认的快捷键是^!V，即Ctrl+Alt+V(其中，^代表Ctrl，!为Alt)，如果您希望修改为其它自己更习惯的快捷键，直接对qiniu-image-upload.ahk脚本修改即可生效。 关于hotkey的符号与按键对应关系请参考 You can use the following modifier symbols to define hotkeys 运行配置完成后，以管理员身份运行qImage.exe，这时便可以参照下面的效果显示，使用Ctrl+Alt+V尝试一键上传图片至七牛云指定bucket了。 效果展示本地图片文件上传 截图上传 其它文件上传 Q&amp;A如果以上操作完成后，没有按照预期达到图片上传的效果，可以先自己调试找一下原因，一般报错信息会打印在cmd命令行中，但是cmd窗口一闪而过可能看不清楚，这时候需要将settings.ini配置文件中的可选参数DEBUG_MODE = false改为DEBUG_MODE = true以打开调试模式，再次尝试，这时候cmd窗口不会自动关闭，便可以看到具体的报错信息从而对症下药解决问题。 使用过程中的任何问题可以在github中提交issues 常见问题一: 七牛云UP_HOST有误具体的错误信息如下所示： Uploading G:\\Users\\Cooper\\Desktop\\9999.png =&gt; markdown : 201705082057_244.png …Progress: 100%Put file error, 400 incorrect region, please use up-z2.qiniu.com, Reqid: 0wUAAGp6j6faorwULast time: 0.43 s, Average Speed: 415.6 KB/s 在七牛云的官方文档中UP_HOST为非必填项，配置文件中使用的是默认值http://up.qiniu.com，而每个区域所对应的的七牛云上传域名都不同，当与你所在空间区域不匹配时便会报以上的错误信息不过很友善的是，错误信息中已经给出了建议的UP_HOST，例如上面的错误信息就给出明确的提示 please use up-z2.qiniu.com，这时将可选配置项UP_HOST = http://up.qiniu.com修改为UP_HOST = http://up-z2.qiniu.com，保存即可。 参照上面的存储区域-上传域名表格，不难看出出现这种报错的原因其实是因为，默认情况下，bucket的默认存储区域是 华东 ，对应http(s)://up.qiniup.com，但我之前在新建bucket时将 存储区域 选择在了 华南 地区，显然对应配置文件中自然需要修改成http://up-z2.qiniu.com! 常见问题二: powershell执行权限问题具体的错误信息如下所示： set-executionpolicy : 对注册表项“HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PowerShell\\1\\ShellIds\\Microsoft.PowerShell”的访问被拒绝。 要更改默认(LocalMachine)作用域的执行策略，请使用“以管理员身份运行”选项启动 Windows PowerShell。要更改当前用户的执行策略，请运行 “Set-ExecutionPolicy -Scope Current User”。 这是powershell执行权限问题，重新以管理员权限运行qImage.exe即可。 推荐阅读 !imp 1小时编写一个支持七牛上传的 markdown 客户端 —— 技术实现篇 ， 代码优化篇 ， 打包发布篇 ， res， 备份地址 qiniu-image-tool | Markdown 一键贴图工具 v.2.x ， v.1.x ， res ， issues ， download qimage-mac | 使用alfred在markdown中愉快的贴图 ， res ， download QiniuUpload | 一个方便用七牛做图床然后插入markdown的小工具 ， res ， doc 在Atom下配置并使用MarkDown全教程 ， 更多参考1 ， 更多参考2 一个码字工作者的正确书写发文姿势 —— MWeb + Markdown Here + 七牛 实现一键发布 Laravel项目中使用markdown编辑器及图片粘贴上传七牛云 ， 备份地址 qiniu upload files谷歌浏览器插件 Python实现七牛云图片和文件上传脚本实现，res","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"图床","slug":"图床","permalink":"https://zhouie.cn/tags/图床/"},{"name":"七牛云","slug":"七牛云","permalink":"https://zhouie.cn/tags/七牛云/"}]},{"title":"【分享】 Md2All Markdown排版利器","date":"2018-08-03T17:31:22.000Z","path":"posts/201808032/","text":"关于Md2All 有这样一位程序猿，也同样被公众号的Markdown排版折磨得苦不堪言，花了差不多一个星期的时间，研究各种现有的工具，但并没有找到较为满意的解决方案。因为这样程序猿比较喜欢较真，于是就萌生了自己写一个公众号Markdown排版工具的想法，这就有了现在的Md2All。虽然开发的过程也因遇到的各种奇芭的坑而艰苦异常，但结果还是令人满意的，起码上面提到的问题都解决了。 Markdown排版利器：Md2All 支持 一键排版和自定义css； 支持边编辑边预览； 支持左右滚动联动； 对IT人士特别友好，支持80多种代码主题； 支持通用的Markdown语法和部分扩展语法(如：表格，任务列表，latex数学公式，注脚等…)，并对html，css样式有很好的支持； 能让Markdown内容，无需作任何调整就能一键复制到微信公众号、博客园、掘金、知乎、csdn、51cto、wordpress、hexo等平台。 一键排版 中提供了几种常用的排版样式模版，也提供了足够多的注释，让初学者也能很容易根据注释中的提示个性化自己的样式。如果你觉得现有的样式模板不适合你，那就大胆尝试去改吧，就算改错了也就”恢复预设值“就OK了，所以不用担心啊。ps：记得保存了才会生效啊。 Md2All教程请参考：https://www.cnblogs.com/garyyan/p/8329343.html 整体体验 Md2All的云图床准备步骤1、注册七牛云帐号 为什么用七牛云呢？七牛云技术已相当成熟，在图片存储管理上已经有些年头了，从知乎上来看，在国内目前的图床服务上属于靠前的服务商了，而且，目前很多国外的图床服务还是被墙没法使用，具体可供大家参考选择的图床工具分享 还没有七牛云帐号的朋友，😉欢迎通过我的邀请注册链接：https://portal.qiniu.com/signup?code=3lowm9s25ur82完成七牛云的注册，注册后会发邮件到你邮箱，通过邮件激活并登录即可。 ps：注册的时候，你要填一项个人网站域名，如果没网站的，就请随便填一个真实存在的网站吧，www.baidu.com也是可以的哦~ 2、新建七牛云存储空间(bucket) 现在七牛云的新建存储空间要个人身份认证，这里建议用支付宝认证，十分钟左右就可以收到认证通过的信息了。ps：认证通过后会有10G/月的免费空间，这肯定是够用了吧… 按照 登录七牛云-&gt;管理控制台-&gt;对象存储-&gt;新建存储空间 操作顺序新建一个存储空间即bucket 点击该 bucket，在右边看到一个测试域名，该域名是图片上传后的访问域名即 bucketDomain。这里要特别注意域名不要少了前面的http://头部。 3、设置云图床 3.1、Acess Key和Secret Key 3.2、BucketName和BucketDomain 3.3、在Md2All中设置七牛图床 在 Md2All 中点击左上角的图片图标，然后参考下面的1,2,3,4和上图的1,2,3,4对应，并记得保存设置 4、测试一下 按照下面的显示效果动图操作一番，看看内容管理界面是否成功上传。 效果展示 直接把图片拖到编辑框 注意：Markdown内容是插入到光标处，为了避免不知内容插入到那儿，拖图片前，请先点一点光标 截图，直接复制粘贴 点击上传图片选择 这个功能就不录屏了，相信聪明的你一定知道怎样做的 显示Latex公式 目前国内很多的 Markdown编辑环境中还不支持功能强大的 Latex公式，以前最通常的做法是这样的：找一个支持 Latex公式 的网站（如CSDN)，先把 Latex公式 显示出来，然后再一个个去截屏保存。如果一两条公式也就算了，可如果公式很多，那工作量也是让人头痛。 原本一篇好好的 Markdown文档，本来打算复制过来直接发布的，却因为不支持 Latex公式 的原因，又得重新整理一次，这真的是很浪费时间。 为了解决 Latex公式的显示问题，Md2All新增了对 Latex公式 到各平台显示的完美支持。 直接支持在 Markdown中包含 Latex公式，一键 复制就能转换到各平台都能正常显示的 Latex公式内容。 其实它是这样做的：一键 复制直接把 Latex公式 转换成 图片，再次复制 就能把包含转换好的 Latex公式的内容直接复制出来，完美解决了跨平台不支持Latex公式的显示问题，免去了截图保存再上传的这种麻烦。 CSS样式注意，Md2All 中用的都是标准的css样式，而且在样式文件中有很多的注释。 举个例子来说，如果我想改###这个h3标题的效果，那就只要改样式文件中以h3为开头的样式的内容即可。如： 从 默认样式中把整个样式内容复制到 最爱样式中然后再进行修改。因为所有的样式模板都是从 默认样式中修改过来的，另外，其它的样式模板目前还有可能在不断改进中，所以在 最爱样式中定义自己的样式是最好的。 123h3 &#123; font-size: 1.3em;&#125; 改为 1234h3 &#123; font-size: 2.3em; color:#159957&#125; 也可以直接在后面添加，后面的会覆盖前面的，如: 1234567h3 &#123; font-size: 1.3em;&#125;h3 &#123; font-size: 2.3em; color:#159957&#125; 全局样式自定义 可以看到，修改output_wrapper{}下的样式后，就直接影响了整个文档的显示效果，而每个样式的修改，从英文单词和GIF效果中已能很清楚地看到。 可能有人会有疑问，不是说全局的吗，为什么最上面的引用块的样式没有变？这是因为，更具体定义的元素，无论放在前面还是后面，也不会被范围更大的定义覆盖，如： 12345678blockquote&#123;color:#ffffff;&#125;output_wrapper&#123;color:#00000;&#125; output_wrapper的color不会覆盖blockquote（引用块）的。原因是output_wrapper是针对所有的，而blockquote只是针对引用块。好吧，既然说了引用块blockquote，那就接着blockquote{}来说吧！ 引用块样式自定义 有了上面的介绍后，这儿看起来应该没压力了吧，就是改blockquote{},说白了就是英语单词的事了。 段落样式自定义 粗体、斜体、删除线样式自定义 可以看到，对于斜体em{}，我把font-style:itaic拿掉就不斜，对于删除线del{},只要添加text-decoration:none;就会把删除线可掉，对于强调strong{}可以添加font-weight:normal;把粗体去掉。这样你就可以把它作为其它的作用了啊。 分隔线样式自定义 行内代码样式自定义行内代码，也就是改code{} 行内代码和 代码块一般情况都是用于代码显示，不过行内代码是可以和其它的内容放在同一行的，所以一般用行内代码来显示一些自己要突出的内容；而代码块，就是独立为显示一段代码的区域。 代码块样式自定义 看到这儿，就算工具栏没了 代码紧凑的功能，也应该知道怎样实现了，另外，代码高亮也可以随心所欲地去定义了！ 标题样式自定义写markdown时，我比较喜欢用h3，即###，因为一般情况下，h3默认的font-size对我来说，大小刚好合适。 但这并没有什么参考性，自己把握好喜好就行。 标题酷酷的改进 标题首字突出的改进 标题上下边框的改进","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"Markdown","slug":"Markdown","permalink":"https://zhouie.cn/tags/Markdown/"},{"name":"图床","slug":"图床","permalink":"https://zhouie.cn/tags/图床/"}]},{"title":"【分享】 Markdown-Here md-2-html渲染","date":"2018-08-03T12:36:45.000Z","path":"posts/201808031/","text":"写在前面 最近在编排微信公众号的时候，竟然发现这里没有支持 代码块 这种语块，更别谈 高亮处理 了，而且啊，一直也想不明白，微信公众号的编辑器怎么还没有支持 Markdown 这个目前最高效的写作语言模块。 试想一下，如果你正在通过 Markdown 来写文章，需要将此文章发布到公众号，那么，你可能就得这样： 第一步，删除 Markdown 特定的语法标记 第二步，将文字内容复制到公众号编辑框中再进行排版 这种方法，仅仅偶尔一次两次也没有问题，要是使用频繁的话，就太浪费时间和精力了。 当然了，也有一些手段可以将 Markdown 转换成 HTML ，再来将其中的内容复制到公众号编辑框中进行排版调整。Convert Markdown to HTML 综上，这里介绍这样一款浏览器插件 —— Markdown Here ，通过其提供的一键渲染功能，可将 Markdown 格式直接达到（渲染）我们需要的样式。 安装下载地址：http://sina.lt/fCA8(也提供有 Firefox、Safari 插件)，需要翻墙。备份地址：Markdown Here for Chrome.crx 渲染 CSS 样式 打开 Markdown Here 选项，将 自定义的基本渲染CSS样式直接覆盖到 Primary Styling CSS（基本渲染CSS）框中。 其中，至于自定义的基本渲染CSS样式，有着一定CSS知识的你完全可以根据自己的喜好来设置，当然，我这里也提供了一些Gist Snippets 以供学习参阅。 至于右边的 语法高亮CSS，提供有很多可选主题，就看你喜欢哪一款了。下面的 预览框中会自动保存修改并同步显示渲染效果预览。 多平台使用打开微信公众号后台编辑器，直接复制带有 Markdown 语法的文章或者笔记到编辑器中（不再需要删除 Markdown 特定的语法标记），点击浏览器右上角 Markdown Here图标(也可以试试快捷键CTRL+ALT+M)，Markdown Here 会自动将你的文章进行了全新的渲染排版（转成HTML样式），文章标题层级、加粗、引用、表格、图片、代码块、甚至最不好弄的数学公式，一目了然。 得说一下，这里只是拿微信公众号为例来讲，其实 Markdown Here 这款插件能让 Markdown 内容，无需作任何调整就能在 微信公众号、CSDN、博客园、掘金、知乎、51CTO、WordPress 等多种平台正确显示渲染后的效果。 同时啊，Markdown Here 还可以用来渲染用 Markdown 写的邮件内容，似乎这才是它的推广方向… 推荐阅读 Md2All | Markdown排版利器 程序猿DD | Markdown转换工具 如何排版微信公众平台的文章？ - 知乎 在线Markdown转微信公众号内容开源项目 走进Markdown园子","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"Markdown","slug":"Markdown","permalink":"https://zhouie.cn/tags/Markdown/"}]},{"title":"【分享】 Cmder - 命令行增强工具","date":"2018-07-31T17:23:51.000Z","path":"posts/201807311/","text":"cmdercmder是一款Windows环境下非常简洁美观易用的cmd替代者，它是一个跨平台的命令行增强工具，可以集成windows batch, power shell, git, linux bash等多种命令行于一体，支持了大部分的Linux命令，比如 grep, curl(没有 wget)，vim，grep，tar，unzip，ssh，ls，bash，perl等。还可以通过自定义，让它更方便。最重要的是颜值也比Windows自带的cmd好得多，支持文字颜色区分。 Windows自带的cmd有哪些缺点 复制文本，不能直接用鼠标拷贝，还需要多一道菜单操作；而且，还只能块状拷贝，而不是按行字符，极其不便 不支持多Tab页，多窗口管理不便 安装cmder在cmder官网下载Full版本（内建Git for Windows），直接解压便可以使用啦 让cmder便于使用将cmder添加到右键菜单中 在PATH中增加Cmder.exe所在目录（如D:\\Program Files\\cmder） 然后进入Cmder的根目录，在命令行中执行Cmder.exe /REGISTER USER或Cmder.exe /REGISTER ALL注册表命令，就可以在右键中出现Cmder Here了 另外呢，在网上我又看到这样一段gist描述去添加右键 在Cmder根目录新建一个init.bat，输入以下代码： @echo offSET CMDER_ROOT=%~dp0reg add “HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder” /ve /d “Cmder Here” /freg add “HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder” /v “Icon” /d “\\”%CMDER_ROOT%cmder.exe\\”” /freg add “HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder” /v “Extended” /freg add “HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\\command” /ve /d “\\”%CMDER_ROOT%cmder.exe\\” \\”%%V\\”” /fpause 以管理员身份运行init.bat即可。删除的话再在根目录新建一个uninit.bat，依然是以管理员身份运行。代码如下： @echo offReg delete “HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder” /fpause 在设置中添加语言环境set LANG=zh_CN.UTF8 设置默认使用cmd、PowerShell还是bash安装之后默认的是cmd，至于选择哪个得看个人需求 对于普通使用者来说，这里从几个方面来比较一下 cmd 以及 PowerShell 资源占用 当我们运行 Cmd 时，大概只需占用不到 1M 的内存，几乎可以忽略不计。 而使用 PowerShell 时，需要占用大约 20M的内存，两者几乎相差 40~50 倍。从这里可以看出，如果你的电脑比较老旧，性能较低，使用 Cmd 无疑可以获得更高的流畅性。 界面 当我们使用 Cmd 时，所有的字符都是同一个颜色的，无法实现语法高亮。但是，如果使用的是 PowerShell，关键字会被高亮，而且错误信息将以红色显示，确实美观不少。 排版 当我们使用 Cmd 运行一些较为复杂、较为耗时的命令时，随意拖动命令行窗口时，窗口中的内容依然能够保持原样，整洁美观。 但是，若是使用 PowerShell 执行同样的命令，情况就不容乐观了。如果在执行命令期间快速拖动命令行窗口，其窗口中的中文字符就会出现叠影，严重影响了阅读感。 命令支持程度 Cmd 只能支持传统的 Windows 命令，既不能使用 .net 库中的命令，也不能使用 Linux 下的命令。但这方面 PowerShell 就强大多了，不仅完美支持传统 Windows 命令和 .net 库中的命令，也支持部分常用的 Linux 命令。 如果你并不常用命令行工具，建议使用 Cmd，它的资源占用更小，启动速度更快，而且更为成熟可靠稳定。但如果你是一个程序员，或是追求新奇特性，可以尝试使用 PowerShell，毕竟，它支持更多的命令内容，界面也更绚丽。 调节背景的透明度 添加ll等命令在cmder-&gt;config-&gt;aliases，打开aliases文件（我这里的便是user-aliases.cmd文件），将 1234l=ls --show-control-chars la=ls -aF --show-control-chars ll=ls -alF --show-control-chars ls=ls --show-control-chars -F 添加至文件末尾，用于增强命令并添加颜色区分。 常用快捷键 快捷键 含义 Tab 自动路径补全 Ctrl+t 建立新页签 Ctrl+W 关闭页签 Ctrl+Tab 切换页签 Alt+F4 关闭所有页签 Alt+Shift+1 开启cmd.exe Alt+Shift+2 开启powershell.exe Alt+Shift+3 开启powershell.exe (系统管理员权限) Ctrl+1 快速切换到第1个页签 Ctrl+n 快速切换到第n个页签( n值无上限) Alt+enter 切换到全屏状态 Ctr+r 历史命令搜索 Win+Alt+P 开启工具选项视窗 Ctrl + Shift + v 复制 Q&amp;A解决文字重叠问题Win + Ait + P唤出设置界面，General-&gt; Fonts-&gt; monospce,去掉那勾勾即可。 修改命令提示符号λ将λ符号修改成$，在../cmder/vendor/clink.lua批处理文件中，修改其中第43行的将λ为$ 修改前 local lambda = &quot;λ&quot;，修改后 local lambda = &quot;$&quot;","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"Cmder","slug":"Cmder","permalink":"https://zhouie.cn/tags/Cmder/"}]},{"title":"【Python学习实践】 speech智能语音模块","date":"2018-07-27T20:25:11.000Z","path":"posts/201807271/","text":"🤷‍️最近的生活、学习节奏很是容易被打断，终于，在今天，既实习结束之后，夏令营也结束了。前几天，一个人在复习地很累的时候，又重新将Python捡了起来，看了挺多的知识点。 真是太有意(wu)思(liao)了！ 环境准备1️⃣ python2.* 或 python3.* 2️⃣ 安装pywin32扩展库 3️⃣ 安装speech模块 安装Python 2/3 安装Python2还是Python3的选择上，我个人是推荐两个都装上，在某些地方用的时候稍微多个切换环境变量的步骤而已。当然了，我觉得就目前Python3已经推出的时长来看，初学者的话，还是建议先选择安装Python2熟悉Python的一些语法结构定义，而且使用上应该较舒适一些吧。毕竟Python2推出的时间更久一些，遇到一些问题，可供搜索的解决方案也丰富些；同时啊，目前仍让存有部分模块功能无法适应Python3或是Python3.*的较高版本。 具体安装的的过程就不详讲了，不管哪个版本都几乎大同小异，很容易上手也是Python的特性之一 安装完Python环境之后啊，毕竟也是一门编程语言，选择一个合适的IDE是必不可少的，这里的话，我推荐阅读一下Python IDE，更多 Python IDE 请参阅：http://wiki.python.org/moin/PythonEditors PyCharm IDE在众多IDE中，最受大家追捧的一款便是PyCharm了，作为 JetBrains全家桶的一份子，这款软件具备完善功能，如：调试、语法高亮、项目管理、代码跳转、智能提示、自动完成，单元测试甚至版本控制等。另外，它还提供了一些很好的功能用于 Django 开发，同时支持 Google App Engine，更酷的是，PyCharm 支持 IronPython。 官方下载地址：http://www.jetbrains.com/pycharm/download/ IntelliJ IDEA 注册码:http://idea.lanyus.com/以及提供的破解帮助文档 IDEA系列主题下载地址：http://www.riaway.com/theme.php，这些主题支持的IDE包括：InteliJ IDEA, PhpStorm, PyCharm, RubyMine, WebStorm and AppCode。 注：怎么安装下载的主题 从主菜单打开你的编辑器选择File-&gt;Import Setting ，选择你下载的jar文件; 等待重启之后进行配置：打开File-&gt;Settings-&gt;Editor-&gt;Colors and fonts，然后选择你安装的主题即可完成。 安装pywin32扩展库pywin32即 Python for Windows Extensions，提供了Pyhton访问和调用Windows底层功能函数的接口，pywin32包括了win32api、win32com、win32gui、win32process等模块 下载地址：https://sourceforge.net/projects/pywin32/files/pywin32/Build%20221/ 这个要 根据Python版本（2.*/3.*）和CPU位数（32位/64位）下载相应版本并安装。 比如，像我这种情况，就需要安装 pywin32-221.win-amd64-py3.7.exe 安装speech模块使用pip install speech命令即可安装，但对于安装了Python3的用户来说，还需要针对Python3的一些新特性对安装后的配置文件做些修改 至于这里的pip，它是Python包管理工具，该工具提供了对Python包的查找、下载、安装、卸载的功能；同时，Python 2.7.9 + 和 Python 3.4+ 以上版本都自带pip工具，只要安装的时候没取消勾选那个选项，一般都不用再特别安装了的，可以通过命令pip --version来判断是否已安装；pip官网下载地址:https://pypi.org/project/pip/，注意，用哪个版本的 Python 运行安装脚本，pip 就被关联到哪个版本；值得注意的是，部分 Linux 发行版可直接用包管理器安装 pip，如 Debian 和 Ubuntu：sudo apt-get install python-pip。 pip常用相关指令 功能 指令 显示版本和路径 pip –version 获取帮助 pip –help 升级 pip pip install -U pip 安装最新版本包 pip install SomePackage 安装指定版本 pip install SomePackage==1.0.4 最小版本 pip install ‘SomePackage&gt;=1.0.4’ 升级包 pip install –upgrade SomePackage 升级至指定的包 使用== 、 &gt;= 卸载包 pip uninstall SomePackage 搜索包 pip search SomePackage 显示安装包信息 pip show 查看指定包的详细信息 pip show -f SomePackage 列出已安装的包 pip list 查看可升级的包 pip list -o 注：如果上面那个 升级pip命令出现问题 ，可以使用以下命令：sudo easy_install --upgrade pip Python3.*环境下正常使用speech的解决方法speech’s Project description 安装完speech模块后，需要去修改 speech.py文件，该文件路径在..\\Python37\\Lib\\site-packages下 line59 修改import thread，改成import threading； line157 修改print prompt，改成print(prompt)； 对最后的函数_ensure_event_thread修改如下： 123456789101112131415161718192021222324class T(threading.Thread): def __init__(self): threading.Thread.__init__(self) def run(self): passdef _ensure_event_thread(): \"\"\" Make sure the eventthread is running, which checks the handlerqueue for new eventhandlers to create, and runs the message pump. \"\"\" global _eventthread if not _eventthread: def loop(): while _eventthread: pythoncom.PumpWaitingMessages() if _handlerqueue: (context,listener,callback) = _handlerqueue.pop() # Just creating a _ListenerCallback object makes events # fire till listener loses reference to its grammar object _ListenerCallback(context, listener, callback) time.sleep(.5) _eventthread = T() _eventthread.start() 智能语音自动读词脚本前几天，朋友分享给我一个关于计算机专业相关英语词汇的文件，接收之后一直放在电脑桌面上，也不知道有没有用。今天下午的时候，因为最近的夏令营活动也一直有和AI相关研究领域团队交流，所以突然就想到可不可以将这些英语单词用已有的Python语音扩展包去实现一种类似于”课堂听写”的自动(谈不上智能)模式。 具体的源程序下面也可以看到，整个的程序结构很简陋，也没花多少时间，相信理解起来也并不难。 值得说明的有这么几点： 提供的样例单词都是计算机专业相关的，如果你想换成别的单词，只需要修改test.csv文件即可。其中，test.csv文件中共有两列数据，分别代表英语词汇与相应中文释义，要想实现中英互译的功能，只要去将这列的顺序去对调一下即可。 和”课堂听写”模式相像，每次会相隔Interval_Time时间按行语音输出词汇两次（听写的时候，一般老师会间隔着地读2~3次），之后的话，每听写一小组词汇（LOOP_NUM个），就会将它们一起展示出来（中英对照），也以便看看自己的”正确率”有多高。 在选择哪个智能语音模块上，其实也有做了很多了解和实验 最开始是打算用pyttsx（Python3好像要用pyttsx3），期间碰到了不少的问题，尤其对于Python3来说，只能多去搜搜看了，pyttsx的中文语音识别问题及探究之路、pyttsx3 - Text-to-speech x-platform、py库：文本转为语音（pywin32、pyttsx 之后也接触到了pydub，pydub需要依赖libav或者ffmpeg，推荐阅读：五十音听写：Python 音频处理库 pydub、python音频处理库：pydub。 既然谈到这儿，就多聊一些关于音频方面的内容，比如，如何使用Python播放mp3、wav、ogg格式的音频文件 调用系统默认播放器播放 12345import timeimport osfile = r'F:/Test/musicT/Hello.mp3'os.system(file)time.sleep(10) pygame 播放，但存在语速失真的不足，pygame提供了两个加载音乐文件的方法 pygame.mixer.Sound，主要加载ogg和wav音频文件。 pygame.mixer.music，主要加载mp3音频文件。 12345678import timeimport pygamefile = r'F:/Test/musicT/Hello.mp3'pygame.mixer.init()track = pygame.mixer.music.load(file)pygame.mixer.music.play()time.sleep(10)pygame.mixer.music.stop() mp3play播放，语速正常，但貌似目前只能用于python2.*，不支持python3.* 1234567891011import timeimport mp3playdef playmusic(path): clip = mp3play.load(path) clip.play() time.sleep(10) clip.stop()file = r'F:/Test/musicT/Hello.mp3'playmusic(file) 在编程过程中，有遇到了下面这种问题，针对这种情形的解决方案便是去任务管理下找到并结束智能语音进程。 源程序当然，也可以去GitHub上Download Latest Version，嗯emmm..，提前感谢您的star ⭐ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#!/usr/bin/env python# -*- coding: utf-8 -*-# @Time : 2018/7/27 18:01# @Author : zhouie# @File : main.py# @Software: PyCharmimport speechimport timeimport csvdata = [] # 暂存 *.csv 文件每行数据Interval_Time = 4 # 两次读词的间隔时间LOOP_NUM = 8 # 循环基数Think_Time = 15 # 回顾等待时间csv_file = open('./res/test.csv', encoding='utf-8')csv_reader_lines = csv.reader(csv_file)# print(csv_reader_lines)num = 0for one_line in csv_reader_lines: data.append(one_line) num = num + 1speech.say(\"计算机专业相关的英语单词 中英互译 测试小程序，demo版\")speech.say(\"This is a small routine (compiled by Python) for exercise about English phrases in the field of computer\")i = 0while i &lt; num: # print(i + 1, data[i][0]) # speech.say(i + 1) # speech.say(data[i][0]) # time.sleep(Interval_Time) # speech.say(data[i][0]) if 0 == (i + 1) % LOOP_NUM: speech.say(\"来回顾一下 以上所学的几个词汇吧\") speech.say(\"Just follow me , look back on the words you have learned...\") print(\"!--#######--*--#######--!\") print(\"第\", int(i / LOOP_NUM) + 1, \"组词汇：\") for j in range(i - (LOOP_NUM - 1), i + 1): print(data[j][0], data[j][1]) speech.say(data[j][0]) speech.say(data[j][1]) print(\"!--#######--*--#######--!\") speech.say(\"你的正确率如何呢？\") speech.say(\"So , What about your correct rate?\") time.sleep(Think_Time) i = i + 1speech.say(\"Congratulation!\") 效果展示","tags":[{"name":"Python","slug":"Python","permalink":"https://zhouie.cn/tags/Python/"},{"name":"speech","slug":"speech","permalink":"https://zhouie.cn/tags/speech/"}]},{"title":"【软件测试】 实习分享与总结","date":"2018-07-19T14:55:42.000Z","path":"posts/201807191/","text":"实习方向：软件测试实习时间：2018/07/02 —— 2018/07/18实习地点：湖南省长沙市天心区五一广场五一新干线（实际上呢…SANY）授课内容：功能测试、性能测试、UI自动化测试、Linux基本指令以及SVN版本控制系统相关知识。 总结来说，学会了如何规范编写测试样例、缺陷记录并基本掌握了功能测试课程基本内容，对于软件测试行业也有了一定的认知和把握； 学会了如何使用Loadrunner性能测试工具进行测试脚本录制，并创建模拟场景进行分析，撰写性能测试分析报告； 学会了使用Selenium + Webdriver进行UI自动化测试脚本的编写，能够编写针对百度、京东购物网站几项主要功能的Java测试脚本； 同时，也掌握了SVN版本控制相关知识和一些Linux基本指令，并基于RedHat Linux服务端发布Bugzilla网站加以锻炼。 好吧，就记这些了，再补上几张图片！hhhhhhh~","tags":[{"name":"XTU","slug":"XTU","permalink":"https://zhouie.cn/tags/XTU/"},{"name":"实习","slug":"实习","permalink":"https://zhouie.cn/tags/实习/"}]},{"title":"【软件测试】 Bugzilla的安装配置 - RedHat Linux","date":"2018-07-18T22:13:31.000Z","path":"posts/201807181/","text":"写在前面这次长沙实习中接触到了 “Linux环境下安装配置Bugzilla” 这个需求，其实最开始也是不明所以的，连Bugzilla是什么都不清楚，也是安装教程稀里糊涂地给装好了。至于安装教程下面也会讲到，不过在这之前，先看一下Bugzilla系统究竟是什么吧？ Bugzilla是Mozilla公司向我们提供的一个开源的免费缺陷跟踪工具,它能够为你建立一个完善的Bug跟踪体系，包括报告Bug、查询Bug记录并产生报表、处理解决、管理员系统初始化和设置四部分 因为Bugzilla是开源的，所以在网上也有很多基于此开发出的在线缺陷跟踪站点；我这里讲的是如何在Linux环境下安装配置Bugzilla，当然，在windows平台下依然可以成功安装使用，这个有兴趣的可以自行去尝试一下，我个人觉得没必要。毕竟将服务端部署在Linux环境下维护起来更加灵活方便一些。 注意：以下操作是在虚拟机上进行的… 准备点什么下载 Red Hat Linux光盘映像文件，提取码：skny Bugzilla光盘映像文件，提取码：3f4f 安装环境 操作系统： 发行版本 Red Hat Linux Realease 9（Shrike） 内核版本 Linux 2.4.20-8 #1 Thu Mar 13 17:54:28 EST 2003 i686 i686 i386 GNU/Linux Perl解释器：Perl-5.8.0-88 数据库：MySQL Ver 12.22 Distrib 4.0.21 ,for pc-linux Web服务器(Apache)：httpd-2.0.40-21 补充说明： 1、如何查看发行版本、内核版本 查看内核版本 123uname -a #显示电脑以及操作系统的相关信息或cat /proc/version #正在运行的内核版本 查看发行版本 123cat /etc/redhat-release或cat /etc/issue 说明一下：内核版本 Linux 2.4.20-8 #1 Thu Mar 13 17:54:28 EST 2003 i686 i686 i386 GNU/Linux其中，2是主版本，4是次版本（偶数代表稳定版本，奇数代表测试版本），20是release version，8是revised version。 2、如何查看perl解释器、MySQL数据库、Apache服务器版本 123rpm -q perl #perl解释器rpm -q httpd #Apache服务器版本mysql --version #MySQL数据库 正式安装配置提前准备安装Apache(httpd服务)注意，这需要挂载至磁盘1，也就是shrike-i386-disc1.iso磁盘下，至于怎么挂载，请参照下面的动图来操作即可。 1mount /dev/cdrom /mnt/cdrom 挂载之后，再去安装httpd服务（因为Linux镜像文件自带httpd服务的安装包，所以没去在线下载，当然了在线下载也是可以的），因为我之前已经安装过一次了，所以，再次安装它会提示我Already installed。 修改IP信息修改IP地址确保虚拟机与主机网络地址相同（前三个字段），这样互相才能ping通。因为我的网络IP地址是随机分配的，所以我这里选择临时修改IP地址方式。当然网上也有更多一些其他方式，自查 1ifconfig eth0 192.168.1.103 netmask 255.255.255.0 第一阶段将磁盘挂起至/mnt/cdrom目录下，挂起步骤如上所示（ps：umount /mnt/cdrom 解开挂载指令） 1mount /dev/cdrom /mnt/cdrom 磁盘挂载后，这个目录/mnt/cdrom下有着这些文件：(3个MySQL.rpm文件、gcc.rpm文件、perl文件夹、buzilla压缩包) 之后我们需要将/mnt/cdrom中的文件复制cp到/tmp目录下 123mkdir /tmp/perlcp /mnt/cdrom/* /tmp/cp /mnt/cdrom/perl/* /tmp/perl/ 解压bugzilla文件包，然后将文件移到/var/www/html/bugzilla目录下（ps:/var/www/html为apache的 docroot，可以在httpd.conf中修改DocumentRoot &quot;/var/www/html&quot;这条语句来换个位置） 注意：记住上面提到的几个目录：/tmp、/tmp/perl、/var/www/html/bugzilla，在整个安装过程中可能会在这几个目录来回切入切出，所以心里要有点数：每个目录下的文件有哪些？是干嘛的？ 第二阶段下面就算是正式进入Perl模块的安装了，很多操作可能是重复的，所以有点耐心吧 主要安装的组件有哪些呢？可以通过这个命令来实时看一下自己还需要安装哪些 AppConfig CGI TimeDate DBI MySQL DBD(要在MySQL装了之后再装) gcc gd GD Template-toolkit GDTextUtil GDGraph Chart perl指令说明perl Makefile.PL(生成Makefile安装文件，没生成功的，删除Makefile文件、再装)、make(编译)、make test(测试能不能安装，有无系统或文件依赖) 、make install(安装)、cd /var/www/html/bugzilla(返回bugzailla看看是否安装成功)、perl checksetup.pl |more(或 ./checksetup.pl|more，看到Appconfig为OK就是安装好了) 注意：make test、cd /var/www/html/bugzilla、perl checksetup.pl |more这些在接下来的安装过程中是用来检查安装情况的，是可以不用每次都敲一遍的。 安装下面的顺序来安装即可 (一)、安装AppConfig-1.56进入/tmp/perl,解压AppConfig-1.56.tar.gz，然后进入AppConfig-1.56文件，perl Makefile.PL、make、make test 、make install、cd /var/www/html/bugzilla、perl checksetup.pl |more (二)、安装CGI.pm-3.05进入/tmp/perl,解压CGI.pm-3.05.tar.gz，然后进入CGI.pm-3.05,perl Makefile.PL、make、make test 、make install、cd /var/www/html/bugzilla、perl checksetup.pl |more (三)、安装TimeDate-1.16进入/tmp/perl,解压TimeDate-1.16.tar.gz，然后进入TimeDate-1.16,perl Makefile.PL、make、make test 、make install、cd /var/www/html/bugzilla、perl checksetup.pl |more (四)、安装DBI-1.45进入/tmp/perl,解压DBI-1.45.tar.gz，然后进入DBI-1.45,perl Makefile.PL、make、make test 、make install、cd /var/www/html/bugzilla、perl checksetup.pl |more 这里就不放截图了哦，过程步骤同上面是类似的。 (五)、安装MySQL-client-4.0.21-0.i386.rpm、MySQL-devel-4.0.21-0.i386.rpm、MySQL-server-4.0.21-0.i386.rpm (六)、安装DBD-mysql-2.9004(要在安装了数据库之后安装)进入/tmp/perl,解压DBD-mysql-2.9004.tar.gz，然后进入DBD-mysql-2.9004.,unset LANG(清掉设置，如有Makefile文件将它删掉)、perl Makefile.PL、make、make test 、make install、cd /var/www/html/bugzilla、perl checksetup.pl |more (七)、安装gcc -3.2.2-5.i386.rpm (八)、安装gd-2.0.33进入/tmp/perl,解压gd-2.0.33.tar.gz，然后进入gd-2.0.33,./configure、make、make check、make install、cd /var/www/html/bugzilla、perl checksetup.pl |more (九)、安装GD-2.30进入/tmp/perl,解压GD-2.30.tar.gz ，然后进入GD-2.30,perl Makefile.PL、make、make test、make install、cd /var/www/html/bugzilla、perl checksetup.pl |more 这里就不放截图了哦，过程步骤同上面是类似的。 (十)、安装Template-Toolkit-2.14进入/tmp/perl,解压Template-Toolkit-2.14.tar.gz，然后进入Template-Toolkit-2.14,perl Makefile.PL、make、make test、make install、cd /var/www/html/bugzilla、perl checksetup.pl |more 这里就不放截图了哦，过程步骤同上面是类似的。 (十一)、安装GDTextUtil -0.86进入/tmp/perl,解压GDTextUtil -0.86.tar.gz，然后进入GDTextUtil -0.86,perl Makefile.PL、make、make test、make install、cd /var/www/html/bugzilla、perl checksetup.pl |more 这里就不放截图了哦，过程步骤同上面是类似的。 (十二)、安装GDGraph-1.43进入/tmp/perl,解压GDGraph-1.43.tar.gz，然后进入GDGraph-1.43,perl Makefile.PL、make、make test、make install、cd /var/www/html/bugzilla、perl checksetup.pl |more 这里就不放截图了哦，过程步骤同上面是类似的。 (十三)、安装Chart-2.3进入/tmp/perl,解压Chart-2.3.tar.gz，然后进入Chart-2.3,perl Makefile.PL、make、make test、make install、cd /var/www/html/bugzilla、perl checksetup.pl |more 这里就不放截图了哦，过程步骤同上面是类似的。 (十四)、验证检查一下目前的安装情况 再次执行perl checksetup.pl |more 命令，看看是否以上组件是否都安装好了 修改配置文件(一)、修改localconfig文件 localconfig文件包含安装时需要设定的很多重要信息，比如比如，$webservergroup=&#39;daemon&#39; 表示apache使用的group；$db_driver = &#39;mysql&#39;;表示使用的数据库；$db_host = &#39;localhost&#39;;表示数据库服务器ip；$db_name = &#39;bugs&#39;;表示数据库名称；$db_user = &#39;bugs&#39;;表示连接数据库的用户名；$db_pass = &#39;bugs&#39;;表示连接数据库的用户密码。 我们需要根据实际情况来手动修改这些配制项。特别的数据库账户，需要我们事先在数据库中创建出这个账户并赋予其相应权限，以便下一步安装时通过通过该用户执行建库脚本！ cd /var/www/html/bugzilla，进入修改bugzilla目录下，vi localconfig，修改localconfig文件 (二)、修改Apache的配置 我们需要通过配置来告诉Apache新安装的bugzilla的位置，并且特别告知它是一个cgi程序，具体配制方法就是在apache的conf/httpd.conf文件中加入以下代码： 说明：AddHandler cgi-script .cgi 指明这个目录是cgi应用；Options Indexes ExecCGI 赋予执行 cgi应用的权力Apache的配置文件 httpd.conf 在/etc/httpd/conf目录下，注意，修改后需重启Apache服务！ 最后一步 按照上面的操作走完之后，将会提示输入管理员邮件地址、真实用户名、密码，至于，bugzilla的安装已经完成。 访问服务器IP/bugzilla（这里的服务器IP就是之前配置的临时IP地址，这个依照你主机的IP地址来定就好，比如我的就是http://192.168.1.103/bugzilla/index.cgi）","tags":[{"name":"实习","slug":"实习","permalink":"https://zhouie.cn/tags/实习/"},{"name":"Bugzilla","slug":"Bugzilla","permalink":"https://zhouie.cn/tags/Bugzilla/"},{"name":"缺陷管理","slug":"缺陷管理","permalink":"https://zhouie.cn/tags/缺陷管理/"}]},{"title":"【分享】 目录文件同步工具","date":"2018-07-12T15:33:21.000Z","path":"posts/201807121/","text":"将两个文件夹内的文件内容进行分析，可选择性的让两个文件夹内容保存一致，可以称为一种同步机制。这种实现各个物理设备间的数据及时同步更新，在有些时候，能够为你节省很多时间和操作，同时免去一些不必要的失误与遗忘。比如说：同步U盘上的数据和软件设置，查找软件版本区别和更新，同步FTP上的数据。网上有这样一些案例： 案例1：工作中有很多的资料，保存在公司的电脑硬盘上，但是经常要带回去加班，总是会将资料拷贝到移动硬盘中，但是在家做完以后，回到公司有的文件会忘记覆盖，搞得经常会重复劳动。 案例2：自从买了新的台式机之后，为了兼顾到外出常带着的PC，如何将一些资料档案的同步问题着实令人伤脑筋。以人工的方式在两台电脑上反复复制，很容易忘记哪一台电脑缺少了哪些资料文档。 当然了，网络云服务的逐渐普及开来，也削减了这种不便，但这并不影响我坚持使用下面的一些本地数据同步工具。 PathSync &para;下载地址 官网地址 百度云分享（提取码：a2py） PathSync是什么12345an interactive directory (path) synchronizer for windowsPathSync can analyze two directories and show the user a list of differences between the directories. The user can select what actions should occur (which files to overwrite, which to delete, which to ignore), and allow PathSync to synchronize. PathSync provides nifty statistics during the synchronization, so that the user is never wondering how much time is left, etc. PathSync is GPL free software, each download package includes the source. PathSync 是由Cockos 出品的一款小应用，估计他们本来也就是随便玩玩的，结果是无心插柳柳成荫，反而将Pathsync做成了一个体积小巧，功能强大的同步工具。从04年到现在，已经陆续推出了10个版本，最后一次更新是在2015年12月28日。 其中，Cockos 是 Justin Frankel (开发 Winamp 的那个家伙) 成立的公司，开发的产品也是和音频有关的。 另外，PathSync 是一款GPL协议免费软件，每一个下载安装包都应当包含源码。 SyncBack &para;下载地址 官网地址 官网同时提供了付费版本及免费版本的下载，个人建议一般使用者使用免费版本的就足够了。 SyncBack是什么SyncBack是一套很强大的档案备份及同步软体，对于同步的规则定义的很详细，可以很容易的依需要做设定 SyncBack不止对于同步本机的资料夹、档案表现相当良好, 对于FTP 上的的档案及资料夹的同步也是没问题的，可以节省很多时间","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"cockos","slug":"cockos","permalink":"https://zhouie.cn/tags/cockos/"},{"name":"文件同步","slug":"文件同步","permalink":"https://zhouie.cn/tags/文件同步/"}]},{"title":"【软件测试】 Selenium环境搭建-Eclipse 简易教程","date":"2018-07-10T23:30:11.000Z","path":"posts/201807101/","text":"写在前面 selenium是可以支持多平台的，本身的环境安装也是很简单的 学习的测试脚本编写是Java语言，所以之后要将selenium与eclipse集联起来 将selenium与eclipse集联起来也是这次配置体验中可能会出现的（一些）难点 对软件测试还算不上熟练掌握，如果错误，欢迎指正 安装（配置）步骤说明 安装配置好JAVA环境（JDK 1.8以上）以及Eclipse（建议使用高版本） 安装配置好mvn（Maven）本地环境 Eclipse安装Maven插件 准备好与浏览器对应的WebDriver 在Eclipse中新建Maven Projects -&gt; pom.xml文件中安装selenium-java dependency（依赖） -&gt; 编写一个简易的测试脚本代码演示 其中，selenium与eclipse集联的关键步骤在于第5步，后面也会提到。 安装配置JAVA环境下载与安装这里提供一下一直在用版本号为”1.8.0_92”的JDK安装包下载链接 JDK-1.8.0_92，提取密码：929a 特别注意：可以不用我这里所提供的JDK安装包，去Oracle 官网去找相应版本JDK，那么你所下载的JDK版本也要保证至少要1.8以上 相信不少朋友的电脑上都安装配置有JAVA环境（JDK），那么可以通过Win + R -&gt; cmd -&gt; java -version 来查看是否安装了JAVA环境以及相应JDK版本 至于安装JDK的步骤，一直默认Next即可，没有什么需要特别注意的。 配置本机JAVA环境 安装完成后，右击”我的电脑”，点击”属性”，选择”高级系统设置” 选择”高级”选项卡，点击”环境变量” 然后就会出现如下图所示的画面： 在”系统变量“中设置3项属性，JAVA_HOME,PATH,CLASSPATH(大小写无所谓),若已存在则点击”编辑”，不存在则点击”新建”。变量设置参数如下： 变量名 变量值 JAVA_HOME C:\\Program Files (x86)\\Java\\jdk1.8.0_91 //根据自己的实际路径配置 CLASSPATH .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;//记得前面有个”.” Path %JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin; 注意：在 Windows10 中，因为系统的限制，path 变量只可以使用 JDK 的绝对路径。%JAVA_HOME% 会无法识别，导致配置失败。如下所示： C:\\Program Files (x86)\\Java\\jdk1.8.0_91\\bin;C:\\Program Files (x86)\\Java\\jdk1.8.0_91\\jre\\bin; 如果使用1.5以上版本的JDK，不用设置CLASSPATH环境变量，也可以正常编译和运行Java程序。 测试JDK是否安装成功 Win + R -&gt; cmd 键入命令: java -version、java、javac 几个命令，出现以下信息，说明环境变量配置成功 Eclipse IDE至于Eclipse IDE，网上版本有很多，不过我个人还是建议到Eclipse官网下载安装，功能完善还很放心 考虑到高版本的Eclipse IDE自带了mvn插件，不用安装能免去一些步骤，建议去安装较高版本的 在eclipse的4.4以上的版本加入了对maven的支持，即不需要安装maven插件，但对4.4以下的版本需要自己安装插件 这里提供一个Eclipse压缩文件（该Eclipse版本号为：Neon.3 Release-4.6.3，解压打开即可使用） eclipse-jee-neon-R-win32-x86_64，提取密码：g440。 安装配置mvn（Maven）本地环境下载与安装这里提供一个Maven程序包：apache-maven-3.3.9，提取密码：3xwe。当然，也可前往https://maven.apache.org/download.cgi下载编译过的版本 将文件解压到D:\\Program Files\\apache-maven-3.3.9目录下，文件目录结构如下所示： bin目录：该目录包含了mvn运行的脚本，这些脚本用来配置Java命令； boot目录：只包含一个文件：plexus-classworlds-2.5.2.jar，是一个类加载器框架，相当于java类的默认加载器。 conf目录：包含了settings.xml，一个重要的配置文件，可以全局定制Maven的行为。 lib目录：该目录包含了所有Maven运行时需要的Java类库。 LICENSE.txt NOTICE.txt：记录了Maven包含的第三方软件。 README.txt 同JDK环境配置一样，新建环境变量 MAVEN_HOME，赋值D:\\Program Files\\apache-maven-3.3.9 新建环境变量 MAVEN ，赋值 %MAVEN_HOME%\\bin 新建环境变量 MAVEN_OPTS ，赋值 -Xms256m -Xmx512m 编辑环境变量Path，增加%MAVEN%; 测试mvn是否安装成功 Win + R -&gt; cmd 键入命令: mvn -v，出现以下信息，说明mvn环境配置成功 配置Maven本地仓库 在E盘目录下新建maven-repository文件夹，该目录用作maven的本地仓库。 打开D:\\Program Files\\apache-maven-3.3.9\\conf\\settings.xml文件，查找下面这行代码： /path/to/local/repo localRepository节点默认是被注释掉的，需要把它移到注释之外，然后将localRepository节点的值改为我们在上面创建的目录E:\\maven-repository，这里记得写成绝对路径，你所下载的包就会放在你填写的目录下了。 说明：localRepository节点用于配置本地仓库，本地仓库其实起到了一个缓存的作用，它的默认地址是 C:\\Users\\计算机用户名\\.m2，我们一般会自己定义一个文件夹，让maven的依赖包装在你所想要放在文件夹下，便于以后自己的维护和管理。当我们从maven中获取jar包的时候，maven首先会在本地仓库中查找，如果本地仓库有则返回；如果没有则从远程仓库中获取包，并在本地仓库中保存。此外，我们在maven项目中运行mvn install，项目将会自动打包并安装到本地仓库中。 仓库镜像的配置 maven自带的仓库是国外的maven官方的一个仓库http://repo1.maven.org/maven2/，一般不翻墙的话速度非常慢 在setting.xml中找到&lt;mirrors&gt;…………&lt;/mirrors&gt;的位置，在&lt;mirrors&gt;…………&lt;/mirrors&gt;中间加入你想要的仓库的标签，这里推荐几个国内网速比较快，资源比较全的仓库 1、阿里云的maven仓库 123456&lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; 2、开源中国的仓库 123456789101112&lt;mirror&gt; &lt;id&gt;nexus-osc&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Nexus osc&lt;/name&gt; &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;nexus-osc-thirdparty&lt;/id&gt; &lt;mirrorOf&gt;thirdparty&lt;/mirrorOf&gt; &lt;name&gt;Nexus osc thirdparty&lt;/name&gt; &lt;url&gt;http://maven.oschina.net/content/repositories/thirdparty/&lt;/url&gt; &lt;/mirror&gt; 运行mvn help:system命令验证一下，运行情况应该如下图所示，如果前面的配置成功，那么E:\\maven-repository会出现一些文件。 这里补充一下，要不要设置HTTP代理呢？ 如果上网没使用代理，这里则不需要配置。但是之前帮别的同学在Eclipse中安装Maven插件时失败了好多次，我也不知道是不是之前没有设置HTTP代理的原因，所以保险起见，最好还是配置一下吧 首先在cmd中输入：ping repo1.maven.org，如果不能ping通，则一定要先设置一下代理，设置的方式为： 进入Maven目录下，找到settings.xml文件，然后在&lt;proxies&gt;标签中加入如下信息： 123456789101112&lt;proxies&gt; &lt;proxy&gt; &lt;id&gt;my-proxy&lt;/id&gt; &lt;active&gt;true&lt;/active&gt; &lt;protocol&gt;http&lt;/protocol&gt; &lt;host&gt;114.212.80.250&lt;/host&gt; &lt;port&gt;80&lt;/port&gt; &lt;username&gt;PARK&lt;/username&gt; &lt;password&gt;****&lt;/password&gt; &lt;nonProxyHosts&gt;www.park.com|*.host.com&lt;/nonProxyHosts&gt;&lt;/proxy&gt; 标签名 含义 id 代理ID，标识代理 active 设置代理是否启用 protocol 代理使用的协议 username 连接代理的用户名，如此代理不需要用户名，则可把此标签删掉 password 连接代理的密码，同上 host 代理的网址 port 代理使用的端口 其中，&lt;host&gt;, &lt;username&gt;, &lt;password&gt;标签中改为自己的IP地址，主机名和密码即可 配置Eclipse的Maven环境对于一些低版本的或是功能不完整的Eclipse IDE，在做这一步之前，可能就需要手动去Eclipse安装Maven插件，主要有以下两种在线安装方式： 方式一、在线安装这可以分为两种方式来下载安装（1）、Install New Software 打开eclipse，点击help–&gt;Install New Software,然后输入要下载插件的链接地址：http://m2eclipse.sonatype.org/sites/m2e，如下图 勾选择要下载的项，点击下一步进行下载。下载完成会自动安装。安装速度跟你自身网速和服务器有关。 （2）、Eclipse Marketplace 打开eclipse，点击help–&gt;Eclipse Marketplace,然后输入maven回车搜索，选择以下勾选的插件”Maven Integration for Eclipse (Luna)“，点击Install安装参考网站：http://marketplace.eclipse.org/content/maven-integration-eclipse-luna 方式二、离线安装eclipse-maven3-plugin.zip，提取密码：x5hq。 这也可以分为两种方式来下载安装 （1）、link方式（自定义方式） 在你的 eclipse安装的根目录下创建两个文件夹：links，mavenPlugins（文件夹名称可自定义），把eclipse-maven3-plugin.zip解压后的features和plugins文件夹放到mavenPlugins文件夹下（必须如此，注意解压后文件夹的嵌套情况）。 在 links目录下创建一个maven.link（文件名称可自定义）文件，打开并输入：path=mavenPlugins文件夹绝对路径（需要注意文件夹路径中是”/“或者”\\“ 而不是”\\” ）。 重启 eclipse后，再次打开Window ---&gt; Preferences会发现一个多了一个选项Maven，说明Maven插件安装成功了。 （2）、直接粗暴的方式 将解压后的子文件夹features和plugins的jar包文件分别导入Eclipse安装目录下的features和plugins文件夹内，然后重启Eclipse就可以在Preferences中看到Maven选项了，即Maven插件配置成功。 保证Eclipse有了Maven插件后，那么就按照下面的步骤来 配置Maven: 在windows -&gt; preferences中找到maven选项，下图 找到maven -&gt; installations，选择add按钮，找到的maven的对应路径，如下 eclipse中更新配置文件 找到User settings，修改配置文件为之前已经修改好了的配置文件settings.xml 至此，Maven和eclipse的集成已经完成！ 下载浏览器对应的Driver这里需要说明的是，Driver对应IE浏览器、Mozilla Firefox浏览器、Chrome Google浏览器可分为3种 下面三个链接分别对应IE浏览器、Firefox浏览器、Google浏览器的driver下载： Selenium.WebDriver.IEDriver mozilla-geckodriver chromedriver、chromedriver2 注意：为了避免浏览器与Driver版本上的不匹配，所以建议大家下载相应的最新版driver，并将浏览器更新至最新版，这样就可以避免出现不必要的错误。 下载好对应浏览器的Driver之后，将其解压放在浏览器安装目录下。比如，我用的是google浏览器，所以对应下载的是最高版本的chromedriver.exe，解压后放在对应Google浏览器的安装目录下，如下图所示 Eclipse中新建Maven项目并安装selenium依赖 打开eclipse，点击File –&gt; New -&gt; Project,输入Maven搜索，选择Maven Project 一直点击Next（3次），填入相关名称信息，点击Finish完成。 如果没有什么问题的话，侧边栏Project Explorer中会出现一个正常的文件夹（这里的正常意味着未爆红，并且有Maven Dependencies这样一个目录） 打开新建Maven项目xtu2018下的pom.xml文件，搜索定位到&lt;dependencies&gt;标签处 去http://mvnrepository.com/maven公共库网站搜索selenium，选择第一项Selenium Java，点击进入，建议选择最新版本（也可以结合用户数参考） 比如我这里选择了Selenium Java 3.13.0，那么点击3.13.0进入后，复制页面下方Maven对应代码块，粘贴至pom.xml文件对应位置并保存修改。 pom.xml文件修改前： 12345678&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; pom.xml文件修改后： 123456789101112131415&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java --&gt; &lt;dependency&gt; &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt; &lt;artifactId&gt;selenium-java&lt;/artifactId&gt; &lt;version&gt;3.13.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 在对pom.xml修改后并保存，Maven项目文件下的Maven Dependencies文件目录下会多出很多这样的*.jar包，如果是第一次创建Maven项目，那么加入这些*.jar包的时间要求很长，需要耐心等待才能看到这样的变化，当然也不乏会出一些问题，当然，这都是后话… 如果这些*.jar包加入正常，没出什么问题，也就意味着selenium依赖安装完成（其实这在上面截图中的*.jar包中可以找到），那么就可以很愉快地直接进入代码编写阶段了… 编写一个简易的测试脚本代码演示 移除掉src/test/java下的com.xtu2018包 并在src/test/java下新建一个包packagecom.xtu2018.one，再在该包下新建一个类demo01.java 编写一段如下所示的Demo代码 123456789101112131415161718192021222324252627282930313233package com.xtu2018.one;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.chrome.ChromeDriver;public class demo01 &#123; public static void main(String[] args) throws Exception &#123; // TODO Auto-generated method stub //1、找到driver路径 System.setProperty(\"webdriver.chrome.driver\", \"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chromedriver.exe\"); //2、创建一个浏览器 WebDriver driver = (WebDriver) new ChromeDriver(); //3、打开URL driver.get(\"http://www.baidu.com\"); //4、浏览器窗口最大化 driver.manage().window().maximize(); //5、在搜索框输入内容 driver.findElement(By.id(\"kw\")).sendKeys(\"12306\"); WebElement btn =driver.findElement(By.id(\"su\")); btn.click(); //延时等待 Thread.sleep(3000); //6、后退 driver.navigate().back(); //7、前进 Thread.sleep(3000); driver.navigate().forward(); Thread.sleep(3000); driver.close(); &#125;&#125;","tags":[{"name":"selenium","slug":"selenium","permalink":"https://zhouie.cn/tags/selenium/"},{"name":"UI自动化","slug":"UI自动化","permalink":"https://zhouie.cn/tags/UI自动化/"},{"name":"实习","slug":"实习","permalink":"https://zhouie.cn/tags/实习/"}]},{"title":"【分享】 屏幕截图与录屏工具","date":"2018-06-25T17:33:21.000Z","path":"posts/201806252/","text":"有没有办法把多页的Word或PDF文档保存成一整张图片？ 思路一：把Word存为网页格式，用浏览器打开，然后用浏览器插件截取整个网页。确实可以这样截屏，但是在Word转为网页后，很多格式和排版可能会发生改变，效果并不理想。 思路二：用电脑上已有的ABBYY打开一个PDF文档，然后另存为图片格式。这样确实也可以，只不过每一页文档都被单独保存成了一张图片，而不是一整张大图。 这里，主要介绍一款还不错的软件—— FastStone Capture, 它的“捕获滚动窗口”功能能够较好地满足上述需求 下载地址：百度云分享（提取码：rq1t） 说明：下载解压后，直接双击“FSCapture.exe”即可运行，也可以右键“发送到”+“桌面快捷方式”,方便使用； 功能列表见下图 下面主要谈谈这两个特殊一点的功能：1、 滚动截屏 2、 视频录制：尝试了一下，整体效果还是蛮不错的。 录的视频还算很清晰，视频格式是.WMV； 支持鼠标高亮和点击声； 支持录制声音，同时录制麦克风和系统声音； 视频录制后，支持编辑，尽管仅限于更改尺寸。 注意：对word或pdf滚动截图，可能会出现下面这种不和谐的情况 这是因为，翻页效果太强烈，导致截图内容有折叠。这个时候，大家可以去尝试将word或pdf文件导出为XPS文件，之后再滚动截图就不会出现这种不完美了。","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"截图","slug":"截图","permalink":"https://zhouie.cn/tags/截图/"},{"name":"录屏","slug":"录屏","permalink":"https://zhouie.cn/tags/录屏/"}]},{"title":"【分享】 Gif相关工具","date":"2018-06-25T15:25:39.000Z","path":"posts/201806251/","text":"LICEcapLICEcap 是一款屏幕录制工具，支持导出GIF动画图片格式，轻量级、使用简单，录制过程中可以随意改变录屏范围。![](https://i.loli.net/2019/02/24/5c71834d60cbc.gif 下载地址： 官方地址 百度云分享（提取码：36ru） 说明：运行后会以窗口的方式显示在桌面，拖动选取一个合适的大小范围，点击Record选取保存路径就开始录屏了。LICEcap在录屏过程中可以随时拖动窗口改变录屏范围，Stop过后即自动保存为GIF格式。 注意： 录屏暂停时（pause）可以插入文本（Insert），但目前仅支持英文插入（中文无效）。 安装路径不可以有中文，否则无法保存。 GiFResizer大家可能都碰到这样一个难题：动态图片尺寸的调整。使用一般的图片处理工具，缩放后的动态图片可能就变成了静态图片。 下载地址： 百度云分享（提取码：qpym） 说明：GiF Resizer，它的界面非常简单干脆，既能调整GiF动画图片的尺寸，又能完美保留图片的动态效果。 注意： 建议修改尺寸时，勾选“保持比例”，转换后显得更加自然。 想保留高画质的话，请勾选“高质量”（转换稍微会慢一点）。","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"cockos","slug":"cockos","permalink":"https://zhouie.cn/tags/cockos/"},{"name":"Gif","slug":"Gif","permalink":"https://zhouie.cn/tags/Gif/"}]},{"title":"【分享】 自定义属于自己的U盘图标","date":"2018-06-19T18:27:49.000Z","path":"posts/201806191/","text":"怎么样？想不想也可以自定义自己的U盘图标？其实，这并不难 来来来，follow me… ① 在网上下载ICO格式的图标，也可以将自己喜欢的图片转换成ICO格式，并将图片命名为123.ico； ② 点击这里打开记事本，复制以下两行代码，并另存为autorun.inf；12[autorun]ICON=123.ico,0 说明：以上代码中的123.ico，就是第①步中准备的ICO图标名，你也可以自定义命名，不过要保持上下文一致。 ③ 将上面两步中准备的图标123.ico和文件autorun.inf复制到U盘根目录即可。 注意： 为了避免不小心被改动或删除，大家可以将上面的两个文件的属性设置为“只读”和“隐藏”； 如果日后还需要修改图标的话，只需要替换U盘中的123.ico即可； 按照上面三步操作之后，U盘图标可能还是没有什么改变。其实，你只需要把U盘安全退出，再重新插上就可以显示了。万一还是不行，清理下电脑垃圾，并重启电脑，就一定会有图标的。","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"U盘图标","slug":"U盘图标","permalink":"https://zhouie.cn/tags/U盘图标/"}]},{"title":"【分享】 图片处理相关工具","date":"2018-06-17T08:17:39.000Z","path":"posts/201806171/","text":"注：熟练使用PS的高手，请忽略本文。 图片压缩1、 在线压缩这里有这样一个网站提供这项服务：https://tinypng.com/ 说明：支持图片格式.png和.jpg；单张图片大小不得超过5M；图片总数不能超过20个；不支持修改图片尺寸。 2、 本地压缩软件 这里主要分享这款软件—— Caesium图片压缩软件 下载地址： 百度云分享（提取码：t7ez） 说明： 支持图片格式.png、.jpg 和.bmp； 支持批量处理，文件总数和大小无限制； 可修改图片尺寸。 软件的使用并不难，就不多说了，主要提醒注意一点：一定要注意在点击“压缩”之前，确认选择好“输出文件夹”，要和原图片位置不一样，不然的话，会覆盖原图！！！ 下图是压缩后的情况：（原图16.2Mb，压缩后为289Kb） 图片添加水波纹倒影给图片添加水波纹倒影，效果如下图： 还可以自定义波纹类型、波纹速度，以及倒影高度哦！ 下载地址： 百度云分享（提取码：st2f） 改图宝最快速、最简单的在线修改图片工具。 改图宝要可以对各种数码照片、图片进行修改大小、压缩文件大小和局部剪切的操作，目前主要提供了修改大小和更改尺寸的两种服务。 修改大小可以把你的图片大改为800像素以内的任意大小。 同样，更改尺寸也是可以任意设定不超过图片范围的尺寸，特别提供了1寸、两寸、正方形网络头像和公务员考试报名等一些常见尺寸的快捷方式供大家使用； 除在线改图外，改图宝也提供了生成印章、二维码、条码、文字识别、文档转换等服务。除了免费的在线自助改图外，也提供付费的专业在线改图网站以及人工改图等附加服务。 官方网址：http://www.gaitubao.com/","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"图片处理","slug":"图片处理","permalink":"https://zhouie.cn/tags/图片处理/"}]},{"title":"【复习】 人工智能入门复习总结","date":"2018-06-11T13:03:51.000Z","path":"posts/201806111/","text":"写在前面 本文严禁转载，只限于学习交流。 课件分享在这里了。 还有人工智能标准化白皮书(2018版)也一并分享了。 绪论人工智能的定义与发展定义 一般解释：人工智能就是用 人工的方法在 机器（计算机）上实现的智能，或称 机器智能； 人工智能(学科)：从学科的角度来说，人工智能是一门研究如何 构造智能机器或智能系统，使之能模拟、延伸、扩展人类智能的学科； 人工智能(能力)：从智能能力的角度来说，人工智能是智能机器所执行的通常 与人类智能有关的智能行为，如判断、推理、证明、识别、感知、理解、通信、设计、思考、规划、学习和问题求解等思维活动。 【补充】 2018年1月发布的人工智能标准化白皮书上关于“人工智能的概念”有如下一段详尽描述（仅供参考）： 2.1.2 人工智能的概念 人工智能作为一门前沿交叉学科，其定义一直存有不同的观点：《人工智能——一种现代方法》中将已有的一些人工智能定义分为四类：像人一样思考的系统、像人一样行动的系统、理性地思考的系统、理性地行动的系统。维基百科上定义“人工智能就是机器展现出的智能”，即只要是某种机器，具有某种或某些“智能”的特征或表现，都应该算作“人工智能”。大英百科全书则限定人工智能是数字计算机或者数字计算机控制的机器人在执行智能生物体才有的一些任务上的能力。百度百科定义人工智能是“研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学”，将其视为计算机科学的一个分支，指出其研究包括机器人、语言识别、图像识别、自然语言处理和专家系统等。 本白皮书认为，人工智能是利用数字计算机或者数字计算机控制的机器模拟、延伸和扩展人的智能，感知环境、获取知识并使用知识获得最佳结果的理论、方法、技术及应用系统。 人工智能的定义对人工智能学科的基本思想和内容作出了解释，即围绕智能活动而构造的人工系统。人工智能是知识的工程，是机器模仿人类利用知识完成一定行为的过程。根据人工智能是否能真正实现推理、思考和解决问题，可以将人工智能分为弱人工智能和强人工智能。 弱人工智能是指不能真正实现推理和解决问题的智能机器，这些机器表面看像是智能的，但是并不真正拥有智能，也不会有自主意识。迄今为止的人工智能系统都还是实现特定功能的专用智能，而不是像人类智能那样能够不断适应复杂的新环境并不断涌现出新的功能，因此都还是弱人工智能。目前的主流研究仍然集中于弱人工智能，并取得了显著进步，如语音识别、图像处理和物体分割、机器翻译等方面取得了重大突破，甚至可以接近或超越人类水平。 强人工智能是指真正能思维的智能机器，并且认为这样的机器是有知觉的和自我意识的，这类机器可分为类人（机器的思考和推理类似人的思维）与非类人（机器产生了和人完全不一样的知觉和意识，使用和人完全不一样的推理方式）两大类。从一般意义来说，达到人类水平的、能够自适应地应对外界环境挑战的、具有自我意识的人工智能称为“通用人工智能”、“强人工智能”或“类人智能”。强人工智能不仅在哲学上存在巨大争论（涉及到思维与意识等根本问题的讨论），在技术上的研究也具有极大的挑战性。强人工智能当前鲜有进展，美国私营部门的专家及国家科技委员会比较支持的观点是，至少在未来几十年内难以实现。 靠符号主义、连接主义、行为主义和统计主义这四个流派的经典路线就能设计制造出强人工智能吗？其中一个主流看法是：即使有更高性能的计算平台和更大规模的大数据助力，也还只是量变，不是质变，人类对自身智能的认识还处在初级阶段，在人类真正理解智能机理之前，不可能制造出强人工智能。理解大脑产生智能的机理是脑科学的终极性问题，绝大多数脑科学专家都认为这是一个数百年乃至数千年甚至永远都解决不了的问题。 通向强人工智能还有一条“新”路线，这里称为“仿真主义”。这条新路线通过制造先进的大脑探测工具从结构上解析大脑，再利用工程技术手段构造出模仿大脑神经网络基元及结构的仿脑装置，最后通过环境刺激和交互训练仿真大脑实现类人智能，简言之，“先结构，后功能”。虽然这项工程也十分困难，但都是有可能在数十年内解决的工程技术问题，而不像“理解大脑”这个科学问题那样遥不可及。 仿真主义可以说是符号主义、连接主义、行为主义和统计主义之后的第五个流派，和前四个流派有着千丝万缕的联系，也是前四个流派通向强人工智能的关键一环。经典计算机是数理逻辑的开关电路实现，采用冯•诺依曼体系结构，可以作为逻辑推理等专用智能的实现载体。但要靠经典计算机不可能实现强人工智能。要按仿真主义的路线“仿脑”，就必须设计制造全新的软硬件系统，这就是“类脑计算机”，或者更准确地称为“仿脑机”。“仿脑机”是“仿真工程”的标志性成果，也是“仿脑工程”通向强人工智能之路的重要里程碑。 起源与发展人工智能始于20世纪50年代，50多年来，人工智能走过了一条起伏和曲折的发展道路。回顾历史，可以按照不同时期的主要特征，将其产生与发展过程分为5个阶段。 1、孕育期（1956年前） 2、形成期（1956-1970年） 1956年夏，麦卡锡 (J.McCarthy，数学家、计算机专家)、明斯基(M.L.Minsky，哈佛大学数学家、神经学家)、洛切斯特(N.Lochester，IBM公司信息中心负责人)、香农(C.E.Shannon，贝尔实验室信息部数学家和信息学家)邀请莫尔(T.more)、塞缪尔(A.L.Samuel) 、塞尔夫里奇(O.Selfridge)、索罗蒙夫(R.Solomonff)、纽厄尔(A.Newell)、西蒙(H.A.Simon)在 美国达特茅斯(Dartmouth)大学举办了长达历时两个月的研讨会。会上，麦卡锡正式使用“人工智能AI”这一术语。这是人类历史上首次第一次人工智能研讨会，标志着人工智能学科的诞生。 3、暗淡期（1966-1974年） 失败的预言给人工智能的声誉造成重大伤害60年代初，西蒙预言：10年内计算机将成为世界冠军、将证明一个未发现的数学定理、将能谱写出具有优秀作曲家水平的乐曲、大多数心理学理论将在计算机上形成。 挫折和困境 在博弈方面：塞缪尔的下棋程序在与世界冠军对弈时，5局败了4局。 在定理证明方面：发现鲁宾逊归结法的能力有限。当用归结原理证明两个连续函数之和还是连续函数时，推了10万步也没证出结果。 在问题求解方面：对于不良结构，会产生 组合爆炸问题。 在机器翻译方面：发现并不那么简单，甚至会闹出笑话。例如，把“心有余而力不足”的英语句子翻译成俄语，再翻译回来时竟变成了“酒是好的，肉变质了” 在神经生理学方面：研究发现人脑有1011-12以上的神经元，在现有技术条件下用机器从结构上模拟人脑是根本不可能的。 在其它方面：人工智能也遇到了不少问题。在英国，剑桥大学的詹姆教授指责“人工智能研究不是骗局，也是庸人自扰” 。从此，形势急转直下，在全世界范围内人工智能研究陷入困境、落入低谷。 Minsky的批评1969年 M. Minsky 和 S.Papert 在《感知机》一书中指出了感知机无法解决异或（XOR）问题的缺陷，并表示出对这方面研究的悲观态度，使得神经网络的研究从兴起期进入了停滞期。该批评对人工智能的发展造成了重要的影响 在以后的二十年，感知机的研究方向被忽视 基于符号的知识表示成为主流 基于逻辑的推理成为主要研究方向 当时的人工智能存在三个方面的局限性 知识局限性：早期开发的人工智能程序中包含了太少的主题知识，甚至没有知识，而且只采用简单的句法处理。 解法局限性：求解方法和步骤的局限性使得设计的人工智能程序在实际上无法求得问题的解答，或者只能得到简单问题的解答，而这种简单问题并不需要人工智能的参与。 结构局限性：用于产生智能行为的人工智能系统或程序在一些基本结构上严重局限，如没有考虑不良结构，无法处理组合爆炸问题，因而只能用于解决比较简单的问题，影响到人工智能系统的推广应用。 4、知识应用期（ 1970-1988年） 5、集成发展期（1986年至今） 人工智能具体的发展历程图示如下： 这两年人工智能得到了突飞猛进的发展，实现这种发展的基本条件有三个： 大数据的积累 计算能力的提升 理论算法的革新 各种认知观目前人工智能主要有以下三个学派： 符号主义（Symbolicism）: 基于物理符号系统假设和有限合理性原理（逻辑） 符号主义观点认为：智能的基础是知识，其核心是知识表示和知识推理；知识可用符号表示，也可用符号进行推理，因而可以建立基于知识的人类智能和机器智能的统一的理论体系。 连接主义（Connectionism）: 基于神经网络及其间的连接机制与学习算法（仿生） 连接主义观点认为：思维的基元是神经元，而不是符号；思维过程是神经元的联结活动过程，而不是符号运算过程；反对符号主义关于物理符号系统的假设。 行为主义（Actionism）: 基于控制论及感知—动作型控制系统（进化） 行为主义观点认为：智能取决于感知和行动，提出了智能行为的“感知—动作”模型；智能不需要知识、不需要表示、不需要推理；人工智能可以像人类智能那样逐步进化。 此外，还有一种由钟义信院士提出的一种认知学派： 机制主义（mechanism）：结构（连接）主义、功能（符号）主义、行为主义的和谐统一。 几种学派各自不足之处： 符号主义的不足(功能模拟法/认知学观点) 在用符号表示知识的概念时，有效性很大程度上取决于符号表示的正确性和准确性 将知识概念转换成符号时，可能丢失一些重要信息 难于对含噪信息、不确定性信息和不完全性信息进行处理 连接主义的不足(结构模拟法/生物学观点) 由于大脑的生理结构和工作机理还远未搞清楚，因而现在只能对人脑的局部进行模拟或进行近似模拟 不适合模拟人的逻辑思维过程 受大规模人工神经网络制造的制约 尚不能满足人脑完全模拟的要求 行为主义的不足 难以获得高级智能控制行为 研究目标与内容研究目标远期目标：构造出可以实现人类思维活动和智力功能的智能系统。近期目标：使现有的计算机更聪明更有用，使它不仅能够进行一般的数值计算和非数值信息的处理，而且能够运用知识去处理问题，能够模拟人类的智能行为。 研究的基本内容1、认知建模认知：可一般地认为是和情感、动机、意志相对应的理智或认识过程，或者是为了一定的目的，在一定的心理结构中进行的信息加工过程。 2、知识表示：基础 3、知识推理：实现问题求解 4、知识应用：目的 知识表示、知识推理、知识应用是传统人工智能的三大核心研究内容。 5、机器感知：就是要让计算机具有类似于人的感知能力，如视觉、听觉、触觉、嗅觉、味觉……，是机器获取外部信息的基本途径 相当于智能系统的输入部分 机器视觉（或叫计算机视觉）：就是给计算机配上能看的视觉器官，如摄像机等，使它可以识别并理解文字、图像、景物等 机器听觉（或叫计算机听觉）：就是给计算配上能听的听觉器官，如话筒等，使计算机能够识别并理解语言、声音等。 模式识别：对客体的识别与分类 自然语言理解：实现人机对话 机器翻译 6、机器思维：机器思维是让计算机能够对感知到的外界信息和自己产生的内部信息进行思维性加工，包括逻辑思维、形象思维和灵感思维，涉及信息的表示，组织，积累，管理，搜索，推理等过程。 7、机器学习： 让计算机能够像人那样自动地获取新知识，并在实践中不断地完善自我和增强能力。 是机器获取智能的途径 学习是一个有特定目的的知识获取过程，学习的本质是对信息的理解与应用 8、机器行为： 让计算机能够具有像人那样地行动和表达能力，如走、跑、拿、说、唱、写画等。 相当于智能系统的输出部分 9、智能系统构建 无论是人工智能的近期目标还是远期目标，都需要建立智能系统或构造智能机器 需要开展对系统模型、构造技术、构造工具及语言环境等研究 应用领域问题求解、机器学习、自然语言理解、专家系统、模式识别、计算机视觉、机器人学、博弈、计算智能、人工生命、自动定理证明、自动程序设计、智能控制、智能检索、智能调度与指挥、智能决策支持系统、人工神经网络、数据挖掘与知识发现…… 课后习题1-1 什么是人工智能？是从科学与能力两方面加以说明。1-3 在人工智能的发展过程中，有哪些思想和思潮起到了重要作用？1-5 人工智能有哪些学派？他们的认知观是什么？现在这些学派的关系如何？1-9 人工智能的基本研究方法有哪些类？1-10 人工智能的主要研究和应用领域是什么？其中，哪些是新的研究热点？ 知识表示与推理知识表示方法 知识的一般概念 知识是人们在改造客观世界的实践中积累起来的 认识和 经验。其中，认识与 经验可以这样定义： 认识：包括对事物现象、本质、属性、状态、联系等的认识 经验：包括解决问题的微观方法和宏观方法 微观方法：如步骤、操作、规则、过程、技巧等 宏观方法：如战略、战术、计谋、策略等 人工智能系统中的知识 一个智能程序高水平的运行需要有关的 事实知识、 规则知识、 控制知识和 元知识。 事实知识 ：是有关问题环境的一些事物的知识，常以“…是…”的形式出现。 如事物的分类、属性、事物间关系、科学事实、客观事实等。 事实是静态的为人们共享的可公开获得的公认的知识，在知识库中属低层的知识，如：雪是白色的、鸟有翅膀、张三李四是好朋友、这辆车是张三的…… 规则知识 ：是有关问题中与事物的行动、动作相联系的因果关系知识，是动态的，常以“如果…那么…” 形式出现。 控制知识 ：是有关问题的求解步骤、技巧的知识，告诉人们怎么做一件事，也包括当有多个动作同时被激活时应选哪一个动作来执行的知识。控制知识常与程序结合在一起出现，如一个问题求解的算法可以看做是一种知识表示。 元知识 ：是有关知识的知识，是知识库中的高层知识。包括怎样使用规则、解释规则、校验规则、解释程序结构等知识。 元知识与控制知识是有重迭的，对一个大的程序来说，以元知识或说元规则形式体现控制知识更为方便，因为元知识存于知识库中，而控制知识常与程序结合在一起出现，从而不容易修改。 知识表示 研究用机器表示知识的可行性、有效性的一般方法，是一种数据结构与控制结构的统一体，既考虑知识的存储又考虑知识的使用。 知识表示的要求： 表示能力：能否正确、有效地表示问题。包括：表范围的广泛性、领域知识表示的高效性、对非确定性知识表示的支持程度； 可利用性：可利用这些知识进行有效推理。包括：对推理的适应性，对高效算法的支持程度； 可实现性：要便于计算机直接对其进行处理； 可组织性：可以按某种方式把知识组织成某种知识结构； 可维护性：便于对知识的增、删、改等操作； 自然性：符合人们的日常习惯； 可理解性：知识应易读、易懂、易获取等。 状态空间法状态空间法是一种 基于解答空间的问题表示和求解方法，它是以“状态（state）”和“算符（operator）”为基础的，它是人工智能中最基本的 形式化方法。由于状态空间法需要扩展过多的节点，容易出现“组合爆炸”，因而 只适用于表示比较简单的问题。 状态空间法的三要素： 状态（state）：描述某类不同事物间的差别而引入的一组最少变量 q0，q1，…，qn的有序集合，是表示问题解法中每一步问题状况的数据结构。有序集合中每个元素qi（i= 0,1,…,n）为集合的分量，称为状态变量。给定每个分量的一组值就得到一个具体的状态。 算符（operator）：使问题从一种状态变化为另一种状态的手段称为操作符或算符。 问题的状态空间**：即解答空间，也就是一个表示该问题全部可能状态及其关系的图。它是以状态和算符为基础来表示和求解问题的。它包含三种说明的集合，即S：所有可能的问题初始状态集合、F：操作符集合、G：目标状态集合。可将状态空间记为三元状态（S，F，G）。 【例子】猴子和香蕉问题：在一个房间内有一只猴子、一个箱子和一束香蕉。香蕉挂在天花板下方，但猴子的高度不足以碰到它。那么这只猴子怎样才能摘到香蕉呢? 解题过程用一个四元表列(W，x，Y，z)来表示这个问题状态空间其中W：猴子的水平位置；x：当猴子在箱子顶上时取1；否则取0；Y：箱子的水平位置；z：当猴子摘到香蕉时取1；否则取0。则可见初始状态为(a,0,b,0)，目标状态为(c,1,c,1) 这个问题的算符如下：goto(U)表示猴子走到水平位置U；pushbox(V)表示猴子把箱子推到水平位置V；climbbox表示猴子爬上箱顶；grasp表示猴子摘到香蕉。 由初始状态变换为目标状态的操作序列为： Step1: goto(b) Step2: pushbox(c) Step3: climbbox Step4: grasp 问题归约法 问题规约（Problem Reduction）： 另外一种 基于状态空间的问题描述与求解方法； 已知问题的描述，通过一系列 变换 把此问题变为一个 子问题集合； 这些子问题的解可以直接得到（本原问题），从而解决了初始问题。 问题归约的组成部分： 一个初始问题描述； 一套把问题变换为子问题的 操作符； 一套本原问题描述。(本原问题:不能再分解或变换且直接可解的子问题)。 问题归约的 实质： 从目标（要解决的问题）出发 逆向推理，建立子问题以及子问题的子问题，直到 最后把初始问题归约为一个本原问题集合。 问题归约法举例： 【例子】汉诺塔问题(Hanoi):规定每次移动一个盘子、且总个过程中大盘在下小盘在上、目标是将盘子从柱子1移到柱子3。 解题过程 原始问题可以归约为下列3个子问题： 规约过程： 归约图示： 与或图表示 用一个类似于图的结构来表示,把问题归约为后继问题的替换集合。 与图：把一个复杂问题分解为若干个较为简单的子问题，形成“与”树。 或图：把原问题变换为若干个较为容易求解的新问题，形成“或”树。 谓词逻辑法谓词逻辑法采用谓词合式公式和一阶谓词演算将要解决的问题变成一个有待证明的问题，然后利用消解定理和消解反演来证明一个新语句是从已知的正确语句中导出的，从而证明这个新语句也是正确的。谓词逻辑是一种 形式语言，能够将数学中的逻辑论证符号化，谓词逻辑经常与其他表示方法混合使用，可以表示比较复杂的问题。 谓词演算 语法和语义 基本符号：谓词符号、变量符号、函数符号、常量符号、括号和逗号 原子公式由若干谓词符号和项组成 连词和量词 连词合取、析取、蕴涵、非、双条件 量词全称量词、存在量词 谓词公式 原子谓词公式由谓词符号和若干项组成的谓词演算 分子谓词公式可以用 连词把原子谓词公式组成复合谓词公式，并把它叫做分子谓词公式通常把合式公式叫做谓词公式。在谓词演算中合式公式的递归定义如下： 合式公式的性质 置换与合一 置换 置换是用变元、常量、函数来替换变元，使该变元不在公式中出现，形如{t1/x1, t2/x2,...，tn/xn}的有限集合，其中： t1，t2，...，tn是项； x1，x2，...，xn是互不相同的变元； ti/xi表示用ti项替换变元xi，不允许ti和xi相同，也不允许变元xi循环地出现在另一个tj中。 推理规则：用合式公式的集合产生新的合式公式 置换是 可结合的；用s1s2表示两个置换s1和s2的合成，L表示一个表达式，则有(Ls1)s2 = L(s1s2)以及(s1s2)s3 = s1(s2s3)，即用s1和s2相继作用于表达式L是与用s1s2作用于L一样的。一般说来，置换是 不可交换的，即s1s2 ≠ s2s1。 合一 寻找项对变量的置换，以使两表达式一致，叫做合一。如果一个置换s作用于表达式集合{Ei}的每个元素，则用{Ei}s来表示置换的集。称表达式{Ei}是可合一的，如果存在一个置换s使得：E1s = E2s = E3s =……，那么，称此s为{Ei}的合一者，因为s的作用是使集合{Ei}成为单一形式。例如：设有公式集E={ P( x, y, f(y)), P( a, g(x), z) }，则s={a/x, g(a)/y, f(g(a))/z}是它的一个合一。 语义网路法语义网络是通过概念及其语义关系来表达知识一种网络图，是一种 结构化表示方法。从图论的观点看，语义网络是一个“带标识的有向图”，它由 节点和 弧线或链线组成。节点代表实体、概念、情况等，弧线代表节点间的关系，必须带标识。语义网络的解答是一个经过推理和匹配而得到的具有明确结果的新的语义网路，扩展后可以表示更复杂的问题。 语义网络中最基本的语义单元称为语义基元，可用三元组表示为：(结点1，弧，结点2)。 二元语义网络的表示 例如：用语义网络表示：李新的汽车的款式是“捷达”、银灰色；王红的汽车的款式是“凯越”、红色；李新和王红的汽车均属于具体概念,可增加“汽车” 这个抽象概念。 多元语义网络的表示 增加情况和动作节点； 增加事件节点； 连接词和量词的表示； …… 其他方法 框架表示法这是一种 结构化方法；框架理论是明斯基于1975年作为理解视觉、自然语言对话及其它复杂行为的一种基础提出来的；框架理论认为，人们对现实世界中各种事物的认识都是以一种类似于框架的结构存储在记忆中的。当遇到一个新事物时，就从记忆中找出一个合适的框架，并根据新的情况对其细节加以修改、补充，从而形成对这个新事物的认识。 框架网络： 框架结构： 每个框架都有框架名，代表某一类对象 一个框架由若干个槽（项目）组成，用于表示对象的某个方面的属性 有时一个槽（属性）还要从不同的侧面来描述，每个侧面可具有一个或多个值。注意：框架中的槽与侧面可任意定义，也可以是另一框架，形成框架网络系统。 剧本表示法(ppt-6) 过程表示法(ppt-6) …… 确定性推理推理的基本概念 推理方法及其分类 按推理的逻辑基础分：演绎推理，归纳推理，类比归纳推理 按推理过程所用知识的确定性分：确定性推理、 不确定性推理 按推理过程推出的结论是否单调增加分：单调推理、非单调推理 按推理过程是否利用问题的启发性知识分：启发式推理、非启发式推理 推理的控制策略及其分类 推理的控制策略是指如何使用领域知识使推理过程尽快达到目标的策略。 推理策略 推理方向控制策略可分为 正向推理 逆向推理 混合推理 双向推理 求解策略：是指仅求一个解，还是求所有解或最优解等。 限制策略：是指对推理的深度、宽度、时间、空间等进行的限制。 冲突消解策略：是指当推理过程有多条知识可用时，如何从这多条可用知识中选出一条最佳知识用于推理的策略。 搜索策略（下面会详述） 搜索策略 按是否使用启发式信息： 盲目搜索：按预定的控制策略进行搜索，在搜索过程中获得的中间信息并不改变控制策略。 启发式搜索：在搜索中加入了与问题有关的启发性信息，用于指导搜索朝着最有希望的方向前进，加速问题的求解过程并找到最优解。 按问题的表示方式： 状态空间搜索：用指用状态空间法来表示问题所进行的搜索 与或树搜索：用指用问题归约法来表示问题所进行的搜索 状态空间的搜索策略 状态空间的盲目搜索 广度优先搜索 深度优先搜索 代价树搜索 状态空间的启发式搜索 启发性信息和估价函数 A算法和A*算法 基本思想 先把问题的初始状态作为当前扩展节点对其进行扩展，生成一组子节点。 然后检查问题的目标状态是否出现在这些子节点中。若出现，则搜索成功，找到了问题的解；若没出现，则再 按照某种搜索策略从已生成的子节点中选择一个节点作为当前扩展节点。 重复上述过程，直到目标状态出现在子节点中或者没有可供操作的节点为止。 所谓对一个节点进行“扩展”是指对该节点用某个可用操作进行作用，生成该节点的一组子节点。 数据结构和符号约定 OPEN表：未扩展节点表，用于存放刚生成节点 CLOSED表：已扩展节点表，用于存放已经扩展或将要扩展的节点 S：用表示问题的初始状态 G：表示搜索过程所得到的搜索图 M：表示当前扩展节点新生成的且不为自己先辈的子节点集 各种搜索策略的主要区别在于对OPEN表中节点的排列顺序不同。例如，广度优先搜索把先生成的子节点排在前面，而深度优先搜索则把后生成的子节点排在前面。 广度优先搜索算法流程： 把初始节点S放入OPEN表中； 如果OPEN表为空，则问题无解，失败退出； 把OPEN表的第一个节点取出放入CLOSED表，并记该节点为n； 考察节点n是否为目标节点。若是，则得到问题的解，成功退出； 若节点n不可扩展，则转第(2)步； 扩展节点n，将其子节点放入OPEN表的 尾部，并为每一个子节点设置指向父节点的指针，然后转第(2)步。 以八数码问题为例，得到下面这个广度优先搜索树： 在上述广度优先算法中需要注意两个问题： 对于任意一个可扩展的节点，总是按照固定的操作符的顺序对其进行扩展（空格左移、上移、右移、下移）。 在对任一节点进行扩展的时候，如果所得的某个子节点（状态）前面已经出现过，则立即将其放弃，不再重复画出（不送入OPEN表）。因此，广度优先搜索的本质是，以初始节点为根节点，在状态空间图中按照广度优先的原则，生成一棵搜索树。 广度优先搜索的优缺点： 优点 只要问题有解，用广度优先搜索总可以得到解，而且得到的是路径最短的解。 缺点 广度优先搜索盲目性较大，当目标节点距初始节点较远时将会产生许多无用节点，搜索效率低。 深度优先搜索算法流程： 把初始节点S放入OPEN表中； 如果OPEN表为空，则问题无解 ，失败退出； 把OPEN表的第一个节点取出放入CLOSED表，并记该节点为n； 考察节点n是否为目标节点。若是，则得到问题的解，成功退出； 若节点n不可扩展，则转第(2)步； 扩展节点n，将其子节点放入OPEN表的 首部，并为每一个子节点设置 指向父节点的指针，然后转第(2)步。 在深度优先搜索中，搜索一旦进入某个分支，就将沿着该分支一直向下搜索。如果目标节点恰好在此分支上，则可较快地得到解。但是，如果目标节点不在此分支上，而该分支又是一个无穷分支，则就不可能得到解。所以深度优先搜索是不完备的，即使问题有解，它也不一定能求得解。因此，为了防止搜索过程沿着无益的路径扩展下去，往往给出一个节点扩展的最大深度，即 深度界限。当搜索深度达到了深度界限而仍未出现目标节点时，就换一个分支进行搜索。 有界深度优先搜索的特点： 从某种意义上讲，有界深度优先搜索具有一定的启发性； 如果问题有解，且其路径长度≤dm，则上述搜索过程一定能求得解。 但是若解的路径长度&gt; dm,则上述搜索过程就得不到解。。 这说明在有界深度优先搜索中，深度界限的选择是很重要的，但是要恰当地给出dm的值是比较困难的。 即使能求出解，它也不一定是最优解。 代价树搜索 考虑边的代价的搜索方法，代价树搜索的目的是为了找到一条代价最小的解路径。代价树搜索方法包括： 代价树的广度优先搜索 代价树的深度优先搜索 启发式信息与代价函数 采用问题自身的特性信息，以指导搜索朝着最有希望的方向前进。启发性信息是指那种与具体问题求解过程有关的，并可指导搜索过程朝着最有希望方向前进的控制信息。启发信息的启发能力越强，扩展的无用结点越少。 启发性信息的种类 有效地帮助确定扩展节点的信息； 有效的帮助决定哪些后继节点应被生成的信息； 能决定在扩展一个节点时哪些节点应从搜索树上删除的信息。 估价函数的一般形式为：f(x) = g(x)+h(x)，其中g(x)表示从初始节点S0到节点x的代价；h(x)是从节点x到目标节点Sg的最优路径的代价的估计，它体现了问题的启发性信息，h(x)称为启发函数。 A算法与A*算法 A算法：在图搜索算法中，如果能在搜索的每一步都利用估价函数f(n)=g(n)+h(n)对OPEN表中的节点进行排序，则该搜索算法为A算法。 A算法的类型可根据搜索过程中选择扩展节点的范围，将启发式搜索算法分为： 全局择优搜索算法： 从OPEN表的所有节点中选择一个估价函数值最小的一个进行扩展。 局部择优搜索算法：仅从刚生成的子节点中选择一个估价函数值最小的一个进行扩展。 A*算法是对A算法的估价函数f(n)=g(n)+h(n)加上某些限制后得到的一种启发式搜索算法。 假设f*(n)是从初始节点出发经过节点n达到目标节点的最小代价，估价函数f(n)是对f*(n)的 估计值。且f*(n)=g*(n)+h*(n)，g*(n)是从初始节点S0到节点n的最小代价。h*(n)是从节点n到目标节点的最小代价，若有多个目标节点，则为其中最小的一个。 A*算法对A算法（全局择优的启发式搜索算法）中的g(n)和h(n)分别提出如下限制： 第一，g(n)是对最小代价g*(n)的估计，且g(n)&gt;0； 第二，h(n)是最小代价h*(n)的下界，即对任意节点n均有h(n)≤h*(n)。 即：满足上述两条限制的A算法称为A*算法。 与/或树的搜索策略(ppt-9~10)1、 与/或树的一般搜索过程 1234(1) 把原始问题作为初始节点S0，并把它作为当前节点；(2) 应用分解或等价变换操作对当前节点进行扩展；(3) 为每个子节点设置指向父节点的指针；(4) 选择合适的子节点作为当前节点，反复执行第(2)步和第(3)步，在此期间需要多次调用可解标记过程或不可解标记过程，直到初始节点被标记为可解节点或不可解节点为止。 2、 与/或树的广度优先搜索 12345678910(1)把初始节点S0放入OPEN表中；(2)把OPEN表的第一个节点取出放入CLOSED表，并记该节点为n；(3)如果节点n可扩展，则做下列工作： ① 扩展节点n，将其子节点放入OPEN表的尾部，并为每一个子节点设置指向父节点的指针； ② 考察这些子节点中有否终止节点。若有，则标记这些终止节点为可解节点，并用可解标记过程对其父节点及先辈节点中的可解解节点进行标记。如果初始解节点S0能够被标记为可解节点，就得到了解树，搜索成功，退出搜索过程；如果不能确定S0为可解节点，则从OPEN表中删去具有可解先辈的节点。 ③ 转第(2)步。(4) 如果节点n不可扩展，则作下列工作： ① 标记节点n为不可解节点； ② 应用不可解标记过程对节点n的先辈中不可解解的节点进行标记。如果初始解节点S0也被标记为不可解节点，则搜索失败，表明原始问题无解，退出搜索过程；如果不能确定S0为不可解节点，则从Open表中删去具有不可解先辈的节点。 ③ 转第(2)步。 【例子】 设有下图所示的与/或树，节点按标注顺序进行扩展，其中标有t1、t2、t3的节点是终止节点，A、B、C为不可解的端节点。 本例中与/或树的广度优先搜索过程： (1) 先扩展1号节点，生成2号节点和3号节点。(2) 扩展2号节点，生成A节点和4号节点。(3) 扩展3号节点，生成t1节点和5号节点。由于t1为终止节点，则标记它为可解节点，并应用可解标记过程，不能确定3号节点是否可节。(4) 扩展节点A，由于A是端节点，因此不可扩展。调用不可解标记过程。(5) 扩展4号节点，生成t2节点和B节点。由于t2为终止节点，标记为可解节点，应用可解标记过程，可标记2号节点为可解，但不能标记1号节点为可解。(6) 扩展5号节点，生成t3节点和C节点。由于t3为终止节点，标记它为可解节点，应用可解标记过程，可标记1号节点为可解节点。(7) 搜索成功，得到由1、2、3、4、5号节点和t1、t2、t3节点构成的解树。 3、 与/或树的深度优先搜索 123456789101112(1)把初始节点S0放入OPEN表中；(2)把OPEN表第一个节点取出放入CLOSED表，并记该节点为n；与/或树的深度优先搜索算法如下：(3)如果节点n的深度等于dm，则转第(5)步的第①点；(4)如果节点n可扩展，则做下列工作： ① 扩展节点n，将其子节点放入OPEN表的首部，并为每一个子节点设置指向父节点的指针； ② 考察这些子节点中是否有终止节点。若有，则标记这些终止节点为可解节点，并用可解标记过程对其父节点及先辈节点中的可解解节点进行标记。如果初始解节点S0能够被标记为可解节点，就得到了解树，搜索成功；如果不能确定S0为可解节点，则从OPEN表中删去具有可解先辈的节点。 ③ 转第(2)步。(5)如果节点n不可扩展，则作下列工作： ① 标记节点n为不可解节点； ② 应用不可解标记过程对节点n的先辈中不可解解的节点进行标记。如果初始解节点S0也被标记为不可解节点，则搜索失败，表明原始问题无解，退出搜索过程；如果不能确定S0为不可解节点，则从Open表中删去具有不可解先辈的节点。 ③ 转第(2)步。 4、 与/或树的启发式搜索 123456789101112131415161718192021222324(1) 把初始节点S0放入OPEN表中；(2) 求出希望树T，即根据当前搜索树中节点的代价h求出以S0为根的希望树T；(3) 依次在OPEN表中取出T的端节点放入CLOSED表，并记该节点为n；节点n有三种不同情况： ①n为终止节点， ②n不是终止节点，但可扩展， ③n不是终止节点，且不可扩展，对三种情况分别进行步骤(4) (5) (6)的操作过程；(4)如果节点n为终止节点，则： ① 标记节点n为可解节点； ② 在T上应用可解标记过程，对n的先辈节点中的所有可解解节点进行标记； ③ 如果初始解节点S0能够被标记为可解节点，则T就是最优解树，成功退出； ④ 否则，从OPEN表中删去具有可解先辈的所有节点。 ⑤ 转第(2)步。(5) 如果节点n不是终止节点，但可扩展，则： ① 扩展节点n，生成n的所有子节点； ② 把这些子节点都放入OPEN表中，并为每一个子节点设置指向父节点n的指针； ③ 计算这些子节点及其先辈节点的h值； ④ 转第(2)步。(6) 如果节点n不是终止节点，且不可扩展，则： ① 标记节点n为不可解节点； ② 在T上应用不可解标记过程，对n的先辈节点中的所有不可解解节点进行标记； ③ 如果初始解节点S0能够被标记为不可解节点，则问题无解，失败退出； ④ 否则，从OPEN表中删去具有不可解先辈的所有节点。 ⑤ 转第(2)步。 5、 博弈树的启发式搜索6、 α-β剪枝技术 搜索的完备性与效率 完备性 对于一类 可解的问题和一个搜索过程，如果运用该搜索过程一定能求得该类问题的解，则称该搜索过程为 完备的，否则为不完备的。 完备的搜索过程称为“搜索算法”。不完备的搜索过程不是算法，称为“过程”。 广度优先搜索、代价树的广度优先搜索、改进后的有界深度优先搜索以及A*算法都是完备的搜索过程，其它搜索过程都是不完备的。 搜索效率 一个搜索过程的搜索效率不仅取决于过程自身的启发能力，而且还与被解问题的有关属性等多种因素有关。 为了比较求解同一问题的不同搜索方法的效率，常用以下两种指标来衡量： 外显率 有效分支因数 其中，外显率定义为：P=L/T；L为从初始节点到目标节点的路径长度；T为整个搜索过程中所生成的节点总数。外显率反映了搜索过程中从初始节点向目标节点前进时 搜索区域的宽度。当T=L时，P=1，表示搜索过程中每次只生成一个节点，它恰好是解路径上的节点，搜索效率最高。P越小表示搜索时产生的无用节点愈多，搜索效率愈低。 有效分枝因数B定义为：B+B^2+…+B^L=T；B是有效分枝因数，它表示在整个搜索过程中 每个节点平均生成的子节点数目；L为从初始节点到目标节点的路径长度；T为整个搜索过程中所生成的节点总数。当B＝1时，L=T，此时所生成的节点数最少，搜索效率最高。 自然演绎推理从一组已知为真的事实出发，直接运用经典逻辑中的推理规则推出结论的过程称为自然演绎推理。自然演绎推理最基本的推理规则是三段论推理，它包括： 【例子】 设已知如下事实：(1) 只要是需要编程序的课，王程都喜欢。(2) 所有的程序设计语言课都是需要编程序的课。(3) C是一门程序设计语言课。求证：王程喜欢C这门课。 证明：第一步，首先定义谓词 Prog(x)：x是需要编程序的课。 Like(x, y): x喜欢y。 Lang(x): x是一门程序设计语言课第二步，把已知事实及待求解问题用谓词公式表示如下： Prog(x)→Like(Wang , x) (∀x)( Lang(x)→Prog(x)) Lang(C)第三步，应用推理规则进行推理： Lang(y)→Prog(y) 全称固化 Lang(C)，Lang(y)→Prog(y) ⇒ Prog(C) 假言推理 {C/y} Prog(C), Prog(x)→Like(Wang , x) ⇒ Like(Wang , C) 假言推理 {C/x}因此，王程喜欢C这门课。 注意避免以下两类错误： 肯定后件的错误：当P→Q为真时，希望通过肯定后件Q为真来推出前件P为真，这是不允许的。 否定前件的错误：当P→Q为真时，希望通过否定前件P来推出后件Q为假，这也是不允许的。 自然演绎推理的优缺点 优点 定理证明过程自然，易于理解，并且有丰富的推理规则可用。 缺点 是容易产生知识爆炸，推理过程中得到的中间结论一般按指数规律递增，对于复杂问题的推理不利，甚至难以实现。 消解演绎推理一种基于 鲁滨逊（Robinson）消解原理的机器推理技术。鲁滨逊消解原理亦称为消解原理，是鲁滨逊于1965年在海伯伦（Herbrand）理论的基础上提出的一种基于逻辑的“反证法”。 在人工智能中，几乎所有的问题都可以转化为一个定理证明问题。定理证明的实质，就是要对前提P和结论Q，证明P→Q永真。而要证明P→Q永真，就是要证明P→Q在任何一个非空的个体域上都是永真的。这将是非常困难的，甚至是不可实现的。 鲁滨逊消解原理把永真性的证明转化为关于 不可满足性的证明。即：要证明P→Q永真，只需证明P∧¬Q不可满足。（¬(P→Q) ⇔ ¬(¬P∨Q) ⇔ P∧¬Q） 子句集及其化简 鲁滨逊消解原理是在子句集的基础上讨论问题的。因此，讨论消解演绎推理之前，需要先讨论子句集的有关概念。 原子谓词公式及其否定统称为 文字。例如: P(x)、Q(x)、¬ P(x)、 ¬ Q(x)等都是文字。 任何文字的析取式称为 子句。例如，P(x)∨Q(x)，P(x，f(x))∨Q(x，g(x))都是子句。 不含任何文字的子句称为 空子句。 由于空子句不含有任何文字，也就不能被任何解释所满足，因此 空子句是永假的，不可满足的。 空子句一般被记为NIL。 由子句或空子句所构成的集合称为 子句集。 在子句集中，子句之间是 合取关系； 子句集中的变元受 全称量词的约束； 任何谓词公式都可通过等价关系及推理规则化为相应的子句集。 把谓词公式化成子句集的步骤 子句集的意义在上述化简过程中，由于在消去存在量词时所用的Skolem函数可以不同，因此化简后的标准子句集是不唯一的。因此，当原谓词公式为非永假时，它与其标准子句集并不等价。但当原谓词公式为永假（或不可满足）时，其标准子句集则一定是永假的，即Skolem化并不影响原谓词公式的永假性。 不可满足性对于任意论域中的任意一个解释，S中的子句不能同时取得真值T。 定理：设有谓词公式F，其子句集为S，则F不可满足的充要条件是S不可满足。 由此定理可知，要证明一个谓词公式是不可满足的，只要证明其相应的标准子句集是不可满足的就可以了。 由于子句集中的子句之间是合取关系，子句集中只要有一个子句为不可满足，则整个子句集就是不可满足的。 空子句是不可满足的。因此，一个子句集中如果包含有空子句，则此子句集就一定是不可满足的。 这个定理是 鲁滨逊消解原理的主要依据。 鲁滨逊消解原理鲁滨逊消解原理的基本思想 首先把欲证明问题的 结论否定，并加入子句集，得到一个扩充的子句集S’； 然后设法检验子句集S’是否含有空子句，若含有空子句，则表明S’是不可满足的；若不含有空子句，则继续使用消解法，在子句集中选择合适的子句进行消解，直至导出空子句或不能继续消解为止。 鲁滨逊消解原理包括 命题逻辑的消解 谓词逻辑的消解 命题逻辑的消解 消解推理的核心是求两个子句的 消解式。 设C1和C2是子句集中的任意两个子句，如果C1中的文字L1与C2中的文字L2 互补，那么可从C1和C2中分别消去L1和L2，并将C1和C2中余下的部分按析取关系构成一个新的子句C12，则称这一过程为 消解，称C12为C1和C2的 消解式，称C1和C2为C12的 亲本子句。 【例子】 设C1=¬Q，C2=Q，则C1和C2的消解式C12 = NIL . 设C1=P∨Q∨R，C2=¬P∨S，则C1和C2的消解式C12 = Q∨R∨S . 设C1 =¬P ∨ Q ，C2=¬Q，C3=P，则C1、C2、C3的消解式C123 = NIL . 很显然，可以得出定理：消解式C12是其亲本子句C1和C2的逻辑结论。根据该定理，可以得到以下推论： 推论1：设C1和C2是子句集S中的两个子句，C12是C1和C2的消解式，若用C12代替C1和C2后得到新的子句集S1，则由S1的不可满足性可以推出原子句集S的不可满足性。即：S1的不可满足性⇔S的不可满足性 推论2：设C1和C2是子句集S中的两个子句，C12是C1和C2的消解式，若把C12加入S中得到新的子句集S2，则S与S2的不可满足性是等价的。即：S2的不可满足性⇔S的不可满足性 上述两个推论说明，为证明子句集S的不可满足性，只要对其中可进行消解得子句进行消解，并把消解式加入到子句集S中，或者用消解式代替他的亲本子句，然后对新的子句集证明其不可满足性就可以了。如果经消解能得到空子句，根据空子句的不可满足性，即可得到原子句集S是不可满足的结论。在命题逻辑中，对不可满足的子句集S，其消解原理是完备的。即：子句集S是不可满足的，当且仅当存在一个从S到空子句的消解过程。 应用消解原理证明定理的过程称为 消解反演。 命题逻辑的消解反演： 在命题逻辑中，已知F，证明G为真的消解反演过程如下： 否定目标公式G，得¬G; 把¬G并入到公式集F中，得到{F，¬G}； 把{F，¬G}化为子句集S； 应用消解原理对子句集S中的子句进行消解，并把每次得到的消解式并入S中。如此反复进行，若 出现空子句，则停止消解，此时就证明了G为真。 【例子】 设已知的公式集为{P,(P∧Q)→R,(S∨T)→Q,T}，求证：R为真。 解：假设结论R为假, 将¬R加入公式集，并化为子句集： S={P,¬P∨¬Q∨R,¬S∨Q,¬T∨Q,T,¬R}其消解过程如下图的消解演绎树所示。 该树根为空子句NIL，则子句集S不可满足，即假设有误，于是证得R为真。 谓词逻辑的消解 在谓词逻辑中，由于子句集中的谓词一般都含有变元，因此不能象命题逻辑那样直接消去互补文字。 对于谓词逻辑，需要先用一个最一般合一对变元进行置换，然后才能进行消解。 设C1和C2是两个没有公共变元的子句，L1和L2分别是C1和C2中的文字。如果 σ 是L1和¬ L2存在的最一般合一，则称： C12=({C1σ}-{ L1σ})∪({ C2σ}-{ L2σ})为C1和C2的二元消解式，L1和L2为消解式上的文字。 注意：在谓词逻辑的消解过程中，要注意以下几个问题： 若C1和C2有相同的变元x，需要将其中一个变元更名。（例2） 求消解式不能同时消去两个互补对，消去这两个互补文字所得的结果不是两个亲本子句的逻辑结论。(例3) 对参加消解的某个子句，若其内部有可合一的文字，则在进行消解之前应先对这些文字进行合一，以实现这些子句内部的化简。(例4) 【例子】例1、设C1=P(a)∨R(x)，C2=¬P(y)∨Q(b)，求 C12。解：取L1= P(a), L2=¬P(y)，则L1和¬L2的最一般合一是σ={a/y}。因此： 12345C12 = ( &#123;C1σ&#125;-&#123;L1σ&#125;) ∪ (&#123;C2σ&#125;-&#123;L2σ&#125;) = (&#123;P(a), R(x)&#125;-&#123;P(a)&#125;)∪(&#123;¬P(a), Q(b)&#125;-&#123;¬P(a)&#125;) = (&#123;R(x)&#125;)∪(&#123;Q(b)&#125;) = &#123; R(x), Q(b) &#125; = R(x)∨Q(b) 例2、设C1=P(x)∨Q(a)，C2=¬P(b)∨R(x)，求 C12。解：由于C1和C2有相同的变元x，不符合定义的要求。为了进行消解，需要修改C2中变元的名字。令C2=¬P(b)∨R(y)，此时L1= P(x), L2 =¬P(b)，L1和¬L2的最一般合一是 σ={b/x}。则有: 12345C12 = (&#123;C1σ&#125;-&#123;L1σ&#125;)∪ (&#123;C2σ&#125;-&#123;L2σ&#125;) = (&#123;P(b), Q(a)&#125;-&#123;P(b)&#125;) ∪ (&#123;¬P(b), R(y)&#125;-&#123;¬P(b)&#125;) = (&#123;Q(a)&#125;) ∪ (&#123;R(y)&#125;) = &#123;Q(a), R(y)&#125; = Q(a)∨R(y) 例3、设 C1=P(a)∨¬Q(x)，C2=¬P(y)∨Q(b)，求C12。解：对C1和C2通过最一般合一（σ={b/x, a/y}）的作用，便得到空子句NIL的结论，从而得出C1、C2互相矛盾的结论，而事实上C1、C2并无矛盾。 例4、设 C1=P(x)∨P(f(a))∨Q(x) ，C2=¬P(y)∨R(b)，求C12。解：本例的C1中有可合一的文字P(x)与P(f(a))，用它们的最一般合一σ={f(a)/x}进行代换，可得到 ：C1σ=P(f(a))∨Q(f(a))此时对C1σ与C2进行消解。选L1= P(f(a)), L2 =¬P(y)，L1和L2的最一般合一是σ={f(a)/y}，则可得到C1和C2的二元消解式为：C12=R(b)∨Q(f(a)) 例5、设 C1=P(y)∨P(f(x))∨Q(g(x))、C2=¬P(f(g(a)))∨Q(b)，求C12。解：对C1，取最一般合一σ={f(x)/y}，得C1的因子C1σ=P(f(x))∨Q(g(x))，对C1的因子和C2消解（σ={g(a)/x }），可得：C12=Q(g(g(a)))∨Q(b) 谓词逻辑的消解反演： 在谓词逻辑中，已知F，证明G是F的结论的消解反演过程如下： 否定目标公式G，得¬G; 把¬G并入到公式集F中，得到{F，¬G}； 把{F，¬G}化为子句集S； 应用消解原理对子句集S中的子句进行消解，并把每次得到的消解式并入S中。如此反复进行，若出现空子句，则停止消解，此时就证明了G为真。 与命题逻辑的消解反演过程比较一下 步骤基本相同，但每步的处理对象不同。 在步骤(3)化简子句集时，谓词逻辑需要把由谓词构成的公式集化为子句集。 在步骤(4)按消解原理进行消解时，谓词逻辑的消解原理需要考虑两个亲本子句的最一般合一。 【例子】例1、已知F:(∀x)((∃y)(A(x, y)∧B(y))→(∃y)(C(y)∧D(x, y)))、G:¬(∃x)C(x)→(∀x)(∀y)(A(x, y)→¬B(y))，求证G是F的逻辑结论。 证明：第一步，先把G否定，并放入F中，得到的{F,¬G}： {(∀ x)((∃ y)(A(x,y)∧B(y))→(∃ y)(C(y)∧D(x,y)))，¬(¬(∃ x)C(x)→(∀ x)(∀ y)(A(x,y)→¬ B(y)))}第二步，把{F,¬G}化成子句集，得到 (1) ¬A(x,y)∨¬B(y)∨C(f(x)) (2) ¬A(u,v)∨¬B(v)∨D(u,f(u)) (3) ¬C(z) (4) A(m,n) (5) B(k)第三步，应用谓词逻辑的消解原理对上述子句集进行消解，其过程为： (6) ¬ A(x,y)∨¬ B(y) (1)和(3)消解，取σ={f(x)/z} (7) ¬ B(n) (4)和(6)消解，取σ={m/x,n/y} (8) NIL (5)和(7)消解，取σ={n/k}最后，“G是F的逻辑结论”得证。 上述消解过程可用如下消解树来表示 例2、“快乐学生”问题假设：任何通过计算机考试并获奖的人都是快乐的，任何肯学习或幸运的人都可以通过所有考试，张不肯学习但他是幸运的，任何幸运的人都能获奖。求证：张是快乐的。 证明：(完整的解题过程)第一步，先定义谓词： Pass(x, y)：x可以通过y考试 Win(x, prize)：x能获得奖励 Study(x) ：x肯学习 Happy(x)：x是快乐的 Lucky(x) ：x是幸运的第二步，将已知条件以及结论的否定用谓词表示如下： “任何通过计算机考试并奖的人都是快乐的” (∀x)(Pass(x, computer)∧Win(x, prize)→Happy(x)) “任何肯学习或幸运的人都可以通过所有考试” (∀x)(∀y)(Study(x)∨Lucky(x)→Pass(x, y)) “张不肯学习但他是幸运的” ¬Study(zhang)∧Lucky(zhang) “任何幸运的人都能获奖” (∀x)(Lucky(x)→Win(x, prize)) 结论“张是快乐的”的否定 ¬Happy(zhang)第三步，将上述谓词公式转化为子句集如下： 1. `¬Pass(x, computer)∨¬Win(x, prize)∨Happy(x)` 2. `¬Study(y)∨Pass(y, z)` 3. `¬Lucky(u)∨Pass(u, v)` 4. `¬Study(zhang)` 5. `Lucky(zhang)` 6. `¬Lucky(w)∨Win(w, prize)` 7. `¬ Happy(zhang)` (结论的否定) 第四步，按消解原理进行消解，消解树如下： 最后，“张是快乐的”得证。 消解反演推理的消解策略 在消解演绎推理中，由于事先并不知道哪些子句对可进行消解，更不知道通过对哪些子句对的消解能尽快得到空子句，因此就需要对子句集中的所有子句逐对进行比较，直到得出空子句为止。这种盲目的全面进行消解的方法，不仅会产生许多无用的消解式，更严重的是会产生组核爆炸问题。因此，需要研究有效的消解策略来解决这些问题。 常用的消解策略可分为两大类： 限制策略：通过限制参加消解的子句减少盲目性 删除策略：通过删除某些无用的子句缩小消解范围 用消解反演求取问题的答案消解原理除了可用于 定理证明外，还可用来 求取问题答案，其思想与定理证明相似。其一般步骤为： 把问题的已知条件用谓词公式表示出来，并化为子句集； 把问题的目标的否定用谓词公式表示出来，并化为子句集； 对目标否定子句集中的每个子句，构造该子句的重言式（即把该目标否定子句和此目标否定子句的否定之间再进行析取所得到的子句），用这些重言式代替相应的目标否定子句式，并把这些重言式加入到前提子句集中，得到一个新的子句集； 对这个新的子句集，应用消解原理求出其证明树，这时证明树的根子句不为空，称这个证明树为修改的证明树； 用修改证明树的根子句作为回答语句，则答案就在此根子句中。 【例子】例1、已知：“张和李是同班同学，如果x和y是同班同学，则x的教室也是y的教室，现在张在302教室上课。”问：“现在李在哪个教室上课？” 解：第一步，首先定义谓词 C(x, y)：x和y是同班同学 At(x, u)：x在u教室上课。第二步，把已知前提用谓词公式表示如下： C(zhang, li) (∀x)(∀y)(∀u)(C(x, y)∧At(x, u)→At(y,u)) At(zhang, 302)把目标的否定用谓词公式表示如下： ¬(∃v)At(li, v)第三步，把上述表示前提的谓词公式化为子句集： C(zhang, li) ¬C(x, y)∨¬At(x, u)∨At(y, u) At(zhang, 302)把目标的否定化成子句式，并用下面的 重言式代替： ¬At(li,v) ∨At(li,v)第四步，把此 重言式加入前提子句集中，得到一个新的子句集，对这个新的子句集，应用消解原理求出其证明树。求解过程如下图所示。该证明树的根子句就是所求的答案，即“李明在302教室”。 例2、已知：A,B,C三人中有人从不说真话，也有人从不说假话。某人向这三人分别提出同一个问题：谁是说谎者？ A答：“B和C都是说谎者”； B答：“A和C都是说谎者”； C答：“A和B中至少有一个是说谎者”。问：求谁是老实人，谁是说谎者？ 解：第一步，首先定义谓词T(x)：表示x说真话第二步，把已知前提用谓词公式表示如下： 有人从不说真话：¬T(C)∨¬T(A)∨¬T(B) 有人从不说假话：T(C)∨T(A)∨T(B)根据“A答：B和C都是说谎者”，则 若A说真话：T(A)→¬T(B)∧¬T(C) 若A说假话： ¬T(A)→T(B)∨T(C)同理，根据“B答：A和C都是说谎者”，则 T(B)→¬T(A)∧¬T(C) ¬T(B)→T(A)∨T(C)根据“C答：A和B中至少有一个是说谎者”，则 T(C)→¬T(A)∨¬T(B) ¬T(C)→T(A)∧T(B)第三步，把上述公式化成子句集，得到前提子句集S： ¬T(A)∨¬T(B) ¬T(A)∨¬T(C) T(C)∨T(A)∨T(B) ¬T(B)∨¬T(C) ¬T(C)∨¬T(A)∨¬T(B) T(A)∨T(C) T(B)∨T(C)第四步，先求谁是老实人，结论的否定为：¬(∃x)T(x)，把目标的否定化成子句式，并用下面的重言式代替： ¬T(x)∨T(x)把此重言式加入前提子句集S，得到一个新子句集。第五步，对这个新的子句集，应用消解原理求出其证明树。 第六步，同理证明A不是老实人，结论的否定为： ¬T(A)，将结论的否定¬(¬T(A)) 加入并入前提子句集S中，应用消解原理对新的子句集进行消解： 消解演绎推理的优缺点： 优点： 简单，便于在计算机上实现。 缺点： 必须把逻辑公式化成子句集。 不便于阅读与理解：¬P(x)∨Q(x)没有P(x)→Q(x)直观。 可能丢失控制信息，如下列逻辑公式，化成子句后都是: A∨B∨C123(¬A∧¬B)→C ¬A→(B∨C)(¬A∧¬C)→B ¬B→(A∨C)(¬C∧¬B)→A ¬C→(B∨A) 基于规则的演绎推理 在消解演绎推理中，需要把谓词公式化为子句形，这使得原来蕴含在谓词公式中的一些重要信息却会在求取子句形的过程中被丢失。在不少情况下人们多希望使用接近于问题原始描述的形式来进行求解，而不希望把问题描述化为子句集。 基于规则的演绎推理又称为与/或形演绎推理，不再把有关知识转化为子句集，而是把领域知识及已知事实分别用蕴含式及与/或形表示出来，然后通过运用蕴含式进行演绎推理，从而证明某个目标公式。 规则是一种比较接近于人们习惯的问题描述方式，按照 蕴含式（“If →Then”规则）这种问题描述方式进行求解的系统称为基于规则的系统，或者叫做 规则演绎系统。 规则演绎系统按照推理方式可分为： 规则正向演绎系统 规则逆向演绎系统(ppt-14) 规则双向演绎系统(ppt-14) 规则正向演绎系统首先说明一下，在规则正向演绎系统中，对已知事实和规则都有一定的要求，如果不是所要求的形式，需要进行变换。 事实表达式的与或形变换 在基于规则的正向演绎系统中，把事实表示为非蕴含形式的与或形，作为系统的总数据库； 把一个公式化为与或形的步骤与化为子句集类似，只是不必把公式化为子句的合取形式，也不能消去公式中的合取。 详细来说，把事实表达式化为非蕴含形式的与/或形的步骤如下： 利用 “P→Q⇔﹁P∨Q”，消去蕴含符号； 利用狄.摩根定律及量词转换率把“﹁”移到紧靠谓词的位置，直到否定符号的辖域最多只含一个谓词为止； 重新命名变元，使不同量词约束的变元有不同的名字； 对存在量词量化的变量用skolem函数代替； 消去全称量词，且使各主要合取式中的变元具有不同的变量名。 【例子】有如下表达式 (∃x) (∀y)(Q(y, x)∧﹁((R(y)∨P(y))∧S(x, y)))可把它转化为： Q(z, a)∧( ( ﹁R(y)∧﹁P(y) )∨﹁S(a, y) )这就是 与/或形表示，也可用一棵与/或图表示出来。 关于 与/或图说明以下几点： 当某表达式为k个子表达式的析取：E1∨E2∨…∨Ek，其中每个子表达式Ei均被表示为E1∨E2∨…∨Ek的后继节点，并由一个k线连接符（即图中的半圆弧）将这些后继节点都连接到其父节点，即表示成与的关系。 当某表达式为k个子表达式的合取：E1∧E2∧…∧Ek，其中的每个子表达式Ei均被表示为E1∧E2∧…∧Ek的一个单一的后继节点，无需用连接符连接，即表示成或的关系。 这样，与/或图的根节点就是整个事实表达式，叶节点均为事实表达式中的一个文字。 有了与/或图的表示，就可以求出其解树（结束于文字节点上的子树）集。可以发现，事实表达式的子句集与解树集之间存在着一一对应关系，即 解树集中的每个解树都对应着子句集中的一个子句。解树集中每个解树的端节点上的文字的析取就是子句集中的一个子句。 上面那个与/或图有3个解树，分别对应这以下3个子句： Q(z, a)、﹁R(y)∨ ﹁ S(a, y)、﹁P(y)∨ ﹁ S(a, y) 还需要注意以下两点： 这里的与/或图是作为综合数据库的一种表示，其中的变量受全称量词的约束。 在之前 问题归约表示 中所描述的 与/或图表示方法与这里 与/或形的与/或图表示有着不同的目的和含义，因此应用时应加以 区分。 规则的表示 为简化演绎过程，通常要求规则具有如下形式：L→W，其中，L为单文字，W为与/或形公式。(之所以限制前件L为单文字，是因为在进行正向演绎推理时要用规则作用于表示事实的与/或树，而该与/或树的叶节点都是单文字，这样就可用规则的前件与叶节点进行简单匹配。对非单文字情况，若形式为L1∨L2→W，则可将其转换成与之等价的两个规则L1→W与 L2→W进行处理。) 假定出现在蕴含式中的任何变量全都受全称量词的约束，并且这些变量已经被换名，使得他们与事实公式和其他规则中的变量不同。 如果领域知识的规则表示形式与上述要求不同，则应将它转换成要求的形式。 将规则转换为要求形式的步骤： 1、 暂时消去蕴含符号“→”。设有如下公式： (∀x)(((∃y) (∀ z)P(x, y,z))→(∀u)Q(x, u))运用等价关系“P→Q⇔﹁P∨Q”，可将上式变为： (∀x)(﹁((∃ y) (∀z)P(x, y,z))∨(∀u)Q(x, u))2、 把否定符号“﹁”移到紧靠谓词的位置上，使其作用域仅限于单个谓词。通过使用狄.摩根定律及量词转换律可把上式转换为： (∀ x)( (∀y) (∃z)﹁P(x, y,z))∨ (∀u)Q(x, u))3、 引入Skolem函数，消去存在量词。消去存在量词后，上式可变为： (∀ x)( (∀y) (﹁P(x, y,f(x,y)))∨(∀u)Q(x, u))4、 把所有全称量词移至前面化成前束式，消去全部全称量词。消去全称量词后，上式变为： ﹁P(x, y,f(x,y))∨Q(x, u)此公式中的变元都被视为受全称量词约束的变元。5、 恢复蕴含式表示。利用等价关系“﹁P∨Q⇔P→Q”将上式变为： P(x, y,f(x,y))→Q(x, u) 目标公式的表示形式 与/或树正向演绎系统要求目标公式用子句形表示。如果目标公式不是子句形，则需要化成子句形。 推理过程 规则正向演绎推理过程是从已知事实出发，不断运用规则，推出欲证明目标公式的过程。先用与/或树把已知事实表示出来，然后再用规则的前件和与/或树的叶节点进行匹配，并通过一个匹配弧把匹配成功的规则加入到与/或树中，依此使用规则，直到产生一个含有以目标节点为终止节点的解树为止。 下面分命题逻辑和谓词逻辑两种情况来讨论规则正向演绎过程。 命题逻辑的规则正向演绎过程已知事实：A∨B规则：r1: A→C∧D，r2: B→E∧G目标公式：C∨G 证明：1）先将已知事实用与/或树表示出来；2）然后再用匹配弧把r1和r2分别连接到事实与/或树中与r1和r2 的前件匹配的两个不同端节点；3) 由于出现了以目标节点为终节点的解树，故推理过程结束。这一证明过程可用下图表示。 谓词逻辑的规则正向演绎过程已知事实的与/或形表示：P(x, y)∨(Q(x)∧R(v, y))规则：P(u, v)→(S(u)∨N(v))目标公式：S(a)∨N(b)∨Q(c) 证明：在谓词逻辑情况下，由于事实、规则及目标中均含有变元，因此，其规则演绎过程还需要用最一般合一对变进行置换。证明过程可用下图表示。 产生式系统基本结构产生式系统的 基本结构由 数据库、产生式规则和 控制策略三部分构成。 总数据库：存放求解问题的各种当前信息，如：问题的初始状态，输入的事实，中间结论及最终结论等。 推理过程中，当规则库中某条规则的前提可以和总数据库的已知事实匹配时，该规则被激活，由它推出的结论将被作为新的事实放入总数据库，成为后面推理的已知事实。 产生式规则：是一个规则库，也称知识库 。用于存放与求解问题有关的所有规则的集合。 控制策略：亦称推理机，用于控制整个产生式系统的运行，决定问题求解过程的推理线路。 控制系统的主要任务包括： 选择匹配、 冲突消解、 执行操作、 终止推理、 路径解释… 产生式系统的推理产生式系统的推理分为 正向推理、逆向推理和 双向推理三种形式。 主要优缺点产生式系统的主要 优缺点 优点： 自然性：采用“如果……，则……”的形式，人类的判断性知识基本一致。 模块性：规则是规则库中最基本的知识单元，各规则之间只能通过总数据库发生联系，而不能相互调用，从而增加了规则的模块性。 有效性：产生式知识表示法既可以表示确定性知识，又可以表示不确定性知识，既有利于表示启发性知识，又有利于表示过程性知识。 缺点： 效率较低：各规则之间的联系必须以总数据库为媒介。并且，其求解过程是一种反复进行的“匹配—冲突消解—执行”过程。这样的执行方式将导致执行的低效率。 不便于表示结构性知识：由于产生式表示中的知识具有一致格式，且规则之间不能相互调用，因此那种具有结构关系或层次关系的知识则很难以自然的方式来表示。 非经典推理经典推理和非经典推理非经典推理现实世界中的大多数问题存在随机性、模糊性、不完全性和不精确性。对于这些问题，若采用前面所讨论的精确性推理方法显然是无法解决的。为此，出现了一些新的逻辑学派，称为非经典逻辑，相应的推理方法称为 非经典推理。包括非单调性推理、不确定性推理、概率推理和贝叶斯推理等。 非经典逻辑推理与经典逻辑推理的区别 在推理方法上，经典逻辑采用演绎逻辑推理，非经典逻辑采用归纳推理。 在辖域取值上，经典逻辑是二值逻辑，非经典逻辑是多值逻辑。 在运算法则上，两者大不相同。 在逻辑运算符上，非经典逻辑有更多的逻辑运算符。 在单调性上，经典逻辑是单调的，即已知事实均为充分可信的，不会随着新事实的出现而使原有事实变为假。非经典逻辑是非单调的。 不确定性推理不确定性推理的概念 不确定性推理是建立在非经典逻辑基础上的一种推理，它是对不确定性知识的运用与处理。 不确定性推理泛指除精确推理以外的其它各种推理问题。包括不完备、不精确知识的推理，模糊知识的推理，非单调性推理等。 不确定性推理从不确定性的初始证据（即事实）出发，通过运用不确定性的知识，最终推出具有一定程度不确定性的结论。 为什么要采用不确定性推理 所需知识不完备或问题的背景知识不足 所需知识描述不精确或模糊 多种原因导致同一结论或解题方案不唯一 不确定性推理的基本问题 不确定性的表示 不确定性的匹配 组合证据的不确定性的计算 不确定性的更新 不确定性结论的合成 知识的不确定性的表示 考虑因素：1. 问题描述能力; 2. 推理中不确定性的计算 含义：知识的确定性程度，或静态强度 表示： 概率，[0,1]，0接近于假，1接近于真 可信度，[-1,1]，大于0接近于真，小于0接近于假 证据的非精确性表示 证据来源：初始证据，中间结论 表示：用概率或可信度 不确定性的匹配 含义：不确定的前提条件与不确定的事实匹配 问题：前提是不确定的，事实也是不确定的 方法：设计一个计算相似程度的算法，给出相似的限度 标志：相似度落在规定限度内为匹配，否则为不匹配 组合证据不确定性的计算 含义：知识的前提条件是多个证据的组合 方法：T(E)表示证据E为真的程度 最大最小法：T(E1 AND E2)=min{T(E1),T(E2)}T(E1 OR E2)=max{T(E1),T(E2)} 概率法：在事件之间完全独立时使用T(E1 AND E2)=T(E1)T(E2)T(E1 OR E2)=T(E1)＋T(E2)－T(E1)T(E2) 有界法：T(E1 AND E2)=max{0,T(E1)＋T(E2)－1}T(E1 OR E2)=min{1,T(E1)＋T(E2)} 不确定性的更新 主要问题：解决不确定性知识在推理的过程中，知识不确定性的累积和传递。 解决方法 已知规则前提证据E的不确定性T(E)和规则的强度F(E,H)，则结论H的不确定性：T(H) = g1[T(E),F(E,H)] 证据合取： T(E1 AND E2) = g2[T(E1), T (E2)] 证据析取： T(E1 OR E2) = g3[T(E1), T (E2)] 不确定性结论的合成 主要问题：多个不同知识推出同一结论，且不确定性程度不同 解决方法： 并行规则算法：根据独立证据E1和E2分别求得结论H的不确定性为T1(H)和T2(H)，则证据E1和E2的组合导致结论H的不确定性：T(H)=g[T1(H), T2(H)] 函数g视不同推理方法而定 概率推理概率论基础回顾 全概率公式 贝叶斯(Bayes)公式 概率推理方法 设有如下产生式规则：IF E THEN H 其中，E为前提条件，H为结论。 条件概率P(H|E)可以作为在证据E出现时结论H的确定性程度，即规则的静态强度。 把贝叶斯方法用于不精确推理的思想 已知前提E的概率P(E)和结论H的先验概率P(H) 已知H成立时E出现的条件概率P(E|H) 利用规则推出H在E出现的条件下的后验概率： 对于一组产生式规则：IF E THEN Hi 一个前提条件E支持多个结论H1, H2, …,Hn 同样有后验概率如下（ Hi 确定性的程度，或规则的静态强度）： 对于有多个证据E1, E2, …, Em和多个结论H1, H2, …, Hn,并且每个证据都以一定程度支持结论的情况，上面的式子可进一步扩展为: 【例子】设H1,H2,H3分别是三个结论，E是支持这些结论的证据。已知：123456P(H1)=0.3P(H2)=0.4P(H3)=0.5P(E|H1)=0.5P(E|H2)=0.3P(E|H3)=0.4 求P(H1|E),P(H2|E)及P(H3|E)的值各是多少？ 解： 同理可得：P(H2|E)=0.26P(H3|E)=0.43观察：( 注：P(E)=0.47 )P(H1)=0.3 , P(E|H1)=0.5 P(H1|E)=0.32P(H2)=0.4 , P(E|H2)=0.3 P(H2|E)=0.26P(H3)=0.5 , P(E|H3)=0.4 P(H3|E)=0.43结论：由于E的出现，H1成立的可能性增加，H2和H3成立的可能性不同程度的下降。 概率推理方法的特点 优点： 概率推理方法有较强的理论背景和良好的数学特性，当证据彼此独立时计算的复杂度比较低。 缺点： 概率推理方法要求给出结论Hi的先验概率P(Hi)及条件概率 P(Ej|Hi)。 贝叶斯推理（主观贝叶斯方法） 使用概率推理方法求结论Hi在存在证据E时的条件概率P(Hi|E) ，需要给出结论Hi的先验概率P(Hi)及证据E的条件概率 P(E|Hi)。这对于实际应用是不容易做到的。Duda 和 Hart 等人在贝叶斯公式的基础上，于1976年提出主观贝叶斯方法，建立了不精确推理的模型，并把它成功地应用于PROSPECTOR专家系统（PROSPECTOR是国际上著名的一个用于勘察固体矿的专家系统）。 主观贝叶斯方法(ppt-24) 知识不确定性的表示 在主观Bayes方法中，知识是用产生式表示的，其形式为：IF E THEN (LS, LN) H E表示规则前提条件，它既可以是一个简单条件，也可以是用AND或OR把多个简单条件连接起来的复合条件。 H是结论，用P(H)表示H的先验概率，它指出没有任何专门证据的情况下结论H为真的概率，其值由领域专家根据以往的实践经验给出。 LS是规则的充分性度量。用于指出E对H的支持程度，取值范围为[0,+∞)，其定义为： LN是规则的必要性度量。用于指出E对H为真的必要程度，即﹁E对对H的支持程度。取值范围为[0,+∞)，其定义为： 证据不确定性的表示 组合证据不确定性的计算 不确定性的更新 主观贝叶斯方法的推理过程 可信度方法 什么是可信度 可信度是指人们根据以往经验对某个事物或现象为真的程度的一个判断，或者说是人们对某个事物或现象为真的相信程度。 在可信度方法中，由专家给出规则或知识的可信度，从而 避免对先验概率、条件概率的要求。 可信度方法是肖特里菲（Shortliffe）等人在确定性理论基础上结合概率论等理论提出的一种不精确推理模型。 该方法 直观、简单而且 效果好，在专家系统等领域获得了较为广泛的应用。 C-F模型 C-F模型：基于可信度表示的不确定性推理的基本方法，其他可信度方法都是基于此发展而来。 知识的不确定性表示 知识的不确定性表示：在C-F模型中，知识是用产生式规则表示的，其一般形式为： IF E THEN H (CF(H, E))E：知识的前提条件，可以是单一或复合条件；H：知识的结论，可以是单一结论或多个结论；CF(H, E)：知识的可信度，称为 可信度因子(Certainty Factor)或规则强度。 一般情况下，CF(H, E)的取值为[-1, 1]，表示当证据E为真时，对结论H的支持程度。其值越大，表示支持程度越大。 CF(H,E)&gt;0对应于P(H|E)&gt;P(H)； CF(H,E)=0对应于P(H|E)=P(H)； CF(H,E)&lt;0对应于P(H|E)&lt;P(H)。 例如：IF 发烧 AND 流鼻涕 THEN 感冒(0.7)，表示当某人确实有“发烧”及“流鼻涕”症状时，则有七成的把握是患了感冒。 CF(H,E)的定义: CF(H,E) = MB(H,E) - MD(H,E) MB ( Measure Belief ) 称为信任增长度，反映了证据对结论有利的一面。MB(H, E)定义为：* MD ( Measure Disbelief ) 称为不信任增长度，MD反映了证据对结论不利的一面。MD(H,E)定义为：* MB和MD的关系： 当P(H|E)&gt;P(H)时： E的出现增加了H的概率MB(H,E)&gt;0，MD(H,E)=0 当P(H|E)&lt;P(H)时： E的出现降低了H的概率MB(H,E) =0，MD(H,E)&gt;0因此，CF(H, E)的计算公式： 可信度的性质(ppt-25) 互斥性：对同一证据，不可能既增加对H的信任程度，又同时增加对H的不信任程度，即MB与MD是互斥的 当MB(H, E)&gt;0时，MD(H, E)=0 当MD(H, E)&gt;0时，MB(H, E)=0 值域：MB(H, E) ∈ [0,1]; MD(H, E) ∈ [0,1]; CF(H, E) ∈[-1,1], 当且仅当P(H|E)=1时, CF(H,E)=1 当且仅当P(H|E)=0时, CF(H,E)=-1 CF(H,E)定性地反映了P(H|E)的大小，因此可以用CF(H,E)近似表示P(H|E) ，描述规则的可信度。 对H的信任增长度等于对非H的不信任增长度 再根据CF的定义和MB、MD的互斥性有CF(H,E)+CF(﹁H,E)=0 对前提E，若支持若干个不同的结论Hi(i=1,2,…,n)，则 因此，如果发现专家给出的知识有如下情况CF(H1, E)=0.7, CF(H2, E)=0.4 则因0.7+0.4=1.1&gt;1为非法，应进行调整或规范化。 证据不确定性的表示 证据的E不确定性也用可信度因子CF(E)表示 CF(E)的取值范围：[-1，+1]。 CF(E)=1，证据E肯定它为真 CF(E)=-1，证据E肯定它为假 CF(E)=0，对证据E一无所知 0&lt;CF(E)&lt;1，证据E以CF(E)程度为真 -1&lt;CF(E)&lt;0，证据E以CF(E)程度为假 否定证据的不确定性计算 CF(¬E)=－CF(E) 组合证据的不确定性计算 可采用最大最小法 当组合证据E是多个单一证据的合取时，若已知CF(E1), …, CF(En)，则:CF(E)=min{CF(E1), CF(E2), … ,CF(En)} 当组合证据E是多个单一证据的析取时，若已知CF(E1), …, CF(En)，则:CF(E)=max{CF(E1), CF(E2), … ,CF(En)} 不确定性的更新 IF E THEN H (CF(H, E)) 结论H的可信度由下式计算： CF(H)=CF(H,E)×max{0,CF(E)} CF(H)的取值范围：[-1，+1]。 CF(H)=0: CF(E)&lt;0,即该模型没考虑E为假对H的影响 CF(H)&gt;0: 表示结论以某种程度为真 CF(H)&lt;0: 表示结论以某种程度为假 结论不确定性的合成 若由多条不同知识推出了相同的结论，但可信度不同，则用合成算法求出综合可信度。设有知识：IF E1 THEN H (CF(H, E1))IF E2 THEN H (CF(H, E2)) 则结论H 的综合可信度可分以下两步计算：(1)、分别对每条知识求出其CF(H)。即CF1(H)=CF(H, E1) ×max{0, CF(E1)}CF2(H)=CF(H, E2) ×max{0, CF(E2)} (2)、用如下公式求E1与E2对H的综合可信度 【例子】设有如下一组知识：1234r1：IF E1 THEN H (0.9)r2：IF E2 THEN H (0.6)r3：IF E3 THEN H (-0.5)r4：IF E4 AND ( E5 OR E6) THEN E1 (0.8) 已知：CF(E2)=0.8，CF(E3)=0.6，CF(E4)=0.5，CF(E5)=0.6,CF(E6)=0.8，求：CF(H)。 解：由r4得到：1234567891011121314151617181920 CF(E1) = 0.8×max&#123;0, CF(E4 AND (E5 OR E6))&#125; = 0.8×max&#123;0, min&#123;CF(E4), CF(E5 OR E6)&#125;&#125; = 0.8×max&#123;0, min&#123;CF(E4), max&#123;CF(E5), CF(E6)&#125;&#125;&#125; = 0.8×max&#123;0, min&#123;CF(E4), max&#123;0.6, 0.8&#125;&#125;&#125; = 0.8×max&#123;0, min&#123;0.5, 0.8&#125;&#125; = 0.8×max&#123;0, 0.5&#125; = 0.4 由r1得到： CF1(H) = CF(H, E1)×max&#123;0, CF(E1)&#125; = 0.9×max&#123;0, 0.4&#125; = 0.36 由r2得到： CF2(H) = CF(H, E2)×max&#123; 0, CF(E2) &#125; = 0.6×max&#123; 0, 0.8 &#125; = 0.48由r3得到： CF3(H) = CF(H, E3)×max&#123; 0, CF(E3) &#125; = -0.5×max&#123; 0, 0.6 &#125; = -0.3 根据结论不精确性的合成算法，CF1(H)和CF2(H)同号，有： CF12(H)和CF3(H)异号，有： 综合可信度为CF(H)=0.53。 证据理论(ppt-25-21)专家系统 专家系统的先行者费根鲍姆（Feigenbaum）曾把专家系统定义为一个应用知识和推理过程来求解那些需要大量的人类专家解决难题经验的智能计算机程序。专家系统主要指的是一个智能计算机程序系统，其内部含有大量的某个领域专家水平的知识与经验，能够利用人类专家的知识和解决问题的经验方法来处理该领域的高水平难题。 专家系统概述 专家系统是一个具有大量的专门知识与经验的程序系统，它应用人工智能技术和计算机技术，根据某领域一个或多个专家提供的知识和经验，进行推理和判断，模拟人类专家的决策过程，以便解决那些需要人类专家才能处理好的复杂问题。简而言之，专家系统是一种模拟人类专家解决领域问题的计算机程序系统。 专家系统的基本功能取决于它所含有的知识，因此，有时也把专家系统称为基于知识的系统（knowledge-based system）。 专家系统的特点 启发性 专家系统要解决的问题，其结构往往是不合理的，其问题求解（problem-solving）知识不仅包括理论知识和常识，而且包括专家本人的启发知识。 能运用专家的知识和经验进行推理、判断和决策。 透明性 专家系统能够解释本身的推理过程和回答用户提出的问题，以便让用户了解推理过程，提高对专家系统的信赖感。 问题求解过程中知识应用的合理性可由检验专家系统的解释推理路径来验证。 灵活性 专家系统的灵活性是指它的扩展和丰富知识库的能力，以及改善非编程状态下的系统性能，即自学习能力。 专家系统能不断增长知识，修改原有知识，不断更新 专家系统的优点 专家系统能够高效率、准确、周到、迅速和不知疲倦地进行工作。 专家系统解决实际问题时不受周围环境的影响，也不可能遗漏和忘记。 可以使专家的专长不受时间和空间的限制，以便推广珍贵和稀缺的专家知识与经验。 专家系统能促进各领域的发展，使各领域专家的专业知识和经验得到总结和精炼，能够广泛有力地传播专家的知识、经验和能力。 专家系统能汇集多领域专家的知识和经验以及他们协作解决重大问题的能力，它拥有更渊博的知识、更丰富的经验和更强的工作能力。 军事专家系统的水平是一个国家国防现代化的重要标志之一。 专家系统的研制和应用，具有巨大的经济效益和社会效益。 研究专家系统能够促进整个科学技术的发展。专家系统对人工智能各个领域的发展起了很大的促进作用，并将对科技、经济、国防、教育、社会和人民生活产生极其深远的影响。 专家系统的结构 专家系统简化结构图 理想专家系统的结构图 专家系统的主要组成部分： 知识库 综合数据库 推理机 解释器 接口 专家系统的建造步骤 设计初始知识库 问题知识化 知识概念化 概念形式化 形式规则化 规则合法化 原型机（prototype）的开发与实验 知识库的改进与归纳 基于规则的专家系统基于框架的专家系统一个基于规则的专家系统采用下列模块来建立产生式系统的模型： 知识库：以一套规则建立人的长期存储器模型。 工作存储器：建立人的短期存储器模型，存放问题事实和由规则激发而推断出的新事实。 推理机：借助于把存放在工作存储器内的问题事实和存放在知识库内的规则结合起来，建立人的推理模型，以推断出新的信息 。 基于框架的专家系统 基于框架的专家系统是一个计算机程序，该程序使用一组包含在知识库内的框架对工作存储器内的具体问题信息进行处理，通过推理机推断出新的信息。 基于框架的专家系统是建立在框架的基础之上的。一般概念存放在框架内，而该概念的一些特例则被表示在其他框架内并含有实际的特征值。 基于框架的专家系统能够提供基于规则专家系统所没有的特征，如继承、侧面、信息通信和模式匹配规则等，因而，基于框架的专家系统比基于规则的专家系统拥有更强的功能，适用于解决更复杂的问题。 基于模型的专家系统 关于人工智能的一个观点: 认为人工智能是对各种定性模型（物理的、感知的、认识的和社会的系统模型）的获得、表达及使用的计算方法进行研究的学问。一个知识系统中的知识库是由各种模型综合而成的。 模型类型：基于逻辑的心理模型、定性的物理模型、神经元网络模型、可视知识模型等等。 综合各种模型的专家系统比基于逻辑心理模型的系统具有更强的功能，从而有可能显著改进专家系统的设计 在诸多模型中，人工神经网络模型的应用最为广泛 基于Web的专家系统新型专家系统以上部分专家系统就不详叙了。 模糊逻辑系统模糊逻辑原理模糊逻辑的发展，是由理论准备到理论提出再到理论应用的过程 模糊集 从精确到模糊 精确 答案确定：要么是，要么不是 f : A → {0,1} 如：他是学生？不是学生？ 模糊 答案不定：也许是，也许不是，也许介于之间 μA : U → [0,1] 如：他是成年人？不是成年人？大概是成年人？ 【例子】表示“20岁左右” 原集合（年龄） {…., 17, 18, 19, 20, 21, 22, 23, …} 模糊集可以表示为： 0.8/18 + 0.9/19 + 1/20 + 0.9/21 + 0.8/12 0.6/17+0.7/18+0.8/19+1/20+0.9/21+0.7/22+0.6/23 集合及其特征函数 在论域中，把具有某种属性的事物的全体称为集合。由于集合中的元素都具有某种属性，因此可以用集合表示某一种概念，而且可用一个函数来刻画它，该函数称为特征函数。 设A是论域U上的一个集合，对任意u∈U，令 则称CA(u)为集合A的特征函数。特征函数CA(u)在u=u0处的取值CA(u0)称为u0对A的隶属度。 集合A与其特征函数可以认为是等价的：A={u |CA(u)=1} 模糊集与隶属函数 模糊集把特征函数的取值范围从{0,1}推广到[0,1]上。 设U是论域，μA是把任意u∈U映射为[0,1]上某个值的函数，即μA : U→[0,1] 或 u→μA(u) 则称μA为定义在U上的一个隶属函数，由μA(u)(u∈U)所构成的集合A称为U上的一个模糊集，μA(u)称为u对A的隶属度。 【例子】论域U={1,2,3,4,5}，用模糊集表示“大”和“小”。 解：设A、B分别表示“大”与“小”的模糊集，μA ，μB分别为相应的隶属函数。A = {0, 0, 0.1, 0.6, 1}B = {1, 0.5, 0.01, 0, 0}其中：μA(1)=0, μA(2)=0 , μA(3)=0.1 , μA(4)=0.6 , μA(5)=1μB(1)=1, μB(2)=0.5 , μB(3)=0.01 , μB(4)=0, μB(5)=0 模糊集的表示方法(1)、论域离散且为有限若论域 U={u1, … , un}为离散论域，模糊集A表示为：A= {μA(u1), μA(u2), … , μA(un)}也可写为：A= μA(u1)/u1 + μA(u2)/u2 + … + μA(un)/un其中，隶属度为0的元素可以不写。 例如：12A = 1/u1+0.7/u2+0/u3+0.4/u4 = 1/u1+0.7/u2+0.4/u4 (2)、论域连续若论域是连续的，则模糊集可用实函数表示。 例如：以年龄为论域U=[0,100]， “年轻”和“年老”这两个概念可表示为： (3)、一般表示方法不管论域 U 是有限的还是无限的，是连续的亦或是离散的，扎德（ L. A. Zadeh ）又给出了一种类似于积分的一般表示形式： 这里的记号不是数学中的积分符号，也不是求和，只是表示论域中各元素与其隶属度对应关系的总括。 模糊集的运算 模糊集的包含运算 设A、B分别是U 上的两个模糊集，对任意u∈U，都有 μB(u) ≤ μA(u) 成立，则称A包含B，记为B≤A。 模糊集的交、并、补运算 设A、B分别是U上的两个模糊集，则A和B两个集合的并集A∪B、交集A∩B和A的补集﹁A的隶属函数分别为： 【例子】设U={u1,u2,u3}，A=0.3/u1+0.8/u2+0.6/u3; B=0.6/u1+0.4/u2+0.7/u3求A∩B，A∪B和¬A。123456A∩B = (0.3∧0.6)/u1+(0.8∧0.4)/u2+(0.6∧0.7)/u3 = 0.3/u1+0.4/u2+0.6/u3A∪B = (0.3∨0.6)/u1+(0.8∨0.4)/u2+(0.6∨0.7)/u3 = 0.6/u1+0.8/u2+0.7/u3¬A = (1-0.3)/u1+(1-0.8)/u2+(1-0.6)/u3 = 0.7/u1+0.2/u2+0.4/u3 模糊关系模糊关系的定义 设 Ai 是 Ui (i=1,2,…,n) 上的模糊集，则称 为A1, A2, …, An的笛卡尔乘积，它是U1×U2×…×Un上的一个模糊集。 在U1×…×Un上一个n元模糊关系R是指以U1×…×Un为论域的一个模糊集，记为: 一般地说，当U和V都是有限论域时，U={u1,u2,…,um}，V={v1,v2,…,vn}，则U×V上的模糊关系R可用一个模糊矩阵表示 模糊关系的合成 设R1与R2分别是U×V与V×W上的两个模糊关系，则R1与R2的合成是指从U到W的一个模糊关系，记为R1°R2 其隶属函数为 隶属函数计算方法：取R1的第 i 行元素分别与R2的第 j 列元素相比较，两个数中取其小者，然后再在所得的一组最小数中取最大的一个，以此作为R1°R2的第 i 行第 j 列的元素。 【例子】设有两个模糊关系 则R1与R2的合成是 模糊变换模糊变换的概念设A={μA(u1),μA(u2),…,μA(un)}是论域U上的模糊集，R是U×V上的模糊关系，则A°R = B称为模糊变换。 例如：设A={0.2,0.5,0.3} 用模糊变换可进行模糊推理例如：设对某厨师做的一道菜进行评判评判标准是：色（u1）、香（u2） 、味（u3），它们构成论域：U= { u1, u2 , u3}。评判时由评委对每一个评判因素分别进行打分，评判等级是好（v1）、较好（v2） 、一般（v3）、差（v4），它们构成论域：V= {v1, v2 , v3 , v4}。仅就色而言，有60%的评委认为这道菜“好”， 20%的评委认为 “较好”，20%的评委认为 “一般”，没有评委认为 “差”，则对“色”的评价为：{0.6 , 0.2, 0.2, 0}对“香”的评价为：{0.8 , 0.1, 0.1, 0}对“味”的评价为：{0.3 , 0.3, 0.3, 0.1}这样就可以写出矩阵R： 假设三个评判因素在评判中所占的权重分别是：“色”为0.3，“香”为0.3，“味”为0.4。这三个权重组成了U上的一个模糊向量：A={0.3 , 0.3, 0.4}由此可得到评委对这道菜的综合评判为： 在此例中，评判结果的各项和刚好为1，所以它就是最终评判结果。如果不是这样，还需要对其进行归一化处理，将归一化后的结果作为最终评判结果。 模糊推理简单模糊推理(扎德法) 知识中只含有简单条件，且不带可信度因子的模糊推理称为简单模糊推理。关于如何由已知的模糊知识和证据具体地推出模糊结论，目前已经提出了多种推理方法。其中包括扎德（ L. A. Zadeh ）等人提出的合成推理规则。 扎德：基于模糊关系合成推理的基本思想 对于知识 “IF x is A THEN y is B”，首先构造出A与B之间的模糊关系R； 再将R与证据合成，求出结论。 合成推理规则：对于知识IF x is A THEN y is B 首先构造出A与B之间的模糊关系R，然后通过R与证据的合成求出结论。 如果已知证据是x is A’，且A与A’可以模糊匹配，则通过下述合成运算求取B’：B&#39;= A’ ◦R 如果已知证据是y is B&#39;，且B与B’可以模糊匹配，则通过下述合成运算求出A’：A’ =R◦B&#39; 至于如何构造模糊关系R： 条件命题的极大极小规则：记获得的模糊关系为Rm 设A∈F(U), B∈F(V)，其表示分别为 扎德把Rm定义为： 【例子】设U=V={1,2,3,4,5}, A=1/1+0.5/2, B=0.4/3+0.6/4+1/5并设模糊知识为：IF x is A THEN y is B模糊证据为：x is A’其中， A’的模糊集为： A’ =1/1+0.4/2+0.2/3 则：由模糊知识可得到 Rm 求B’：B’= A’ ◦R 若已知证据为: y is B’B&#39;=0.2/1+0.4/2+0.6/3+0.5/4 +0.3/5则： 模糊计算的流程模糊计算适用 复杂且没有完整数学模型的非线性问题：可在不知晓具体模型的情况下利用经验规则求解； 与其它智能算法结合实现优势互补: 提供了将人类在识别、决策、理解等方面的模糊性引入机器及其控制的途径。 模糊计算的过程 模糊规则库： 是专家提供的模糊规则。 模糊化： 是根据隶属度函数从具体的输入得到对模糊集隶属度的过程。 推理方法： 是从模糊规则和输入对相关模糊集的隶属度得到模糊结论的方法。 去模糊化： 就是将模糊结论转化为具体的、精确的输出的过程。 模糊计算的一般流程： 神经网络系统人工神经网络概述人工智能的各种学说 符号（功能）主义：符号逻辑推理 联结（结构）主义：人工神经网络 行为主义：智能行为模拟， “模式-动作”联结主义的观点：智能的寓所在大脑皮层，它由大量非线性神经元互联而成 并行处理的神经网络。 对比这几种模拟方法：123神经网络：是一种对人类智能的结构模拟方法，它是通过对大量人工神经元的广泛并行互联，构造人工神经网络系统去模拟生物神经系统的智能机理的。进化计算：是一种对人类智能的演化模拟方法，它是通过对生物遗传和演化过程的认识，用进化算法去模拟人类智能的进化规律的。模糊计算：是一种对人类智能的逻辑模拟方法，它是通过对人类处理模糊现象的认知能力的认识，用模糊逻辑去模拟人类的智能行为的。 人工神经网络（ANN）是反映人脑结构及功能的一种抽象数学模型，是由大量神经元节点互连而成的复杂网络，用以模拟人类进行知识的表示与存储以及利用知识进行推理的行为。 简单地讲，它是一个数学模型，可以用电子线路来实现，也可以用计算机程序来模拟，是人工智能研究的一种方法。 人工神经网络力求从四个方面模拟人脑的智能行为： 物理结构，计算模拟，存储与操作，训练 人工神经网络的特性 并行分布处理：并行结构，耐故障； 非线性映射：任意非线性映射能力； 通过训练进行学习：通过数据记录进行训练，能处理由数学模型或描述规则难以处理的问题； 适应与集成：自适应和信息融合能力； 硬件实现：快速和大规模处理能力。 人工神经元模型MP模型是美国心理学家麦克洛奇(W.McM ulloch)和数理逻辑学家皮茨(W.Pitts) 根据生物神经元的功能和结构，于1943年提出的一种将神经元看作二进制阈值元件的简单模型。MP模型是大多数神经网络模型的基础。MP模型示意图： 人工神经元是仿照生物神经元提出的，神经元可以有N个输入：x1,x2,x3,...,xN 每个输入端与神经元之间有一定的联接权值：w1,w2,w3,...,wN 神经元总的输入为对每个输入的加权求和，同时减去阈值θ。u代表神经元的活跃值，即神经元状态： 神经元的输出y是对u的映射： f 称为输出函数（激励函数，激活函数），可以有很多形式： 输出函数的作用 控制输入对输出的激活作用 对输入、输出进行函数转换 将可能无限域的输入变换成指定的有限范围内的输出 神经元的模型确定之后，一个神经网络的特性及能力主要取决于网络的拓扑结构及学习方法 人工神经网络（ANN）可以看成是以人工神经元为结点，用有向加权弧连接起来的有向图 人工神经元就是对生物神经元的模拟 有向弧则是轴突—突触—树突对的模拟 有向弧的权值表示相互连接的两个人工神经元间相互作用的强弱。 人工神经网络的分类 人工神经网络模型是指对网络结构、联结权值和学习能力的总括。常用的网络模型已有数十种。例如：传统的感知机模型；具有误差反向传播功能的反向传播网络模型；采用多变量插值的径向基函数网络模型；建立在统计学习理论基础上的支撑向量机网络模型；采用反馈联接方式的反馈网络模型；基于模拟退火算法的随机网络模型。 前馈网络 单层前馈网络单层前馈网络是指那种只拥有单层计算节点的前向网络。它仅含有输入层和输出层，且只有输出层的神经元是可计算节点。 其中，输入向量为X=(x1,x2,…,xn)；输出向量为Y=(y1,y2,…,ym)；输入层各个输入到相应神经元的连接权值分别是wij，i=1,2,..,n，j=1,2,.., m。若假设各神经元的阈值分别是θj，j=1,2,…,m，则各神经元的输出yj, j=1,2,..,m分别为： 其中，由所有连接权值wij构成的连接权值矩阵W为： 在实际应用中，该矩阵是通过大量的训练示例学习而形成的。 多层前馈网络多层前馈网络是指那种除拥有输入、输出层外，还至少含有一个、或更多个隐含层的前馈网络。典型代表：BP网络。 隐含层作用：通过对输入层信号的加权处理，将其转移成更能被输出层接受的形式。 反馈网络 反馈网络是指允许采用反馈联结方式所形成的神经网络。反馈联结方式：是指一个神经元的输出可以被反馈至同层或前层的神经元。典型代表：Hopfield网络。 前馈网络与反馈网络的区别 前馈网络：非循环连接模式，每个神经元的输入都没有包含该神经元先前的输出，因此不具有“短期记忆”的性质。 反馈网络：每个神经元的输入都有可能包含有该神经元先前输出的反馈信息，这就有点类似于人类的短期记忆的性质。 传统的感知器模型 感知器是美国学者罗森勃拉特（Rosenblatt）于1957年为研究大脑的存储、学习和认知过程而提出的一类具有自学习能力的神经网络模型，其拓扑结构是一种分层前向网络。包括：单层感知器和多层感知器。 使用感知器的主要目的是 为了对外部输入进行分类。罗森勃拉特已经证明，如果外部输入是线性可分的（指存在一个超平面可以将它们分开），则单层感知器一定能够把它划分为两类。其判别超平面由如下判别式确定： 作为例子，下面讨论用单个感知器实现逻辑运算的问题。 单层感知器单层感知器是一种只具有单层可调节连接权值神经元的前向网络，这些神经元构成了单层感知器的输出层，是感知器的可计算节点。 在单层感知器中，每个可计算节点都是一个线性阈值神经元。当输入信息的加权和大于或等于阈值时，输出为1，否则输出为0或-1。 单层感知器的输出层的每个神经元都只有一个输出，且该输出仅与本神经元的输入及联接权值有关，而与其他神经元无关。 单层感知器可以很好地实现“与”、“或”、“非”运算，但却 不能解决“异或”问题。 多层感知器多层感知器是通过在单层感知器的输入、输出层之间加入一层或多层处理单元所构成的。 拓扑结构与多层前馈网络相似，差别在于其计算节点的连接权值是可变的。 输入与输出呈现高度非线性的映射关系。 BP网络模型 误差反向传播(Error Back Propagation)网络简称为BP网络，是由美国加州大学的鲁梅尔哈特和麦克莱兰于1985年提出的一种网络模型。 在BP网络中，同层节点之间不存在相互连接，层与层之间多采用全互连方式，且各层的连接权值可调。BP网络实现了明斯基的多层网络的设想，是当今神经网络模型中使用最广泛的一种。 如上图所示，BP网络的网络拓扑结构是多层前向网络。 对BP网络需说明以下两点：第一，BP网络的每个处理单元均为非线性输入/输出关系，其作用函数通常采用的是可微的Sigmoid函数，如：！第二，BP网络的学习过程是由工作信号的正向传播和误差信号的反向传播组成的。所谓正向传播，是指输入模式经隐层到输出层，最后形成输出模式；所谓误差反向传播，是指从输出层开始逐层将误差传到输入层，并修改各层联接权值，使误差信号为最小的过程。 BP网络模型 Hopfield网络是由美国加州工学院物理学家霍普菲尔特1982年提出来的一种单层全互连的对称反馈网络模型。分为离散Hopfield网络和连续Hopfield网络。 离散Hopfield网络是在非线性动力学的基础上由若干基本神经元构成的一种单层全互连网络，其任意神经元之间均有连接，并且是一种对称连接结构。离散Hopfield网络模型是一个离散时间系统，每个神经元只有0和1（或-1和1）两种状态，任意神经元i和j之间的连接权值为Wij。由于神经元之间为对称连接，且神经元自身无连接，因此有 由该连接权值所构成的连接矩阵是一个零对角的对称矩阵。 在 Hopfield网络中，虽然神经元自身无连接，但由于每个神经元都与其他神经元相连，即每个神经元的输出都将通过突触连接权值传递给别的神经元，同时每个神经元又都接受其他神经元传来的信息，这样对每个神经元来说，其输出经过其他神经元后又有可能反馈给自己，因此Hopfidld网络是一种反馈神经网络 。 【例子】已知网络结构如图所示，网络输入输出路标所示。其中，f(x)为x的符号函数 。利用误差传播学习算法调整神经网络权值。 解题过程： 机器学习系统机器学习的基本概念 机器学习是人工智能的核心，通过使机器模拟人类学习行为，智能化地从过去的经历中获得经验，从而改善其整体性能，重组内在知识结构，并对未知事件进行准确的推断。 机器学习在科学和工程诸多领域都有着非常广泛的应用，例如金融分析、数据挖掘、生物信息学、医学诊断等。生活中常见的一些智能系统也广泛使用机器学习算法，例如电子商务、手写输入、邮件过滤等。 机器学习的定义:西蒙（Simon,1983）：学习就是系统中的适应性变化，这种变化使系统在重复同样工作或类似工作时，能够做得更好。 明斯基（Minsky,1985）：学习是在人们头脑里（心理内部）有用的变化。 学习是一个有特定目的知识获取和能力增长过程，其内在行为是获得知识、积累经验、发现规律等，其外部表现是改进性能、适应环境、实现自我完善等。 机器学习是研究如何使用机器来模拟人类学习活动的一门学科。 进入21世纪，机器学习的阶段研究热点：2000-2006年的流形学习、2006-2011年的稀疏学习、2012年-至今的深度学习、未来：迁移学习？ 机器学习与深度学习的关系 机器学习是一种实现人工智能的方法，深度学习是一种实现机器学习的技术。深度学习本来并不是一种独立的学习方法，其本身也会用到监督和无监督的学习方法来训练深度神经网络。 最初的深度学习是利用深度神经网络来解决特征表达的一种学习过程。 提一下，深度学习目前存在以下问题 深度学习模型需要大量的训练数据，才能展现出神奇的效果，但现实生活中往往会遇到小样本问题，此时深度学习方法无法下手，传统的机器学习方法就可以处理。 有些领域，采用传统的简单的机器学习方法，可以很好地解决了，没必要非得用复杂的深度学习方法。 深度学习的思想，来源于人脑的启发，但绝不是人脑的模拟。举个例子，一个三岁的小孩看一辆自行车之后，再见到哪怕外观完全不同的自行车，小孩也十有八九就能做出那是一辆自行车的判断，也就是说，人类的学习过程往往不需要大规模的训练数据，而现在的深度学习方法显然不是对人脑的模拟。 机器学习策略与基本结构机器学习的主要策略 按照学习中使用推理的多少，机器学习所采用的策略大体上可分为4种： 机械学习：记忆学习方法，即把新的知识存储起来，供需要时检索调用，而不需要计算和推理。 示教学习：外界输入知识与内部知识的表达不完全一致，系统在接受外部知识时需要推理、翻译和转化。 类比学习：需要发现当前任务与已知知识的相似之处，通过类比给出完成当前任务的方案。 示例学习：需要从一组正例和反例中分析和总结出一般性的规律，在新的任务中推广、验证、修改规律。 学习系统的基本结构 影响学习系统设计的要素 环境：环境向系统提供信息的水平（一般化程度）和质量（正确性） 知识库：表达能力，易于推理，容易修改，知识表示易于扩展。 归纳学习 归纳学习是应用归纳推理进行学习的一种方法。 归纳学习的模式： 实验规划过程通过对实例空间的搜索完成实例选择，并将这些选中拿到的活跃实例提交给解释过程。解释过程对实例加以适当转换，把活跃实例变换为规则空间中的特定概念，以引导规则空间的搜索。 归纳学习是目前研究得最多的学习方法，其学习目的是为了获得新概念、构造新规则或发现新理论。 根据归纳学习有无教师指导，可把它分为 示例学习：给学习者提供某一概念的一组正例和反例，学习者归纳出一个总的概念描述（规则），并使这个描述适合于所有的正例，排除所有的反例。 观察发现学习： 概念聚类：按照一定的方式和准则分组，归纳概念 机器发现：从数据和事例中发现新知识 类比学习 类比学习（learning by analogy）就是通过类比，即通过对相似事物加以比较所进行的一种学习 。 类比学习是利用二个不同领域（源域、目标域）中的知识相似性，可以通过类比，从源域的知识（包括相似的特征和其它性质）推导出目标域的相应知识，从而实现学习。例如： 一个从未开过truck的司机，只要他有开car的知识就可完成开truck的任务。 若把某个人比喻为消防车，则可通过观察消防车的行为，推断出这个人的性格。 类比学习系统可以使一个已有的计算机应用系统转变为适应于新的领域，来完成原先没有设计的相类似的功能。 类比推理过程： 回忆与联想：找出当前情况的相似情况 选择：选择最相似的情况及相关知识 建立对应关系：建立相似元素之间的映射 转换：求解问题或产生新的知识 类比学习研究类型 问题求解型的类比学习：求解一个新问题时，先回忆以前是否求解过类似问题，若是，则以此为依据求解新问题。 预测推理型的类比学习 传统的类比法：用来推断一个不完全确定的事物可能还有的其他属性 因果关系型：已知因果关系S1:A-&gt;B，如果有A&#39;≌A，则可能有B’满足A&#39;-&gt;B&#39; 解释学习 解释学习(Explanation-based learning, EBL)兴起于20世纪80年代中期，根据任务所在领域知识和正在学习的概念知识，对当前实例进行分析和求解，得出一个表征求解过程的因果解释树，以获取新的知识。例如：学生根据教师提供的目标概念、该概念的一个例子、领域理论及可操作准则，首先构造一个解释来说明为什么该例子满足目标概念，然后将解释推广为目标概念的一个满足可操作准则的充分条件。 解释学习过程和算法米切尔提出了一个解释学习的统一算法EBG，建立了基于解释的概括过程，并用知识的逻辑表示和演绎推理进行问题求解。其一般性描述为： 给定：领域知识DT、目标概念TC、训练实例TE、操作性准则OC 找出：满足OC的关于TC的充分条件 EBG算法可概括为两步： 构造解释：运用领域知识进行演绎，证明提供给系统的训练实例为什么是满足目标概念的一个实例。 获取一般性的知识： 任务：对上一步得到的解释结构进行一般化的处理，从而得到关于目标概念的一般性知识。 方法：将常量换成变量，并把某些不重要的信息去掉，只保留求解问题必须的关键信息。 神经网络学习(ppt-21-32)Hebb学习纠错学习竞争学习及随机学习感知器学习单层感知器学习算法可描述如下：(1)、设t=0，初始化连接权和阈值。即给wi(0)(i=1, 2, … ,n)及θ(0)分别赋予一个较小的非零随机数，作为初值。其中，wi(0)是第0次迭代时输入向量中第i个输入的连接权值；θ(0)是第0次迭代时输出节点的阈值；(2)、提供新的样本输入xi(t)(i=1, 2, … , n)和期望输出d(t)；(3)、计算网络的实际输出： (4)、若y(t)=d(t)，不需要调整连接权值，转(6)。否则，需要调整权值；(5)、调整连接权值； 其中，η是一个增益因子，用于控制修改速度，其值如果太大，会影响wi(t)的收敛性；如果太小，又会使wi(t)的收敛速度太慢;(6)、判断是否满足结束条件，若满足，算法结束；否则，将t值加1，转(2)重新执行。这里的结束条件一般是指wi(t)对一切样本均稳定不变。若输入的两类样本是线性可分的，则该算法就一定会收敛。否则，不收敛。 【例子】用单层感知器实现逻辑“与”运算。 解：根据“与”运算的逻辑关系，可将问题转换为：输入向量：X1=[0, 0, 1, 1]X2=[0, 1, 0, 1]输出向量：Y=[0, 0, 0, 1]为减少算法的迭代次数，设初始连接权值和阈值取值如下：w1(0)=0.5, w2(0)=0.7, θ(0)=0.6并取增益因子η=0.4。 算法的学习过程如下：设两个输入为x1(0)=0和x2(0)=0，其期望输出为d(0)=0，实际输出为：1234y(0)=f(w1(0)x1(0)+ w2(0)x2(0)-θ(0)) =f(0.5*0+0.7*0-0.6) =f(-0.6) =0 实际输出与期望输出相同，不需要调节权值。再取下一组输入：x1(0)=0和x2(0)=1，期望输出d(0)=0，实际输出：1234y(0)=f(w1(0) x1(0)+ w2(0) x2(0)-θ(0)) =f(0.5*0+0.7*1-0.6) =f(0.1) =1 实际输出与期望输出不同，需要调节权值，其调整如下：123θ(1)=θ(0)+η(d(0)- y(0))*(-1)=0.6+0.4*(0-1)*(-1)=1w1(1)=w1(0)+η(d(0)- y(0))x1(0)=0.5+0.4*(0-1)*0=0.5w2(1)=w2(0)+η(d(0)- y(0))x2(0)=0.7+0.4*(0-1)*1=0.3 取下一组输入：x1(1)=1和x2(1)=0，其期望输出为d(1)=0，实际输出为：1234y(1)=f(w1(1) x1(1)+ w2(1) x2(1)-θ(1)) =f(0.5*1+0.3*0-1) =f(-0.51) =0 实际输出与期望输出相同，不需要调节权值。再取下一组输入：x1(1)=1和x2(1)=1，其期望输出为d(1)=1，实际输出为：1234y(1)=f(w1(1) x1(1)+ w2(1) x2(1)-θ(1)) =f(0.5*1+0.3*1-1) =f(-0.2) =0 实际输出与期望输出不同，需要调节权值，其调整如下：123θ(2)=θ(1)+η(d(1)- y(1))*(-1)=1+0.4*(1-0)*(-1)=0.6w1(2)=w1(1)+η(d(1)- y(1))x1(1)=0.5+0.4*(1-0)*1=0.9w2(2)=w2(1)+η(d(1)- y(1))x2(1)=0.3+0.4*(1-0)*1=0.7 取下一组输入：x1(2)=0和x2(2)=0，其期望输出为d(2)=0，实际输出为：y(2)=f(0.9*0+0.7*0-0.6)=f(-0.6)=0实际输出与期望输出相同，不需要调节权值.再取下一组输入：x1(2)=0和x2(2)=1，期望输出为d(2)=0，实际输出为：y(2)=f(0.9*0+0.7*1-0.6)=f(0.1)=1实际输出与期望输出不同，需要调节权值，其调整如下：123θ(3)=θ(2)+η(d(2)- y(2))*(-1)=0.6+0.4*(0-1)*(-1)=1w1(3)=w1(2)+η(d(2)- y(2))x1(2)=0.9+0.4*(0-1)*0=0.9w2(3)=w2(2)+η(d(2)- y(2))x2(2)=0.7+0.4*(0-1)*1=0.3 实际上，由与运算的阈值条件可知，此时的阈值和连接权值以满足结束条件，算法可以结束。对此，可检验如下：对输入：“0 0”有y=f(0.9*0+0.3*0-1)=f(-1)=0对输入：“0 1”有y=f(0.9*0+0.3*0.1-1)=f(-0.7)=0对输入：“1 0”有y=f(0.9*1+0.3*0-1)=f(-0.1)=0对输入：“1 1”有y=f(0.9*1+0.3*1-1)=f(0.2)=1 多层感知器可以解决非线性可分问题，但其隐层神经元的期望输出却不易给出。而单层感知器学习是一种有导师指导的学习过程，因此其学习算法无法直接用于多层感知器。由于多层感知器和BP网络都属于前向网络，并能较好解决多层前馈网络的学习问题.因此，可用BP学习来解决多层感知器学习问题。 BP网络学习Hopfield网络学习其他机器学习方法 迁移学习：将在先前任务中学到的知识或技能应用于一个新的任务或新的领域 增强机器学习：从变化环境中学习蕴含在环境中的知识 流形机器学习：把一组在高维空间中的数据在低维空间中重新表示 半监督机器学习：结合标记和非标记样本 多实例机器学习：一个对象可能同时有多个描述 Ranking机器学习：获得关于检索中“喜欢”顺序的模型 数据流机器学习：从数据流中发现知识 …… 相关的一些概念：决策树、 随机森林、逻辑回归、朴素贝叶斯、K最近临算法、马尔可夫…… 仿生进化系统(GA) 遗传算法最早由美国密西根大学的J. Holland 教授提出，起源于20世纪60年代对自然和人工自适应系统的研究。70年代，De Jong 基于遗传算法的思想在计算机上进行了大量的纯数值函数优化计算实验。在一系列研究工作的基础上，80年代由Goldberg进行归纳总结，形成了遗传算法的基本框架 遗传算法的定义遗传算法（Genetic Algorithm, GA）是模拟生物在自然环境种的遗传和进化过程而形成的一种自适应全局优化概率搜索算法。 遗传算法的基本思想是从初始种群出发，采用优胜劣汰、适者生存的自然法则选择个体，并通过杂交、变异来产生新一代种群，如此逐代进化，直到满足目标为止。 遗传算法的基本过程 算法主要内容和基本步骤 (1) 选择编码策略，将问题搜索空间中每个可能的点用相应的编码策略表示出来，即形成染色体；(2) 定义遗传策略，包括种群规模N，交叉、变异方法，以及选择概率Pr、交叉概率Pc、变异概率Pm等遗传参数；(3) 令t=0，随机选择N个染色体初始化种群P(0)；(4) 定义适应度函数f（f&gt;0）；(5) 计算P(t)中每个染色体的适应值；(6) t=t+1；(7) 运用选择算子，从P(t-1)中得到P(t)；(8) 对P(t)中的每个染色体，按概率Pc参与交叉；(9) 对染色体中的基因，以概率Pm参与变异运算；(10) 判断群体性能是否满足预先设定的终止标准，若不满足则返回(5)。 常用的遗传编码算法 霍兰德二进制码 二进制编码是将原问题的结构变换为染色体的位串结构。在二进制编码中，首先要确定二进制字符串的长度 ，该长度与变量的定义域和所求问题的计算精度有关。 格雷编码（Gray Code） 格雷编码是对二进制编码进行变换后所得到的一种编码方法。这种编码方法要求两个连续整数的编码之间只能有一个码位不同，其余码位都是完全相同的。它有效地解决了汉明悬崖问题。 实数编码 实数编码是将每个个体的染色体都用某一范围的一个实数（浮点数）来表示，其编码长度等于该问题变量的个数。 这种编码方法是将问题的解空间映射到实数空间上，然后在实数空间上进行遗传操作。由于实数编码使用的是变量的真实值，因此这种编码方法也叫做真值编码方法。 实数编码适应于那种多维、高精度要求的连续函数优化问题。 字符编码 适应度函数 适应度函数是一个用于对个体的适应性进行度量的函数。通常，一个个体的适应度值越大，它被遗传到下一代种群中的概率也就越大。 (1) 常用的适应度函数 原始适应度函数：直接将待求解问题的目标函数f(x)定义为遗传算法的适应度函数。 优点：能够直接反映出待求解问题的最初求解目标 缺点：是有可能出现适应度值为负的情况。 标准适应度函数 在遗传算法中，一般要求适应度函数非负，并其适应度值越大越好。这就往往需要对原始适应函数进行某种变换，将其转换为标准的度量方式，以满足进化操作的要求，这样所得到的适应度函数被称为标准适应度函数。(2) 适应度函数的加速变换 在某些情况下，需要对适应度函数进行加速速度。 适应度函数的加速变换有两种基本方法，即线性加速与非线性加速。 线性加速 线性加速的适应度函数的定义如下： f&#39;(x)=αf(x)+β 其中，f(x)是加速转换前的适应度函数；f’(x)是加速转换后的适应度函数；α和β是转换系数,它们应满足如下条件： 变化后得到的新的适应度函数平均值要等于原适应度函数的平均值。即 其中，xi(i=1,…,n)为当前代中的染色体。 变换后所得到的新的种群个体所具有的最大适应度要等于其平均适应度的指数倍数。即有关系： 式中，xi(i=1,…,n)为当前代中的染色体，M是指将当前的最大适应度放大为平均值的M倍。目的是通过M拉开不同染色体适应度值的差距。 非线性加速 幂函数变换方法 f&#39;(x)=f(x)k 指数变换方法 f&#39;(x)=exp(-βf(x)) 基本遗传操作 (1)、选择操作选择（Selection）操作是指根据选择概率按某种策略从当前种群中挑选出一定数目的个体，使它们能够有更多的机会被遗传到下一代中。常用的选择策略: 比例选择 排序选择 竞技选择 其中比例选择基本思想是：各个个体被选中的概率与其适应度大小成正比。 常用的比例选择策略:轮盘赌选择、繁殖池选择 轮盘赌选择轮盘赌选择法又被称为转盘赌选择法或轮盘选择法。在这种方法中，个体被选中的概率取决于该个体的相对适应度。而相对适应度的定义为： 其中，P(xi)是个体xi的相对适应度，即个体xi被选中的概率；f(xi)是个体xi的原始适应度；是种群的累加适应度。 轮盘赌选择算法的基本思想是：根据每个个体的选择概率P(xi)将一个圆盘分成N个扇区，其中第i个扇区的中心角为： 再设立一个移动指针，将圆盘的转动等价为指针的移动。选择时，假想转动圆盘，若静止时指针指向第i个扇区，则选择个体i。从统计角度看，个体的适应度值越大，其对应的扇区的面积越大，被选中的可能性也越大。这种方法有点类似于发放奖品使用的轮盘，并带有某种赌博的意思，因此亦被称为轮盘赌选择。 (2)、交叉操作 交配重组是自然界中生物遗传进化的一个主要环节，也是遗传算法中产生新的个体的最主要方法。 交叉（Crossover）操作是指按照某种方式对选择的父代个体的染色体的部分基因进行交配重组，从而形成新的个体。 根据个体编码方法的不同，遗传算法中的交叉操作可分为二进制交叉和实值交叉两种类型。 二进制交叉 二进制交叉（Binary Valued Crossover）是指二进制编码情况下所采用的交叉操作，它主要包括单点交叉、两点交叉、多点交叉和均匀交叉等方法。 单点交叉 单点交叉也称简单交叉，它是先在两个父代个体的编码串中随机设定一个交叉点，然后对这两个父代个体交叉点前面或后面部分的基因进行交换，并生成子代中的两个新的个体。假设两个父代的个体串分别是： X=x1 x2 … xk xk+1 … xn Y=y1 y2 … yk yk+1 … yn 随机选择第k位为交叉点，若采用对交叉点后面的基因进行交换的方法，但点交叉是将X中的xk+1到xn部分与Y中的yk+1到yn部分进行交叉，交叉后生成的两个新的个体是： X&#39;= x1 x2 … xk yk+1 … yn Y&#39;= y1 y2 … yk xk+1 … xn 两点交叉 两点交叉是指先在两个父代个体的编码串中随机设定两个交叉点，然后再按这两个交叉点进行部分基因交换，生成子代中的两个新的个体。 假设两个父代的个体串分别是： X=x1 x2 … xi … xj … xn Y=y1 y2 … yi … yj …,yn 随机设定第i、j位为两个交叉点（其中i&lt; j &lt; n），两点交叉是将X中的xi+1到xj部分与Y中的yi+1到yj部分进行交换，交叉后生成的两个新的个体是： X&#39;= x1 x2 … xi yi+1 … yj xj+1 … xn Y&#39;= y1 y2 … yi xi+1 … xj yj+1 … yn 多点交叉 多点交叉是指先随机生成多个交叉点，然后再按这些交叉点分段地进行部分基因交换，生成子代中的两个新的个体。 假设交叉点个数为m，则可将个体串划分为m+1个分段，其划分方法是： 当m为偶数时，对全部交叉点依次进行两两配对，构成m/2个交叉段。 当m为奇数时，对前(m-1)个交叉点依次进行两两配对，构成(m-1)/2个交叉段，而第m个交叉点则按单点交叉方法构成一个交叉段。 均匀交叉 均匀交叉（Uniform Crossover）是先随机生成一个与父串具有相同长度，并被称为交叉模版（或交叉掩码）的二进制串，然后再利用该模版对两个父串进行交叉，即将模版中1对应的位进行交换，而0对应的位不交换，依此生成子代中的两个新的个体。事实上，这种方法对父串中的每一位都是以相同的概率随机进行交叉的。 实值交叉 实值交叉是在实数编码情况下所采用的交叉操作，主要包括离散交叉和算术交叉，下面主要讨论离散交叉（部分离散交叉和整体离散交叉） 。 部分离散交叉是先在两个父代个体的编码向量中随机选择一部分分量，然后对这部分分量进行交换，生成子代中的两个新的个体。 整体交叉则是对两个父代个体的编码向量中的所有分量，都以1/2的概率进行交换，从而生成子代中的两个新的个体。 以部分离散交叉为例，假设两个父代个体的n维实向量分别是 X=x1x2… xi…xk…xn和Y=y1y2…yi…yk…yn，若随机选择对第k个分量以后的所有分量进行交换，则生成的两个新的个体向量是： X&#39;= x1 x2 … xk yk+1 … yn Y&#39;= y1 y2 … yk xk+1 … xn (3)、变异操作变异（Mutation）是指对选中个体的染色体中的某些基因进行变动，以形成新的个体。变异也是生物遗传和自然进化中的一种基本现象，它可增强种群的多样性。遗传算法中的变异操作增加了算法的局部随机搜索能力，从而可以维持种群的多样性。根据个体编码方式的不同，变异操作可分为二进制变异和实值变异两种类型。 二进制变异 当个体的染色体采用二进制编码表示时，其变异操作应采用二进制变异方法。该变异方法是先随机地产生一个变异位，然后将该变异位置上的基因值由“0”变为“1”，或由“1”变为“0”，产生一个新的个体。 实值变异 当个体的染色体采用实数编码表示时，其变异操作应采用实值变异方法。该方法是用另外一个在规定范围内的随机实数去替换原变异位置上的基因值，产生一个新的个体。 基于位置的变异方法 该方法是先随机地产生两个变异位置，然后将第二个变异位置上的基因移动到第一个变异位置的前面。 基于次序的变异 该方法是先随机地产生两个变异位置，然后交换这两个变异位置上的基因。 遗传算法的优势 适应度函数不受连续、可微等条件的约束，适用范围很广。 不容易陷入局部极值，能以很大的概率找到全局最优解。 由于其固有的并行性，适合于大规模并行计算。 不是盲目穷举，而是启发式搜索。 群智能系统 由James Kenney（社会心理学博士）和Russ Eberhart（电子工程学博士）于1995年提出粒子群算法（Particle Swarm Optimization, PSO）。 蚁群算法(Ant Colony Optimization,ACO)通过遗留在来往路径上的信息素（Pheromone）的挥发性化学物质来进行通信和协调。 蚂蚁在寻找食物的过程中往往是随机选择路径的，但它们能感知当前地面上的信息素浓度，并倾向于往信息素浓度高的方向行进。信息素由蚂蚁自身释放，是实现蚁群内间接通信的物质。 由于较短路径上蚂蚁的往返时间比较短，单位时间内经过该路径的蚂蚁多，所以信息素的积累速度比较长路径快。因此，当后续蚂蚁在路口时，就能感知先前蚂蚁留下的信息，并倾向于选择一条较短的路径前行。 这种正反馈机制使得越来越多的蚂蚁在巢穴与食物之间的最短路径上行进。由于其他路径上的信息素会随着时间蒸发，最终所有的蚂蚁都在最优路径上行进。 ACO基本要素 路径构建伪随机比例选择规则 对于每只蚂蚁k，路径记忆向量Rk按照访问顺序记录了所有k已经经过的城市序号。 设蚂蚁k当前所在城市为i，则其选择城市j作为下一个访问对象的概率如上式。Jk(i) 表示从城市i 可以直接到达的、且又不在蚂蚁访问过的城市序列Rk中的城市集合。 η(i, j)是一个启发式信息，通常由η (i, j)=1/dij 直接计算。 τ (i, j) 表示边(i, j)上的信息素量。 长度越短、信息素浓度越大的路径被蚂蚁选择的概率越大。 α和β是两个预先设置的参数，用来控制启发式信息与信息素浓度作用的权重关系。 当α =0时，算法演变成传统的随机贪心算法，最邻近城市被选中的概率最大。当β =0时，蚂蚁完全只根据信息素浓度确定路径，算法将快速收敛，这样构建出的最优路径与实际目标差异较大，算法性能较差。 信息素更新：(1) 在算法初始化时，问题空间中所有的边上的信息素都被初始化为τ0。(2) 算法迭代每一轮，问题空间中的所有路径上的信息素都会发生蒸发，我们为所有边上的信息素乘上一个小于1的常数( ρ: 信息素的蒸发率)。信息素蒸发是自然界本身固有的特征，在算法中能够帮助避免信息素的无限积累，使得算法可以快速丢弃之前构建过的较差的路径。(3) 蚂蚁根据自己构建的路径长度在它们本轮经过的边上释放信息素。蚂蚁构建的路径越短、释放的信息素就越多。一条边被蚂蚁爬过的次数越多、它所获得的信息素也越多。(4) 迭代 (2)，直至算法终止。信息素的更新公式： m：蚂蚁个数； ρ：信息素的蒸发率，规定0&lt;r≤1。 Δτ (i, j)：第k只蚂蚁在它经过的边上释放的信息素量，它等于蚂蚁k本轮构建路径长度的倒数。 Ck：路径长度，它是Rk中所有边的长度和。 粒子群优化算法 源于对鸟群捕食行为的研究，是基于迭代的方法 简单易于实现，需要调整的参数相对较少 在函数优化、神经网络训练、工业系统优化和模糊系统控制等领域得到了广泛的应用。 鸟群：假设一个区域，所有的鸟都不知道食物的位置，但是它们知道当前位置离食物还有多远。 PSO算法：每个解看作一只鸟，称为“粒子(particle)”，所有的粒子都有一个适应值，每个粒子都有一个速度决定它们的飞翔方向和距离，粒子们追随当前最优粒子在解空间中搜索。 粒子群算法的特点 PSO算法收敛速度快，特别是在算法的早期，但也存在着精度较低，易发散等缺点。 若加速系数、最大速度等参数太大，粒子群可能错过最优解，算法不收敛； 而在收敛的情况下，由于所有的粒子都向最优解的方向飞去，所以粒子趋向同一化（失去了多样性），使得后期收敛速度明显变慢，同时算法收敛到一定精度时，无法继续优化，所能达到的精度也不高。 其他计算智能方法模拟退火、工免疫系统、粗集理论、EDA算法、文化进化计算、量子计算、DNA计算、智能Agent、…… 多真体及自然语言理解 *Agent的定义和译法 Agent的定义 定义1.社会中某个个体经过协商后可求得问题的解，这个个体就是agent.（明斯基，1986年） 定义2.是一种通过传感器知其环境，并通过执行器作用于该环境的实体，因此，可以把真体定义为一种从感知序列到实体动作的映射。（Russell and Norving,1995） 定义3.是一种具有智能的实体。 Agent的译法 建议把agent译为“(艾)真体”的理由： Agent是一种通过传感器感知其环境，并通过执行器作用于该环境的实体。 这个“实体”也可叫做“真体”。因此，可以把真体定义为一种从感知序列到实体动作的映射。 译为“主体”可能是考虑到agent具有自主性。但交互性、协调性、社会性、适应性和分布性等不可能在译名上全部反映出来，因而是片面的。 译为“代理”是受到社会科学和管理科学的影响。也不能表示出agent的原义。 音译不失为一种可取方法。 有一定的物理意义。 真体的要素和特性 真体的要素 真体必须利用知识修改其内部状态（心理状态），以适应环境变化和协作求解的需要。真体的行动受其心理状态驱动。人类心理状态的要素有认知（信念、知识、学习等）、情感（愿望、兴趣、爱好等）和意向（意图、目标、规划和承诺等）三种。着重研究信念（belief）、愿望（desire）和意图（intention）的关系及其形式化描述，力图建立真体的BDI（信念、愿望和意图）模型，已成为真体理论模型研究的主要方向。 真体的特性 行为自主性：能够控制自身行为，其行为是主动的、自发的/有目标和意图的，并能根据目标和环境要求对短期行为做出规划。 作用交互性：能够与环境交互作用，能够感知其所处环境，并借助自己的行为结果，对环境做出适当反应。 环境协调性：真体存在于一定的环境中，感知环境的状态、事件和特征，并通过其动作和行为影响环境，与环境保持协调。环境和真体互相依存，互相作用。 面向目标性：真体能够表现出某种目标指导下的行为，为实现其内在目标而采取主动行为。 存在社会性：真体存在于由多个真体构成的社会环境中，与其它真体交换信息、交互作用和通讯。各真体通过社会承诺，进行社会推理，实现社会意向和目标。 工作协调性：各真体合作和协调工作，求解单个真体无法处理的问题，提高处理问题的能力。 运行持续性：真体的程序在起动后，能够在相当长的一段时间内维持运行状态，不随运算的停止而立即结束运行。 系统适应性：真体不仅能够感知环境，对环境做出反应，而且能够把新建立的真体集成到系统中而无需对原有的多真体系统进行重新设计，因而具有很强的适应性和可扩展性。 结构分布性：在物理上或逻辑上分布和异构的实体（或真体），如主动数据库、知识库、控制器和执行器等，在多真体系统中具有分布式结构，便于技术集成、资源共享、性能优化和系统整合。 功能智能性：真体强调理性作用，可作为描述机器智能、动物智能和人类智能的统一模型。 自然语言理解 Natural Language Understanding 俗称人机对话。研究用电子计算机模拟人的语言交际过程，使计算机能理解和运用人类社会的自然语言如汉语、英语等，实现人机之间的自然语言通信，以代替人的部分脑力劳动，包括查询资料、解答问题、摘录文献、汇编资料以及一切有关自然语言信息的加工处理。这一领域的研究涉及自然语言，即人们日常使用的语言，包括中文、英文、俄文、日文、德文、法文等等，所以它与语言学的研究有着密切的联系，但又有重要的区别。自然语言处理并不是一般地研究自然语言，而在于研制能有效地实现自然语言通信的计算机系统，特别是其中的软件系统。 实现人机间自然语言通信意味着要使计算机既能理解自然语言文本的意义(即自然语言理解)，也能以自然语言文本来表达给定的意图、思想等(即自然语言生成)。无论实现自然语言理解，还是自然语言生成，都远不如人们原来想象的那么简单，而是十分困难的。从目前的理论和技术现状看，通用的、高质量的自然语言处理系统，仍然是较长期的努力目标，但是针对一定应用，具有相当自然语言处理能力的实用系统已经出现，有些已商品化，甚至开始产业化。典型的例子有：各种数据库和专家系统的自然语言接口、各种机器翻译系统、全文信息检索系统、自动文摘系统等。 自然语言处理，即实现人机间自然语言通信，或实现 自然语言理解和 自然语言生成是十分困难的。造成困难的 根本原因是自然语言文本和对话的各个层次上广泛存在的各种各样的歧义性或多义性（ambiguity）。一般情况下，它们中的大多数都是可以根据相应的语境和场景的规定而得到解决的。也就是说，从总体上说，并不存在歧义。这也就是我们平时并不感到自然语言歧义，和能用自然语言进行正确交流的原因。但是一方面，我们也看到，为了消解歧义，是需要极其大量的知识和进行推理的。如何将这些知识较完整地加以收集和整理出来；又如何找到合适的形式，将它们存入计算机系统中去；以及如何有效地利用它们来消除歧义，都是工作量极大且十分困难的工作。这不是少数人短时期内可以完成的，还有待长期的、系统的工作。 存在问题 一方面，迄今为止的语法都限于分析一个孤立的句子，上下文关系和谈话环境对本句的约束和影响还缺乏系统的研究，因此分析歧义、词语省略、代词所指、同一句话在不同场合或由不同的人说出来所具有的不同含义等问题，尚无明确规律可循。 另一方面，人理解一个句子不是单凭语法，还运用了大量的有关知识，包括生活知识和专门知识，这些知识无法全部贮存在计算机里。因此一个书面理解系统只能建立在有限的词汇、句型和特定的主题范围内。 如何看待语言理解 从微观上讲，语言理解是指从自然语言到机器(计算机系统)内部之间的一种映射。 从宏观上看，语言理解是指机器能够执行人类所期望的某些语言功能。这些功能包括： 回答有关提问； 提取材料摘要； 不同词语叙述； 不同语言翻译。 自然语言理解的研究领域和方向文字识别、语音识别、机器翻译、自动文摘、句法分析、文本分类、信息检索、信息获取、信息过滤、自然语言生成、中文自动分词、语音合成、问答系统 用自然语言与计算机进行通信，这是人们长期以来所追求的。因为它既有明显的实际意义，同时也有重要的理论意义：人们可以用自己最习惯的语言来使用计算机，而无需再花大量的时间和精力去学习不很自然和习惯的各种计算机语言；人们也可通过它进一步了解人类的语言能力和智能的机制。","tags":[{"name":"XTU","slug":"XTU","permalink":"https://zhouie.cn/tags/XTU/"},{"name":"AI","slug":"AI","permalink":"https://zhouie.cn/tags/AI/"}]},{"title":"【收藏】 用Excel设计的RPG游戏","date":"2018-06-07T15:25:21.000Z","path":"posts/201806071/","text":"你在用Excel做报表的时候，世界的某个角落，有位大神早就用它做出了一款RPG游戏——Arena.xlsm 加拿大大学生Cary Walkin，在研读MBA的时候，花了五个多月时间，用Excel开发了一个功能完整的回合制角色扮演游戏：Arena.xlsm。该游戏包含了逾1000种物品，2000个敌人，多种不同结局。 支持的软件：Microsoft Excel 2007, Excel 2010 , Excel 2013 , Excel 2016. （需启用宏） 下载地址：官方下载百度云（提取码：qzv0，其中包括网上的一段试玩体验视频） 说明：除了界面不是很美观以外，游戏性和趣味性都还不错。 下面的是游戏主界面的截图（转载自网络，非官方）：主界面（左）+主界面（右）","tags":[{"name":"Collection","slug":"Collection","permalink":"https://zhouie.cn/tags/Collection/"},{"name":"Excel","slug":"Excel","permalink":"https://zhouie.cn/tags/Excel/"},{"name":"RPG游戏","slug":"RPG游戏","permalink":"https://zhouie.cn/tags/RPG游戏/"}]},{"title":"【记录】 愿你们都能有一个远大前程，都能不负此生","date":"2018-06-03T23:54:14.000Z","path":"posts/201806031/","text":"2015年9月11日，国内南方某高校XX学院第八届权益保障部成立了 2016年5月30日，第八届权保最后一次例会 那一年，北苑、南苑、琴湖、金翰林，一校四地，散落着我们14个可爱的身影。例会+内建、聚餐+农家乐、KTV+电影院…这些大学生社团部门的老几样，我们也无一落下，而且发扬地更好。 第一次例会，部长说我们的期望不是那张优秀部门的纸纸，但希望一年以后我们部门的每个小伙伴都能发自内心地说我们是一个组织，一个家庭。 在之后的很多个星期里，我们在一起做过很多事，聊天、写策划书，金翰林的每一个奶茶店都留下了我们的身影，时间才过去两年，而它们大多已经拆了，不在了。 军训之后，我们每个人的手机里似乎多多少少都有那么几张伙伴们的’精致’表情包，斗图似乎也就是那个时候开始盛行的聊天方式吧。 再往后，部门素拓、校运会、定向越野、定期走访、权益大讲堂、农家乐、影子舞… 校园里从南到北，留下了我们的身影。 小杰哥、师姐、翠翠、丽君姐、土豪、佳勤、鹏鹏、老梅、我、胡冰西、小艳艳、婷姐、悦姐、雪球 为你，千千万万遍。For you, a thousand times over ! 很久之前，我曾在一款APP上做过一套心理测验题，结果虽然表明我乐于结交新朋友，但如果可供选择的话，更加倾向于独处。是的，我想有那么一部分人或多或少地都夹杂了这种心理，不管你承认与否。 第八届权保岁月很短也很长，短在现在想来意犹未尽，长在对我的影响意味深长。大二之后的我选择了留部带好第九届权保，大三之后的我选择了接任班长一职，岁月时间啊待我还是幸运的，尽管现在的我在更多的时候还是会倾向于独处 插上耳机听听民谣轻音乐，但已不再是像以前那样容易忽视我的身边了。 是的，我成长了些许。 这并非空话、孬话，毕竟没有一个人比他自己更了解他本身了。我开始没那么惧怕每一次的告别了，我开始懂得，尽管我们知道每一次离别时说的 再见 很有可能就是 再也不见 ，可还是要心存感念，期待下一次江湖再会。 即便最后分开甚至陌生，也会对他心存感激。因为太多时候，交谈是一种莫大的温暖和美好。——卢思浩《愿有人陪你一起颠沛流离》 转眼就到了传说中毕业季送部长的日子，2018/05/30，我们14只很难得的再一次齐聚在了三拱门下。巧的是这个日子正是我们第八届权保开最后一次例会那天，日子回到了那天的原点，可时间回不去了，被大多数人冠以学长学姐头衔的我们更是回不去了。 拍合照，吃蛋糕，私人影院，大排档，KTV… 从南门到联建，从联建再到东门，再转去金翰林对面，一如以往，欢声笑语… 是的，当我准备开始描述那晚场景、开始描述心情感触的时候，我迟钝了…没什么字能写的了，只知道那晚有人哭了，有人笑了，有人闷头喝酒，有人举杯相送，可终究啊，在这所小城市里，他们是一群人、一家人。我清晰地记得那晚大排档上发生的所有事、他们每个人说的那些话，但那之后在KTV所有的事我是真的真的很抱歉，一片空白，自我感觉是因为那晚啤酒喝太快了出现了我人生中第一次断片（事后也有人说是睡着了）。 在这里也可以提一下，很奇妙的一件事，事后的第三天，也就是今天，我才想来了那晚喝酒的时候，我似乎早有预感今晚会趴下，早早就拿出手机点开了录音机，这也就解释了那天晚上根本没怎么玩手机，怎么上午回寝就发现手机没电到自动关机了。于是乎，我的手机里就有了这么一段超级超级长的珍贵的原始录音… 你们都毕业啦，愿都有似锦人生去拥抱，有远大前程去奔赴。","tags":[{"name":"XTU","slug":"XTU","permalink":"https://zhouie.cn/tags/XTU/"},{"name":"QBR","slug":"QBR","permalink":"https://zhouie.cn/tags/QBR/"}]},{"title":"【复习】 物联网概论复习总结","date":"2018-05-27T23:57:54.000Z","path":"posts/201805271/","text":"物联网(IoT)写在前面 本文严禁转载，只限于学习交流。 这只是笔者在复习所学这门专业课时整理的一些材料，粗制滥造，还望多多包涵。 笔者这里总结复习材料的绝大部分来自叶st老师在最后一节复习课上的提点😎… 考核内容：不单一，70基础部分 + 30实际应用 基础部分可参考： 翻译的那四篇论文中的基础知识 本文后面的内容 实际应用主要分布在： 离散数学知识，图论(匈牙利算法)，生成树 中心极限定理 切比雪夫不等式 路由选择方式Dij 最大(小)费用流 码分复用(原理、CDMA、随机码、正交) 领域名词、概念 IoT：物联网 Internet of things WSN：无线传感器网络 Wireless Sensor Network ZigBee：ZigBee是 IEEE 802.15.4协议的代名词 RFID：射频识别 Radio Frequency Identification EPC：物联网产品电子代码 Electronic Product Code M2M：机对机通信 Machine-to-Machine CPS：信息物理融合系统 Cyber Physical Systems FCS：现场总线控制系统 Fieldbus Control System DCS：分布式控制系统 Distributed Control System 云计算 物联网定义概念起源麻省理工学院Ashton教授于 1999年最早提出，其理念是基于射频识别技术(RFID)、电子代码(EPC)等技术，在互联网的基础上，构造一个 实现全球物品信息实时共享的实物互联网，即物联网。 本质体现 互联网特征，即对需要联网的物一定要能够实现互联互通的互联网络; 识别与通信特征，即纳入物联网的“物”一定要具备自动识别、物物通信的功能; 智能化特征，即网络系统应具有自动化、自我反馈与智能控制的特点。 主要特征 全面感知，利用射频识别、二维码、传感器等感知、捕获、测量技术随时随地对物体进行信息采集和获取。 可靠传送，通过将物体接入信息网络，依托各种通信网络，随时随地进行可靠的信息交互和共享。 智能处理，利用各种智能计算技术，对海量的感知数据和信息进行分析并处理，实现智能化的决策和控制。 物联网的发展概况日本：2009年8月，日本提出 “智慧泛在” 构想，将 传感网列为国家重要战略，致力于一个 个性化的物联网智能服务体系 美国：2009年初，美国 国际商业机器公司(即IBM)，提出 “智慧的地球”概念，认为：信息产业下一阶段的任务是把新一代信息技术充分运用在各行各业之中，具体就是把传感器嵌入和装备到电网、铁路、桥梁、隧道、公路、建筑、供水系统、大坝、油气管道等各种物体中，并且被普遍连接，形成物联网； 欧盟：2009年6月，欧盟委员会向欧盟议会、理事会、欧洲经济和社会委员会及地区委员会递交了 《欧盟物联网行动计划》，其目的为希望欧洲通过构建新型物联网管理框架来引领世界“物联网”发展； 韩国：2009年10月，韩国通信委员会通过 《物联网基础设施构建基本规划》，将物联网确定为新增长动力，树立了“通过构建世界最先进的物联网基础实施，打造未来广播通信融合领域超一流信息强国”的目标； 中国：2009年8月，国务院总理温家宝来到中科院无锡研发中心考察，指出关于物联网可以尽快去做三件事情：一是把传感系统和3G中的TD技术结合起来；二是在国家重大科技专项中，加快推进传感网发展；三是尽快建立中国的传感信息中心，或者叫“感知中国”中心；2010年3月，国务院总理 温家宝在 《政府工作报告》中，将 “加快物联网的研发应用”明确纳入重点产业振兴，表明物联网已经被提升为国家战略，中国开启物联网元年。 物联网的框架结构 物联网标准体系 值得注意的是，没有纳入标准的技术并不一定不属于物联网体系范畴！ 物联网关键技术和难点 物联网应用领域 其中，主要应用于十大领域：智能电网、智能交通、智能物流、智能家居、环境与安全检测、医疗健康、国防军事、精细农牧业、金融与服务业、工业与自动控制化。 RFID技术RFID系统主要由 应答器、阅读器和 高层软件组成。其中 应答器是集成电路芯片形式，而集成芯片又根据它的封装不同表现的形式也不太一样。阅读器用于产生射频载波完成与应答器之间的信息交互的功能。高层软件则是信息的管理和决策系统。 应答器在RFID系统中，识别信息存放于电子信息载体中，这个电子信息载体就是应答器，应答器在具体不同应用领域有表现为多种不同的形式 应答器是由 天线 、编/解码器 、 电源 、解调器 、存储器 、控制器 以及 负载电路 组成。其中，应答器天线部分主要用于数据通信和获取射频能量，给应答器的其他电路提供合格的直流电源；存储器容量一般在几字节到几千字节之间，存储的数据量一般为产品的序列号，如EPC编码；控制器是应答器系统的核心部分，对于可读可写应答器，需要内部逻辑控制对读写的使能，读写的操作的支持，对于有密码的答器，要求控制器能进行数字验证操作。 应答器的基本组成示意图如图所示 黑色区域就是该应答器的CPU、存储器、编解码功能单元，外围印制铜模线即为应答器的天线单元。 应答器可以分为只读应答器、读/写应答器和具有识别功能的应答器。 应答器 能源不同还可以分为：无源(被动式) 应答器、半无源(半被动式) 应答器和 有源（主动式）应答器。 被动式被动式标签没有内部供电电源。其内部集成电路通过接收到的电磁波进行驱动，这些电磁波是由RFID读写器发出的。当标签接收到足够强度的讯号时，可以向读写器发出数据。这些数据不仅包括ID号（全球唯一标示ID），还可以包括预先存在于标签内EEPROM中的数据。由于被动式标签具有价格低廉，体积小巧，无需电源的优点。市场的RFID标签主要是被动式的。 半主动式一般而言，被动式标签的天线有两个任务，第一：接收读写器所发出的电磁波，藉以驱动标签IC；第二：标签回传信号时，需要靠天线的阻抗作切换，才能产生0与1的变化。问题是，想要有最好的回传效率的话，天线阻抗必须设计在“开路与短路”，这样又会使信号完全反射，无法被标签IC接收，半主动式标签就是为了解决这样的问题。半主动式类似于被动式，不过它多了一个小型电池，电力恰好可以驱动标签IC，使得IC处于工作的状态。这样的好处在于，天线可以不用管接收电磁波的任务，充分作为回传信号之用。比起被动式，半主动式有更快的反应速度，更好的效率。 主动式与被动式和半主动式不同的是，主动式标签本身具有内部电源供应器，用以供应内部IC所需电源以产生对外的讯号。一般来说，主动式标签拥有较长的读取距离和较大的记忆体容量可以用来储存读写器所传送来的一些附加讯息。 阅读器RFID阅读器（读写器）通过天线实现对应答器识别码和内存数据的读出或写入操作。典型的阅读器包含有 高频模块(发送器和接收器) 、控制单元 、振荡电路 以及 阅读器天线 几部分。 在实际应用中，有4种波段的频率，低频（125kHz），高频（13.54MHz），超高频（850～910MHz），微波（2.45GHz）。不同频率用在不同的领域，下图显示了不同应用场合的阅读器。 在射频读写器的应用中遇到的一个问题就是 阅读器冲突，这是一个阅读器接收到的信息和另外一个阅读器接收到的信息发生冲突，产生 重叠。解决这个问题的一种方法是 使用TDMA技术，保证阅读器不会互相干扰。 RFID阅读器是以一定的频率、特定的通信协议完成对应答器中信息的读取。 阅读器基本组成模块如图所示。 阅读器和应答器耦合的方式有多种，应用较为典型的是电感耦合。阅读器和应答器天线部分的电感线圈通过电磁场进行信息传输。 【例题】：对于一个RFID标签，内部有50匝线圈绕制而成的天线线圈，读写器周围磁通变化率为0.004Wb/s，试计算在电子标签的天线两端能够产生多大的感应电动势？ 解： 根据 公式E=n（Δφ/Δt）可知， 当读写器周围的磁通变化率为0.004Wb/s，线圈匝数为50匝，代入公式可得感应电动势： E=n（Δφ/Δt）=50×0.004Wb/s=0.2V 数据信息的编码与调制从模拟信号转换成数字信号分为三个阶段： 抽样：每隔一个相等的时间间隙，采集连续信号的一个样值。 抽样定理：一个频带限制在（0，τ）内的时间连续信号X(t)，如果以不大于1/2的间隔对它进行等间隔抽样，则X(t)将被所得到的值完全确定。也可以说，若对信号以fs≥2的抽样速率进行均匀抽样，则X(t)可以被所得到的抽样值完全确定。 量化：将量值连续分布的样值，归并到有限个取值范围内。 非均匀量化：非均匀量化采用压扩技术——按输入信号的概率密度函数来分布量化电平。实现非均匀量化的方法之一是把输入量化器的信号X先进行压缩处理，再把压缩后的信号进行均匀量化。 编码：用二进制数字代码，表达这有限个值域（量化区）。 常用的RFID编码方法为曼彻斯特编码，曼彻斯特编码，也叫做相位编码，是一个同步时钟编码技术，被物理层使用来编码一个同步位流的时钟和数据。 WSN/ZigBee技术WSN，无线传感网络，Wireless Sensor Network的简称传感器、感知对象和观察者构成了无线传感器网络的三个要素其中，无线传感网络内的各个要素通过一个统一的协议进行信息的传输，这个协议就是Zigbee。 ZigBee是 IEEE 802.15.4协议的代名词。根据这个协议规定的技术是一种 短距离、低功耗的无线通信技术。 ZigBee是采用 数据帧的概念，每个无线帧包括了大量无线包装，包含了大量时间、地址、命令、同步等信息，真正的数据信息只占很少部分，且这正是ZigBee可以实现网络组织管理、实现高可靠传输的关键。同时，ZigBee采用了 MAC技术和 DSSS（直扩序列调制，Direct Sequence Spread Spectrum）技术，能够实现 高可靠、大规模网络传输。 ZigBee定义了两种物理设备类型： 全功能设备FFD(Full Function Device) 精简功能设备RFD(Reduced Function Device) 其中，FFD可以和FFD、RFD通信，而RFD只能和FFD通信，RFD之间是无法通信的。RFD的应用相对简单，例如在传感器网络中，它们只负责将采集的数据信息发送给它的协调点，并不具备数据转发、路由发现和路由维护等功能。RFD占用资源少，需要的存储容量也小，成本比较低。 详细可参考ZigBee技术-百度百科 云计算云计算是一种基于互联网的、大众参与的计算模式，其计算资源（计算能力、存储能力、交互能力）是动态、可伸缩、且被虚拟化的，以服务的方式提供。云计算是一种革命性的举措，它可以使计算能力也可以作为一种商品进行流通，通过互联网进行传输，就像煤气、水电一样取用方便。在计算机流程图中，互联网常以一个云状的图案来表示，用来表示对复杂基础设施的抽象。因此，最初选择了用云来比喻，将这种计算模型叫做云计算。 云(资源池)是一些可以自我维护和管理的虚拟计算资源，通常是一些大型服务器集群，包括计算服务器、存储服务器和宽带资源等。 私有云(专用云)是由单个客户所拥有的按需提供基础设施，该客户控制哪些应用程序在哪里运行，拥有服务器、网络和磁盘，并且可以决定允许哪些用户使用基础设施。 公用云是由第三方运行的云，第三方可以把来自许多不同客户的作业在云内的服务器、存储系统和其它基础设施上混合在一起。最终用户不知道运行其作业的同一台服务器、网络或磁盘上还有哪些用户。 混合云把公用云模式与私有云模式结合在一起。客户通过一种可控的方式对云部分拥有，部分与他人共享。 云应用(Cloud Application)是通过网络访问、从不需要本地下载的软件应用。 云架构(Cloud Architectures)是可以通往网络访问和使用软件应用的设计。 云计算关键技术 数据存储技术 云计算(Cloud Computing)的数据存储技术主要有 Google的非开源的GFS（Google File System，Google文件系统和 Apache基金会Hadoop开发团队开发的开源 HDFS（Hadoop Distributed File System，Hadoop分布式文件系统） 两者区别可参考文章 分布式文件系统比较出名的有HDFS和GFS 数据管理技术 云计算的数据管理技术最著名的是Google的BigTable数据管理技术，同时Hadoop开发团队正在开发BigTable的开源数据管理模块——— HBase。 软件开发技术 Google提出的一种处理和产生大规模数据集的编程模型———— MapReduce。 云计算与相关技术的关系云计算 Vs 并行计算 云计算的萌芽 — 并行计算； 并行计算强大的并行计算能力需要巨额的投资；并且，传统的并行计算机的使用是一个相当专业的工作，需要使用者具有较高的专业素质。 云计算将服务器等设施集中起来，最大程度地做到资源共享；能够动态地为用户提供计算能力和存储能力，随时满足用户的需求。 云计算 Vs 分布式计算 分布式计算研究如何把一个需要非常巨大的计算能力才能解决的问题分成许多小的部分，然后把这些部分分配给许多计算机进行处理，最后把这些计算结果综合起来得到最终的结果。 分布式计算是一个很大的范畴。在当今的网络时代，不是分布式计算的应用已经很少了。 云计算和下面将要提及的网格计算，都只是分布式计算的一种。 云计算 Vs 网格计算 网格（Grid）是20世纪90年代中期发展起来的下一代互联网核心技术。 其开创者Ian Foster将之定义为“在动态、多机构参与的虚拟组织中协同共享资源和求解问题” 。 网格计算可以分为三种类型，即计算网格、信息网格和知识网格。 网格计算与云计算的关系，就像是OSI与TCP/IP之间的关系。 云计算是网格计算的一种简化实用版本。 云计算 Vs 效用计算 效用计算随着主机的发展出现。 考虑到主机的购买成本高昂，一些用户就通过租用而不是购买的方式使用主机。效用计算的目标就是把服务器及存储系统打包给用户使用，按照用户实际使用的资源量对用户进行计费。 可以说，效用计算是云计算的前生。 云计算与物联网物联网需要云计算 云计算解决了物联网中服务器节点的不可靠性问题，最大限度地降低服务器的出错率。 云计算可以解决物联网中访问服务器资源受限的问题。 云计算让物联网在更广泛的范围内进行信息资源共享。 云计算增强了物联网中的数据处理能力，并提高了智能化处理程度。 物联网是云计算的一个重要范畴，是云计算在现实中的一种应用形式. 但，需要注意的是，云计算并非物联网应用的必需品！ 云计算作为一种新兴的计算模型，能够提供高效的、动态的和可以大规模扩展的计算处理能力，在物联网中占有重要的地位。物联网的发展离不开云计算的支撑，物联网也将成为云计算最大的用户，为云计算的更广泛应用奠定基石。 物联网组网技术现场总线技术特点 现场总线技术实际上是采用串行数据传输和连接方式代替传统的并联信号传输和连接方式的方法，它依次实现了控制层和现场总线设备层之间的数据传输，同时在保证传输实时性的情况下实现信息的可靠性和开放性。 布线简单、开放性、实时性、可靠性 WIFI技术、蓝牙技术、GPS技术WIFIWireless Fidelity，又称 802.11b标准。 IEEE 802.11b无线网络规范是IEEE 802.11a网络规范的变种，最高带宽为11Mbps，在信号较弱或有干扰的情况下，带宽可调整为5.5Mbps、2Mbps和1Mbps，带宽的自动调整，有效地保障了网络的稳定性和可靠性。 蓝牙技术一个开放性、短距离无线通信的标准。 蓝牙是一种支持设备短距离通信（一般10m内）的无线电技术。能在包括移动电话、PDA、无线耳机、笔记本电脑、相关外设等众多设备之间进行无线信息交换。蓝牙采用分散式网络结构以及快跳频和短包技术，支持点对点及点对多点通信，工作在全球通用的2.4GHz ISM（即工业、科学、医学）频段。其数据速率为1Mbps。采用时分双工传输方案实现全双工传输。 蓝牙技术特点 能传送语音和数据； 全球范围适用，使用频段无需申请； 低成本、低功耗和低辐射； 安全性、抗干扰性和稳定性强； 可以建立临时性的对等连接，支持点对多的通信方式。 GPSGlobal Positioning System（全球定位系统）的简称。 GPS特点 定位精度高 观测时间短 应用广泛 全天候 多功能 操作简便 还有很多物联网组网技术如电力线通信(Power Line Communication,PLC)技术、微机电系统(Micro-Electro-Mechanical Systems,MEMS)技术等… 补充翻译的四篇物联网前沿技术论文中一些基础知识问题 可见光通信(Visible Light Communication，VLC) 概念、名词 ReflexCode VLC(Visible Light Communication)= 可见光通信 GSK(Grayscale Shift Keying)= 灰度移位键控 OOK(On-OFF Keying)= 开关键控 RoI(Region of Interest)= 感兴趣区域 RLL(Run Length Limited)= 游程长度压缩限制编码 NC编码(N’s-complement coding) FEC(Forward Error Correction)= 前向纠错编码 PPR(Packet Reception Ratio)= 数据包接收率 PER(Packet Error Ratio)= 数据包错误率 鲁棒性，所谓“鲁棒性”，是指控制系统在一定（结构，大小）的参数摄动下，维持其它某些性能的特性。 可见光通信为什么采用LED灯、而非白炽灯？ 其实LED发光是一闪一闪的，因为闪动频率极高，我们的肉眼 “功能”太差分辨不出来，这种闪动其实就是一种开、关过程，LED这一开一关就可以承担发送信息的任务了，比如，开就代表“1”，关就代表“0”，通过信息编码也就是0与1的各种组合，就可以通过灯光来传递了，灯光在空气中传输就类似于光纤通信中信息在光纤中传输一样，这就是LED可见光通信的基本原理。 LED作为半导体器件，这种高速的亮灭也就是开关的通断能力是它的特性，而白炽灯因为在亮灭的变化过程中非常容易被损坏，且亮灭变化动作太慢，因而不具备这种通信功能。 (LED灯可以调节频率，而白炽灯不支持；白炽灯在数据通信时噪音较大…) 移动广告(Mobile advertising) 概念、名词 AaaP(Advertising as a Platform)一个基于广告的系统，可执行大规模的移动测量研究。 移动广告(Mobile advertising) 可以获取图片并运行 JavaScript 可以访问一些本地传感器 拥有完整浏览器的资源 极低的成本 可以访问唯一标识符和设备位置 所有这些功能都可以在没有用户交互的情况下使用 广告标识符 该标识符是设备上所有应用程序共享的随机 UUID； 我们的系统通过定位特定的广告标识符将广告发送到特定设备来收集纵向数据。 UUID(Universally Unique Identifier) 通用唯一识别码 UUID是由一组32位数的16进制数字所构成，是故UUID理论上的总数为16^32=2^128； 与被陨石击中的机率比较的话，已知一个人每年被陨石击中的机率估计为170亿分之1，也就是说机率大约是0.00000000006 (6 x 10^-11)，等同于在一年内置立数十兆笔UUID并发生一次重复。换句话说，每秒产生10亿笔UUID，100年后只产生一次重复的机率是50%。如果地球上每个人都各有6亿笔UUID，发生一次重复的机率是50%。 IP2Geo数据库 RTB协议(实时出价协议) 实时出价（RTB）协议指定您的应用程序如何在每次展示实时可用时评估和出价，以响应出价请求。 Impression Impression是指放置广告图像的网页每一次显示，就是一次印象。 CPM(Cost Per Mille或Cost Per Thousand Impressions) 千次印象费用，是西方一些网络广告应用比较成熟的国家所采用的最常规的收费模式之一。 SSP 自助服务平台的供应端平台 DSP 需求方平台 利用先进的定位功能和优化算法，DSP可帮助广告客户和代理机构确定即将到来的展示的价值，并发出出价以赢得该展示 蜂窝网络(Cellular network) 又称移动网络（mobile network），是一种移动通信硬件架构，分为模拟蜂窝网络和数字蜂窝网络。 由于构成网络覆盖的各通信基地台的信号覆盖呈六边形，从而使整个网络像一个蜂窝而得名。 常见的蜂窝网络类型有：GSM网络（有些国家叫pcs-1900）、CDMA网络、3G网络、FDMA、TDMA、PDC、TACS、AMPS等。 电池状态 API(Battery Status API) 更多时候被称之为 Battery API, 提供了有关系统充电级别的信息并提供了通过电池等级或者充电状态的改变提醒用户的事件。 这个可以在设备电量低的时候调整应用的资源使用状态，或者在电池用尽前保存应用中的修改以防数据丢失。 关键电池电量水平 当电量到最低水平，会提示第一次说电池电量不足； 当电量到保留电量，会提示第二说让你快点接上电源，否则休眠； 当电量到关键水平，如果还没有插入电源，系统会自动休眠。 挑战、难点在于哪里？为此做了哪些工作？ 法律与伦理的限制 得到了IRB 批准，允许在非互动盲审过程中进行更深入的伦理讨论； 美国联邦准则允许在研究对参与者的风险不高于最低限度的情况下缺乏明确同意的研究，获得书面同意是不切实际的； 我们发现的服务条款并未明确排除AaaP使用的广告类型。 地理、网络、能源管理、安全和隐私等等 射频识别技术(Radio Frequency Identification，RFID) 概念、名词 ART，UPE，EZB，LoF，FNEB 它们估算标签数量仅仅通过静态群体。 然而这些方案可以用来估算两段时间内群体总量的改变，但是不能分别估算到达和离开标签的数量 ZDE 虽然它是唯一可以估算两个时间段内动态群体出入标签的数量的方案， 但是它有三个主要的限制： 不能实现任意高可靠性; 不符合C1G2标准； 不能工作在多阅读器上。 缺失标签检测方案 仅仅估算离开标签的数量，且无法估算到达标签的数量，即使到达标签的ID可能是知道的。 如果标签ID未知，则该方案无效。 标签识别协议TH 估计到达和离开标签数量的一个看似很明显的解决方案是使用标签识别协议 来收集每个时刻所有标签的ID，然后通过比较这两个时刻的ID来识别到达标签和离开标签 这个解决方案有两个问题： 第一，它不保护隐私，因为阅读器能够读到任何标签的ID。 第二，它很慢，因为标签识别的过程比标签估算慢几个数量级。 DTE(Dynamic Tag Estimation Scheme，动态标签评估协议) 可以快速估计在任何两个时刻之间到达和离开标签的数量； 具有任意高的准确度； 适用于单一以及多个阅读器； 符合C1G2标准 C1G2标准 根据C1G2标准，标签不会传输其标签的ID，除非阅读器明确要求它们这么做。 这保留了阅读器不允许读取群体中标签的ID的隐私设置 如何解决重叠区域出现重复计数问题？ 使用 TDMA技术，保证阅读器不会互相干扰 WIFI技术(Wireless Fidelity) 利用无人机采集WIFI信号3D成像 概念、名词 马尔可夫随机场(MRF) 贝叶斯公式 (循环)置信传播(Loopy Belief Propagation) 如果实验中采用圆柱形的墙壁，那么无人机飞行路径该如何规划？ 螺旋线形轨迹、极坐标","tags":[{"name":"XTU","slug":"XTU","permalink":"https://zhouie.cn/tags/XTU/"},{"name":"IoT","slug":"IoT","permalink":"https://zhouie.cn/tags/IoT/"}]},{"title":"【电台】 蕊希电台","date":"2018-05-21T14:26:28.000Z","path":"posts/201805211/","text":"听她的声音，会上瘾 蕊希 女，原名宋思迪，出生于辽宁大连，毕业于暨南大学，中国内地女作家、原中央人民广播电台早间节目的主持人。 2015年1月7日，2015年1月7日，还在大学期间的蕊希创办了自媒体电台节目《一个人听》；同年，入职中央人民广播电台。 2016年6月，蕊希从中央人民广播电台正式辞职，全身心投入个人原创电台《一个人听》。 2017年5月1日，出版书籍《愿你迷路到我身旁》；12月18日，获得《2017年中国90后作家排行榜》第6名；同年，节目《一个人听》更名为《蕊希电台》。 蕊希在电台《一个人听》独特的地方在于内容是以音频自媒体形式推送，其低沉、略带沙哑、极具磁性的嗓音被很多观众所喜爱，播出3小时即获10万赞，“每天晚上，我都会用声音陪你入睡”也变成一个听众相互“取暖”的地方，成为越来越多人夜晚不可或缺的陪伴。（中国新闻出版广电报评）","tags":[{"name":"电台","slug":"电台","permalink":"https://zhouie.cn/tags/电台/"},{"name":"音乐","slug":"音乐","permalink":"https://zhouie.cn/tags/音乐/"}]},{"title":"【记录】 老司机已上线","date":"2018-05-16T12:27:59.000Z","path":"posts/201805161/","text":"城外的人想进来，城里的人想出去。","tags":[{"name":"驾照+","slug":"驾照","permalink":"https://zhouie.cn/tags/驾照/"},{"name":"XTU","slug":"XTU","permalink":"https://zhouie.cn/tags/XTU/"}]},{"title":"【国漫】 天行九歌","date":"2018-05-12T14:10:55.000Z","path":"posts/201805121/","text":"战国末年，秦国独大。 韩国积贫积弱，大将军姬无夜独揽朝政，相国张开地顽固守旧。公子韩非虽有一腔抱负，却郁郁不得志，每日只能在纸醉金迷中蛰伏。 恰逢秦国大兵压境，韩国危在旦夕。此刻正是朝野上下一心、同仇敌忾之时，却发生了一件离奇诡谲的案件，大雨倾盆中军饷神秘消失，涉案之人先后死于非命。终案件落到了韩国相国之孙张良手中。韩非，这个别人眼中的纨绔子弟，竟自愿卷入这场权力的游戏之中。前路危险莫测，敌人强大而狡猾。 韩非借助法家的现实理论，以及对人性的深刻剖析，逐渐拨开层层迷雾….. 10年前，中国首部3D武侠动漫系列剧《秦时明月》首度与大家见面，那个时候古风圈其实很小众，毫不夸张地说，秦时的出现就像一股清流一样，迅速俘获了大批秦迷。 相信很多人都迷上了秦时中那段风起云涌、群雄并起、百家争鸣的大时代背景，每个人都希望有一天可以手执长剑、带上心爱的人，大展抱负，或浪迹江湖，或高居庙堂，正所谓“仰天大笑出门去，我辈岂是蓬蒿人”。不过越是长大，看她得到的越不同，而且越发觉得没点历史素养都快不好意思去看她了。作为一名还算靠谱的秦迷，从百步飞剑、夜尽天明、诸子百家、万里长城、君临天下一直到今天的姊妹篇《天行九歌》，算不得铁杆粉丝，只能说一集没落，一路陪跑。 《天行九歌》从2016年开播到现在已经更新了两年有余了，故事以韩国九公子韩非建立的”流沙”组织为主视角，展开六国对抗秦国的众生百态 ，一幅大时代画卷徐徐铺展开来。 从网络上的反响来看，这部动画是成功的。延续《君临天下》的推理路数，剧情烧脑程度依旧毋庸置疑，加之其融入了大量中国风元素，依于历史而又超脱于历史的情节设计。当然其最为出色并不是剧情方面，而是动画角色的高颜值，动画中每一个帅哥美女的搜索量都非常的高。 据某小道消息报道，其中几个角色甚至完全超过了这部动画的搜索量！！！ 下面就列举几位颜值担当的小哥哥小姐姐： 韩非 韩王安之子。红莲公主的兄长。荀子的得意弟子。流沙的创始人。卫庄和张良、紫女的好友。 法家的集大成者。提出五蠹，术以知奸，以刑止刑。曾钻研千古之谜“苍龙七宿”。后出使秦国，遭同门李斯陷害，在秦国狱中死于六魂恐咒。 白亦非 韩国大将军姬无夜的心腹”夜幕四凶将”之一，被称为”皑皑血衣侯”。他掌管韩国十万兵力，”夜幕”组织通过他从军队一方面掌握韩国。雪衣堡的主人，性格怪癖，残忍嗜血，喜穿一身红衣。世代功勋显赫的世袭将军，拥有荣耀的头衔地位和高贵血统，坐镇雪衣堡，麾下白甲军骁勇善战。 卫庄 韩国人，自小就因不明原因在韩国王宫中生活。纵横家，鬼谷剑术传人，浑身充满邪气与霸气，武功深不可测，是霸气与力量型的剑客。 焰灵姬 来自百越的一位柔媚如水，热情似火的神秘女子，有着操纵火的能力。出场之后就非常受欢迎的一个角色，可以说是真正的宅男女神啊。 红莲公主 韩国公主，又名”赤练”。后成为”聚散流沙”四天王之一。妩媚妖娆，精通各类毒术，善于控制各类毒蛇，而她的性感往往比毒药更加危险。她的火魅术可以迷惑看见她双瞳的人，使之产生幻觉。 弄玉 紫兰轩的头牌琴姬 。琴艺超然，可引百鸟。身怀绝技，一生命运坎坷。原是韩国前右司马李开与百越火雨山庄庄主火雨公长女胡夫人的独生女。襁褓之中与父母分离，身负重伤被紫女救下，寄居于韩国风月之地紫兰轩，极受紫女重视，被紫女暗中培养为一名优秀的刺客。后执行红莲公主的计划前去刺杀韩国大将军姬无夜，失败，服毒自尽。 -问：都播出两年了，怎么现在才想起写这篇推荐呢？ -答：因为..因为…实在没素材了，周四看完最新更新的第56集《掌中迷舞》，被玄机娘娘突然整这么一出舞蹈给惊艳到了，韩非真的是..藏得深啊。于是乎，就这么…从生活中汲(窥)取(探)到了些许码文方向。 一直很看好这家“国漫领头羊”团队——杭州玄机科技信息技术有限公司，同时啊，在这里不得不提一下玄机的另一部作品《武庚纪》，这样的剧本思路真的很棒。 苍生涂涂，天下缭燎，诸子百家，唯我纵横。","tags":[{"name":"秦时明月","slug":"秦时明月","permalink":"https://zhouie.cn/tags/秦时明月/"},{"name":"国漫","slug":"国漫","permalink":"https://zhouie.cn/tags/国漫/"},{"name":"影视","slug":"影视","permalink":"https://zhouie.cn/tags/影视/"}]},{"title":"【摘录】 WAREZ无形帝国","date":"2018-05-07T00:48:13.000Z","path":"posts/201805071/","text":"开始这会儿夜深了，他们昏昏睡去。随便哪栋建筑的某一个黑洞洞的窗口，你冷眼望去，没准就能看到一台白色的电脑，静静地卧在主人的书桌上。如果那主人睡得足够深，你就打开他的抽屉，你看到了什么？哦，我不是指他的私人日记，也没让你翻他的相册 和笔盒。结果呢，你没看到几张盗版软件么？ 谁敢说自己的个人电脑里没有一个软件是非法的呢？是一个庞大的无形的盗版帝国支撑着我们走进了IT时代。这么说似乎并不夸张。那么，你想了解它们的始作俑者的身份和来历么？你想了解它们的组织结构和体系么？你想了解真相么？是一个偶然的机会，我们了解到这一切，并希望把它们公之于众。我们就这么做了。 发展最早的软件盗版组织在70年代末80年代初就已经出现了，这是在国外诞生的一种奇怪的自发性民间组织。它的成员是一些青少年电脑爱好者。他们是运用自己的技术破解各类机种中运行的软件（包括个人电脑和电视游戏机），以非法方式传播，但不以赢利为目的纯技术团伙。在早期没有互联网的情况下，他们用电话线传输游戏以及一些自制运行的展示程序（DEMO），并展开不定期的技术交流，同一地区组织间还经常性地交换成员。这些组织遍布在南北美洲、欧洲和南非等地。 20世纪90年代，PC机在全球的普及和互联网的日益发展，为这些组织的成长壮大创造了良好的土壤。这个组织是无形的，他们有自己的信念和约定俗成的行规，他们没有自己网站，不赚钱，破解的游戏只用FTP上传以供下载，并通过BBS交流信息。其组织成员很有奉献精神，以自己是“WAREZ”或“0DAY”组织成员为荣。 下面我们再介绍一下这类组织破解正版软件的流程。 破解过程首先是提供组负责购买游戏或取得资料，然后是解密组负责将软件解密，这个组的成员往往是最多的，也是技术含量最高的。再往后是包装组。在这里光盘破解组织和硬盘破解组织的“行规”是不同的。硬盘版要求2.8×65，即不能超过65个压缩包，每个压缩包的大小不能超过2.8兆，他们认为超过这个标准就不能算硬盘版，对下载者就是一种欺骗。光盘版则没有这种限制，15兆一个ISO光盘镜像包，使用者全部下载后再将其解压刻录于光盘，就可以玩完整的光盘游戏。具体压缩一般的规矩是这样：一个ISO包内含一个ZIP包，ZIP包内含的多媒体文件再用ACE压缩。这样保证了1：12的压缩率，便于网上传播——以上所说的完全是一种对玩家利益的考虑。 最后是发行组，负责在FTP上上传破解后的游戏软件。 这些组织破解的游戏通常放在国外地下站点，通过FTP下载时需要验证你的IP，看是否是它的成员，而且IP通过检验进入FTP后你会看到欢迎词，以及“本站是XX组织北美第XX发行站”之类的字样。它还将告诉你今天有那些游戏上传、昨天有那些游戏上传、你上传过多少游戏，下载过多少游戏，制作过多少有趣的DEMO程序。如果你长期没有破解游戏上传记录，将取消你的IP记录。 各种组织没有自己专门的FTP下载基地，你可以自愿提供资源，当然站长也可以加入到各类组织中去。无论是组织成员还是站长，凡是自愿加入这种组织的，都具有相当的责任心，当某一成员破解上传的游戏在其他的站上被别人抢先破解上传过了，那么你破解的将被CANCEL。而如果他做的硬盘版没有你的完美，那么他也将自动CANCEL掉自己的那个版本。这个规则保证了优胜劣汰，保证了所有破解软件只有一个版本，但它肯定是最完美的。 各大组织的外围成员来自世界各地，只要他们愿意，而且技术上能做得到，就可以同时加入几个盗版组织。而当你从学校毕业有了一份正当的职业后，再没有精力做这种义务劳动了，那么你将从组织中自动淡出。 由此可见，这种组织从加入到管理到退出完全依赖一种自我完善的机制。它是松散的，同时又非常合理。但由于它的开放性，有时也会出现某方面人员的匮乏。 如果你用写字板打开盗版软件中的.NFO文件，很可能看到“我们目前缺乏解密组和提供组人员，诚邀有志者加盟……”等字样。 除去这种非法的盗版游戏传播工作，“0DAY”组织成员还热衷于制作一种自动播放的有动画、有音乐的小DEMO程序。他们通过它来宣传自己的组织，炫耀自己的技术，有时还通过这种小程序来攻击竞争对手——这招实在算不得不文明。这种程序字节数越小、播放时间越长就越好，在这方面创记录的是CLASS组成员的一个程序，它只有27K。在PC机硬盘版游戏解压缩的执行文件也是破解组织比拼技术的一种方式。英国的老牌组织MYTH的安装界面甚至提供俄罗斯方块游戏，用以打发你在安装游戏时等待的时光。国际知名的PC游戏软件盗版组织中专门破解制作光盘版的有RAZOR1911、FAIRLIGHT和DEVIANCE，专门制作硬盘版的有CLASS、MYTH和DD。应用软件盗版组织中CORE、FOREST、ING和PARADIGM是最有名的。其中FOREST专门破解图形软件。世界上所有流通的盗版图形软件几乎都是由这个组织破解的。 RAZOR1911这一节将简要介绍一下RAZOR1911组织从1985年至今在Commodore64，Amiga和PC机上的经历（C64和Amiga都是80年代的4位/8位游戏机），因为它是此类组织发展历程中最具代表性的一个。 1985年10月一个雨后的傍晚，3个年轻的挪威计算机爱好者决定成立一个计算机小组，破解Commodore64机种的游戏软件。他们并不很清楚成立一个小组都需要些什么，但他们从1941、Section 8、Jedi2001、Hellmates、SCC等著名的软件破解小组那里得到了很多灵感。 好的组织要有个好名字，一个朋友为他们起名叫RAZOR2992，他们不喜欢这个名字，不久就改名为RAZOR1911。许多人问他们为什么用这个名字，他们就回答说因为在C64游戏机破解组织中，有太多没脑子的孩子用类似666这种号码在他们的DEMO、信笺和盘盒上，他们觉得这很幼稚，他们需要神秘感，1911在16进制算法中可转化为777，是对666的一种讽刺。后来他们也曾用Project777的名字制作Amiga游戏机的DEMO。C64时代很短暂，他们做了许多DEMO和一些软件破解，成为挪威有名的小组之一。他们的名作不多，其中一些至今还在Commodore64纪念光盘里流通（C64可在MS-DOS和UNIX系统中模拟运行）。后来该小组一些成员分裂出去，进入TCC和egaforce。其余的人决定加入Active CrackingCrew（ACC）组织。在那里他们学会如何象一个专业的软件破解者那样工作，并第一次把视线投向了整个世界。他们为自己广泛宣传，6个月后又参加了在丹麦举办的被称为“顶极精英”者的国际聚会，这种聚会的另一种称谓是“拷贝团拜”（COPY-PARTIES）。他们在会上评选出1987年年度最佳解密高手。TRIAD小组的Mr.Z以微弱票数险胜RawDeal的Laffen，获得了“年度最佳解密高手”的称号。当时FAIRLIGHT还和ACC现场合作破解了一个詹姆士．邦德的007游戏。从丹麦回到挪威，兴奋的年轻人重组了RAZOR1911，在AMIGA机种上和RAW DEAL合作，东山再起。在AMIGA上的发展开始非常缓慢，1988年才开始陆续做出一些DEMO，并在全球有了 一些成员。当时的许多DEMO相当原始，但是有好的想法，好的图像和动听的音乐，后来它们大部分都遗失了。不象许多新成员所想象的那样，RAZOR1911的老成员们都明白他们真正希望成为的是一个最好的游戏破解组织，而不仅是一个DEMO制作组。当他们在DEMO制作上有了些名气后时常与许多专门的游戏软件破解组织联系，1989年，当一些组织解散后，其成员都被RAZOR1911吸收进去。其中Zodact和Onyx分别是美国和欧洲的主力游戏破解组织，由于这些富有经验的成员的加入，RAZOR1911很快转型为一个真正的游戏破解组织——在后来的PC机时代，那时吸收的成员仍然是RAZOR1911最好最有力的成员。他们同时还掌握了大量盗用电话线路的技术，这使得他们可以将自己的联系网轻易地扩展到全世界。在1989年的最后两周里他们有了两个世界第一的破解作品——Pocket Rockets和StripPokerⅡ。同时他们也受到了其他组织的恶性竞争。到了1991年4月，他们已经破解了50个AMIGA游戏软件。这之后AMIGA机种软件很难破解了，它的每张盘都有密码锁，你不得不一次次面对各种不同的新问题，而NTSC/PAL两种制式的差别使得美国人没有补丁就不能玩欧洲的游戏。而且有太多的小组在竞争，大家常常为破解同一个游戏而暗中比赛，压力变大了，而这时的整个社会经济都处于疲软状态，许多组织没有足够的钱支持下去。 对未来RAZOR的创建者没有足够明确的方向。但这时一个富有才华的PC软件破解者 Darwin将PC机带入了他们的视线。RAZOR很快关闭了AMIGA专线。他们彻底地重组了组织，包括匿名的投资者和 DoctorNo、Onyx、Zodact等一批过去的精英。他们合作破解了一大批电脑游戏软件，在业内口碑甚好。他们由紧凑、精干、高效率的小组很快变为了一个庞大无形的游戏破解机构。RAZOR变成了一个大公司式的玩意儿，他们不断地破解游戏、制作修改器、提取游戏动画……4年内他们几乎破解了600个游戏和无数的其他产品。 1995年后国际互联网有了长足发展，RAZOR组织充分利用它并有了更广阔的发布渠道，他们比以前任何时候都更快更多地接触到饥渴的人群。这一年他们还插足CD-ROM领域。开始只是以RAZOR1911的名义零星地破解了一些光盘版游戏。他们一开始没有过多关注这个领域，直到软盘游戏越来越少，他们也真正重视起光盘游戏并取得了这个领域的主导地位。目前他们仍然是全球最大的PC光盘游戏盗版组织并深受一些年轻人的崇拜，他们同样着迷于对游戏破解技术的攻坚，并喜欢穿着印有RAZOR1911标志的外套招摇过市。作为一个如此庞大的组织，他们也存在着这样那样的问题。他们在94和95年有过两次大分裂，更甚至有些人物被警方逮捕和备案。但他们还是度过了难关，继续发展着。关于这些盗版组织更详细的历史材料都在他们这些年来破解的PC游戏所附的.nfo文件中，你从中可以了解到他们许多被遗忘的秘密。 政治背景我们对国外的盗版制作组织有了初步的了解，但是外国政府是如何对待这些组织的呢？我们前面说过，盗版制作者很有一种黑客精神：追求绝对技术，追求完全共享。这在客观上已经侵犯了软件厂商的利益。更何况你不为盈利，并不代表着别人也不想盈利！在加拿大、德国和南非等地，盗版软件销售十分猖獗，而在俄国一切都几乎是公开的。实际俄国的DD组织就直接从事赢利性销售。几乎所有的盗版组织都被大公司告上过法庭。最近的例子是关于EA公司出品游戏FIFA2000的。由于盗版组织的“提供组”成员渗入EA公司内部，致使母盘外流，结果盗版FIFA2000比正版提前出了1个月。EA公司愤怒之中在俄国、英国和德国分别将DD、MYTH和CLASS告上法庭。俄国DD组织成员被抓，判刑，后来司法部门收受贿赂，将该组织成员释放。英国法院则认为MYTH只在网上传播硬盘版，自己没有网站和广告，没有万维网（WWW）的链接，没有赢利，所以判定MYTH组织无罪。德国的CLASS则只是罚款了事，没有追究任何刑事责任。但是盗版组织都不敢碰EA这样的大公司，他们总是等EA的正版游戏出品了再做破解版。因为这种公司的势力实在太大了。其他的时候盗版总是比正版出得快，《暗黑破坏神Ⅱ》（DIABLOⅡ）的盗版（光盘破解版）比美国本土正式版提早两天上市而且破解得相当完美！其原因正如上所述，正版从业者中有些本身就是“WAREZ”成员。 这些还只是游戏软件，在国外应用软件破解在某种程度上比游戏软件的破解技术难度高得多，而且风险也更大。以北美地区为例，任何一款正版游戏最高售价也不过49.9美金，而正版应用软件的价格都要上100美元，而盗版软件一张只卖到9美元。这种价格差听起来很容易让我们联想到我国的盗版现状。盗版组织四处网罗的枝蔓在我国又是如何延伸的呢？ 相关组织中国最早的个人“WAREZ”组织志愿者、中国“中文解密基地”网站站长曾想建立自己的“CHINA 0DAY”组织，而且他在国内的志同道合者也不在少数，但是他们很快发现在中国不可能产生“0DAY”组织。很多人把原因简单地归结为某种“民族性”的障碍，这是不对的。这里面存在很大的经济因素、社会因素和技术因素的问题。从经济上讲，欧美国家IT业和电信业本来就发达，每年个人无论在软硬件消费还是网络服务费用上，相对于人均收入都是微乎其微的。经济的发达带动了社会的发展和教育水平的进步，这意味着在发达国家更多有计算机天赋的青年可以有条件从事这一爱好，而在中国如果一个计算机天才在山区诞生了，那么他永远将无法证明自己。而即使当一个中国青年终于可以承担自己在计算机上投入的金钱时，他已经不具备加入“0DAY”的条件和精力了。谈到技术，我国网络带宽很难让人满意，每秒钟十几K怎么和国外50兆/秒的速度相比？不要说0 DAY，就是上传下载恐怕也要5DAY不止啊。把这一切制约因素都通通抛开不谈，仅仅说一句“中国人没有这种素质和意识”是不公平的。目前国内一些向往“WAREZ”组织的青年，都希望到国外去施展一下自己在这方面的“才华”。 如果说以上的青年还只是对电脑技术的迷恋，那么GAMEZ88组织可就不是这样了。据说它是FAIRLIGHT一个18岁在斯坦福大学读书的成员在中国搞的一个纯赢利组织，具体成员分布不详。GAMEZ88的游戏都是在国外破解然后在国内压制成盘的，真正好的技术在国外，国内盗版组织几乎不具备破解能力。据说FAIRLIGHT专门有外国组，负责破解多语种游戏软件。简体中文版《魔法门之英雄无敌Ⅲ》的硬盘版很可能就是靠国外小组破解的。这是国内比较有来历的盗版组织，其他的一些零散组织则采取互相盗用或到国外WWW网站下载的方式制作盗版光盘。另外香港也是一个盗版天堂，大陆的许多盗版软件都是从那里流入的。 这里有一个很大的怪圈：盗版商人痛恨伪正版商，因为他们比自己谋取了更多的暴利。一张盗版盘成本2元，利润只有1元，这1元还是层层批发商一起来分的。而伪正版商很可能与一些正版厂商内部人员串通，用千元报酬获得图片、攻略和手册说明书，然后便翻版印制，以盗版的成本和正版的价格出售给拥护正版游戏的玩家。而另一方面盗版制作者却巴不得国家下力气抓盗版，盗版销售被限制了，盗版商赔了，但是由于光盘的减少，制作者反而会奇货可居而赚得更多！这就是我国盗版市场的冰山一角。 综述文章到这里就结束了，由于信息来源的局限性，某些具体细节的真实我们已无从验证，有兴趣的读者欢迎继续与我们交流看法。最后要说的是，我们写本文的目的，不是为盗版行为歌功颂德。它是对劳动的不尊重，更是阻碍经济正常运转的毒瘤，无论盗版者的初衷是什么，他们都永远是我们要打击的对象。 这篇文章摘自2000.9月上期（17）的《大众软件》（总第82期）全文的立意是介绍WareZ，“打击盗版”，但是首先我要申明的是这只是文中的观点。 正如文中所说WareZ是“不以赢利为目的纯技术团伙”，“他们有自己的信念和约定俗成的行规，他们没有自己网站，不赚钱，破解的游戏只用FTP上传以供下载，并通过BBS交流信息。其组织成员很有奉献精神，以自己是‘WAREZ’或‘0DAY’组织成员为荣”，只不过他们的成果被那些商人所利用才有今天的所谓“盗版软件”。 这正如大家嘴里所说的“黑客”和所指真正意义上的“Hacker”之间的区别。","tags":[{"name":"阅读","slug":"阅读","permalink":"https://zhouie.cn/tags/阅读/"},{"name":"WAREZ","slug":"WAREZ","permalink":"https://zhouie.cn/tags/WAREZ/"}]},{"title":"【收藏】 转载的一些站点与工具(三)","date":"2018-05-01T15:55:11.000Z","path":"posts/201805011/","text":"写在前面本文转载自刀刀亮的博客。 综合类 综合类 地址 前端知识体系 http://www.cnblogs.com/sb19871023/p/3894452.html 前端知识结构 https://github.com/JacksonTian/fks Web前端开发大系概览 https://github.com/unruledboy/WebFrontEndStack Web前端开发大系概览-中文版 http://www.cnblogs.com/unruledboy/p/WebFrontEndStack.html Web Front-end Stack v2.2 Web Front-end Stack v2.2 免费的编程中文书籍索引 https://github.com/justjavac/free-programming-books-zh_CN 前端书籍 https://github.com/dypsilon/frontend-dev-bookmarks 前端免费书籍大全 https://github.com/vhf/free-programming-books 前端知识体系 http://www.cnblogs.com/sb19871023/p/3894452.html 免费的编程中文书籍索引 https://github.com/justjavac/free-programming-books-zh_CN 智能社 - 精通JavaScript开发 http://study.163.com/course/introduction/224014.htm 重新介绍 JavaScript（JS 教程） https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript 麻省理工学院公开课：计算机科学及编程导论 http://v.163.com/special/opencourse/bianchengdaolun.html JavaScript中的this陷阱的最全收集–没有之一 http://segmentfault.com/a/1190000002640298 JS函数式编程指南 https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html JavaScript Promise迷你书（中文版） http://liubin.github.io/promises-book 腾讯移动Web前端知识库 https://github.com/AlloyTeam/Mars Front-End-Develop-Guide 前端开发指南 https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide 前端开发笔记本 https://li-xinyang.gitbooks.io/frontend-notebook/content 大前端工具集 - 聂微东 https://github.com/nieweidong/fetool 前端开发者手册 https://dwqs.gitbooks.io/frontenddevhandbook/content 入门类 入门类 地址 前端入门教程 http://www.cnblogs.com/jikey/p/3613082.html 瘳雪峰的Javascript教程 http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000 jQuery基础教程 http://www.imooc.com/view/11 前端工程师必备的PS技能——切图篇 http://www.imooc.com/view/506 结合个人经历总结的前端入门方法 https://github.com/qiu-deqing/FE-learning 工具类 工具类 地址 前端人的俱乐部 http://f2er.club/ 真可以解放你的收藏夹 如何优雅地使用Sublime Text http://www.jeffjade.com/2015/12/15/2015-04-17-toss-sublime-text/# 新编码神器Atom使用纪要 http://www.jeffjade.com/2016/03/03/2016-03-02-how-to-use-atom/ css sprite 雪碧图制作 http://www.imooc.com/learn/93 版本控制入门 – 搬进 Github http://www.imooc.com/learn/390 Grunt-beginner前端自动化工具 http://www.imooc.com/learn/30 IntelliJ IDEA 简体中文专题教程 https://github.com/judasn/IntelliJ-IDEA-Tutorial Webstorm,InterllIdea,Phpstorm http://t.cn/8kZZ1Uy SublimeText https://github.com/jikeytang/sublime-text Atom https://atom.io visual studio code https://code.visualstudio.com 综合效果搜索平台 综合效果搜索平台 地址 JavaScript 资源大全中文版 https://github.com/jobbole/awesome-javascript-cn 100+ 超全的web开发工具和资源 https://xituqu.com/170.html zoommyapp.com http://zoommyapp.com/ 高质量图库 unsplash.com https://unsplash.com/ 高质量图库 www.pinterest.com https://www.pinterest.com/ 图库 New Old Stock http://nos.twnsnd.co 复古风图库 效果网 http://www.jq22.com 花瓣网 http://huaban.com/ 优美图 http://www.topit.me/ codepen http://codepen.io/ 摄图网 http://699pic.com/ 常用的JavaScript代码片段 http://microjs.com 团队Blog|周报类 周报类 地址 奇舞周刊 http://old.75team.com/weekly/ 码农周刊 http://weekly.manong.io WEB前端开发 http://www.css88.com A JS tip per day! http://www.jstips.co 腾讯全端 AlloyTeam http://www.alloyteam.com/webdevelop/ 平安科技移动开发二队技术周报 https://github.com/PaicHyperionDev/MobileDevWeekly 开发中心 开发中心 地址 mozilla js参考 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript chrome开发中心（chrome的内核已转向blink） https://developer.chrome.com/extensions/api_index.html safari开发中心 https://developer.apple.com/library/safari/navigation microsoft js参考 https://msdn.microsoft.com/zh-cn/library/d1et7k7c(v=vs.94.aspx js秘密花园 http://sanshi.me/articles/JavaScript-Garden-CN/html/index.html js秘密花园 http://bonsaiden.github.io/JavaScript-Garden/zh w3help http://www.w3help.org 综合Bug集合网站 Nodejs Nodejs 地址 nodejs 篇幅比较巨大 http://liuqing.pw Node.js 包教不包会 https://github.com/alsotang/node-lessons 篇幅比较少 http://www.rainweb.cn/article/category/Nodejs node express 入门教程 http://www.w3cfuns.com/article-5598538-1-1.html nodejs定时任务 http://my.oschina.net/u/568264/blog/193773 一个nodejs博客 http://60sky.com 【NodeJS 学习笔记04】新闻发布系统 http://www.cnblogs.com/yexiaochai/p/3536547.html 过年7天乐，学nodejs 也快乐 http://www.cnblogs.com/qqloving/p/3541099.html 七天学会NodeJS https://github.com/nqdeng/7-days-nodejs Nodejs学习笔记（二）— 事件模块 http://www.cnblogs.com/zhongweiv/p/nodejs_events.html nodejs入门 http://www.cnblogs.com/liusuqi/p/3735491.html angularjs nodejs https://github.com/zensh/jsgen 从零开始nodejs系列文章 http://blog.fens.me/series-nodejs 理解nodejs http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb nodejs事件轮询 http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop node入门 http://www.nodebeginner.org/index-zh-cn.html nodejs cms http://ourjs.com/detail/53e1f281c5910a9806000001 Node初学者入门，一本全面的NodeJS教程 http://ourjs.com/detail/529ca5950cb6498814000005 NodeJS的代码调试和性能调优 http://www.barretlee.com/blog/2015/10/07/debug-nodejs-in-command-line 综合API 综合API 地址 javascripting http://www.javascripting.com 各种流行库搜索 http://microjs.com runoob.com-包含各种API集合 http://www.runoob.com 开源中国在线API文档合集 http://tool.oschina.net/apidocs devdocs http://devdocs.io 英文综合API网站 Ecmascript Ecmascript 地址 Understanding ECMAScript 6 - Nicholas C. Zakas https://leanpub.com/understandinges6/read exploring-es6 https://leanpub.com/exploring-es6/read exploring-es6翻译 https://github.com/es6-org/exploring-es6 exploring-es6翻译后预览 http://es6-org.github.io/exploring-es6 阮一峰 es6 http://es6.ruanyifeng.com 阮一峰 Javascript http://javascript.ruanyifeng.com ECMA-262，第 5 版 http://yanhaijing.com/es5 es5 http://es5.github.io Js template Js template 地址 template-chooser http://garann.github.io/template-chooser artTemplate https://github.com/aui/artTemplate tomdjs https://github.com/aui/tmodjs/blob/master/README.md 淘宝模板juicer模板 http://juicer.name/docs/docs_zh_cn.html Fxtpl v1.0 繁星前端模板引擎 http://koen301.github.io/fxtpl laytpl http://laytpl.layui.com mozilla - nunjucks https://github.com/mozilla/nunjucks Juicer https://github.com/PaulGuo/Juicer dustjs http://akdubya.github.io/dustjs etpl http://ecomfe.github.io/etpl HTML5(HTML) HTML(HTML5) 地址 深入理解HTML5标签 https://segmentfault.com/a/1190000002695791 如何写出高效率的HTML https://segmentfault.com/a/1190000002680822 HTML meta标签总结与属性使用介绍 https://segmentfault.com/a/1190000004279791 戏说HTML5 http://www.cnblogs.com/dojo-lzz/p/5059316.html CSS3(CSS) CSS 地址 CSS 语法参考 http://tympanus.net/codrops/css_reference 如何编写可维护的CSS https://github.com/chadluo/CSS-Guidelines/blob/master/README.md CSS3动画手册 http://isux.tencent.com/css3/index.html 腾讯css3动画制作工具 http://isux.tencent.com/css3/tools.html 志爷css小工具集合 http://linxz.github.io/tianyizone css3 js 移动大杂烩 http://www.note12.com/category/blog/2014-6-5/538fe0a9f786f1b7019a4dfb bouncejs 触摸库 http://bouncejs.com css3 按钮动画 http://fian.my.id/Waves animate.css http://daneden.github.io/animate.css 全局CSS的终结(狗带 [译] http://www.alloyteam.com/2015/10/8536 browserhacks http://browserhacks.com Angularjs Angularjs 地址 Angular.js 的一些学习资源 https://github.com/dolymood/AngularLearning angularjs中文社区 http://angularjs.cn Angularjs源码学习 http://www.cnblogs.com/xuwenmin888/p/3739096.html Angularjs源码学习 http://www.ifeenan.com/?c=AngularJS angular对bootstrap的封装 http://angular-ui.github.io/bootstrap angularjs + nodejs https://cnodejs.org/topic/51404e0f069911196d2e3923 吕大豹 Angularjs http://www.cnblogs.com/lvdabao/tag/AngularJs AngularJS 最佳实践 http://www.infoq.com/cn/news/2013/02/angular-web-app Angular的一些扩展指令 http://www.lovelucy.info/angularjs-best-practices.html Angular数据绑定原理 https://github.com/Pasvaz/bindonce 一些扩展Angular UI组件 https://github.com/angular-ui Ember和AngularJS的性能测试 http://voidcanvas.com/emberjs-vs-angularjs-performance-testing 带你走近AngularJS - 基本功能介绍 http://www.cnblogs.com/powertoolsteam/p/angularjs-introdection.html Angularjs开发指南 http://angular.duapp.com/docs/guide Angularjs学习 http://www.cnblogs.com/amosli/p/3710648.html 不要带着jQuery的思维去学习AngularJS http://www.rainweb.cn/article/angularjs-jquery.html angularjs 学习笔记 http://wangjiatao.diandian.com/?tag=angularjs angularjs 开发指南 http://www.angularjs.cn/T008 angularjs 英文资料 https://github.com/jmcunningham/AngularJS-Learning angular bootstrap http://angular-ui.github.io/bootstrap angular jq mobile https://github.com/opitzconsulting/jquery-mobile-angular-adapter angular ui http://mgcrea.github.io/angular-strap 整合jQuery Mobile+AngularJS经验谈 http://www.tuicool.com/articles/7ZZVr2 有jQuery背景，该如何用AngularJS编程思想 http://blog.jobbole.com/46589/ AngularJS在线教程 http://each.sinaapp.com/angular angular学习笔记 http://www.zouyesheng.com/angular.html React React 地址 react.js 中文论坛 http://www.react-china.org react.js 官方网址 https://facebook.github.io/react/index.html react.js 官方文档 https://facebook.github.io/react/docs/getting-started.html react.js material UI http://material-ui.com/# react.js TouchstoneJS UI http://touchstonejs.io react.js amazeui UI http://amazeui.org/react React 入门实例教程 - 阮一峰 http://www.ruanyifeng.com/blog/2015/03/react.html React Native 中文版 http://wiki.jikexueyuan.com/project/react-native Webpack 和 React 小书 - 前端乱炖 http://www.html-js.com/article/Fakefish%203053 Webpack 和 React 小书 - gitbook https://fakefish.github.io/react-webpack-cookbook webpack https://github.com/webpack/webpack Webpack，101入门体验 http://html-js.com/article/3009 webpack入门教程 http://html-js.com/article/3113 基于webpack搭建前端工程解决方案探索 http://segmentfault.com/a/1190000003499526 React原创实战视频教程 http://www.piliyu.com vue vue 地址 Vue http://cn.vuejs.org Vue 论坛 http://forum.vuejs.org Vue 入门指南 http://www.cnblogs.com/aaronjs/p/3660102.html Vue 的一些资源索引 http://segmentfault.com/a/1190000000411057 awesome-vue https://github.com/vuejs/awesome-vue 移动端API 移动端API 地址 99移动端知识集合 https://github.com/jtyjty99999/mobileTech 移动端前端开发知识库 https://github.com/AlloyTeam/Mars 移动前端的一些坑和解决方法（外观表现） http://caibaojian.com/mobile-web-bug.html 【原】移动web资源整理 http://www.cnblogs.com/PeunZhang/p/3407453.html zepto 1.0 中文手册 http://mweb.baidu.com/zeptoapi zepto 1.0 中文手册 http://www.html-5.cn/Manual/Zepto zepto 1.1.2 http://www.css88.com/doc/zeptojs_api zepto 中文注释 http://www.cnblogs.com/sky000/archive/2013/03/29/2988952.html jqmobile 手册 http://app-framework-software.intel.com/api.php 移动浏览器开发集合 https://github.com/maxzhang/maxzhang.github.com/issues 移动开发大杂烩 https://github.com/hoosin/mobile-web-favorites jQuery jQuery 地址 jQuery API 中文文档 http://www.jquery123.com hemin 在线版 http://hemin.cn/jq css88 jq api http://www.css88.com/jqapi-1.9/on css88 jqui api http://www.css88.com/jquery-ui-api 学习jquery http://learn.jquery.com jquery 源码查找 http://james.padolsey.com/jquery Web前端资源汇总(jQuery,Js,Css3等) http://www.cnblogs.com/jihua/p/webfront.html D3 D3 地址 d3 Tutorials https://github.com/mbostock/d3/wiki/Tutorials Gallery https://github.com/mbostock/d3/wiki/Gallery lofter http://datavisual.lofter.com/post/40cf3a_188e535 iteye http://alanland.iteye.com/blog/1878595 ruanyifeng http://javascript.ruanyifeng.com/library/d3.html Requriejs Requriejs 地址 Javascript模块化编程（一）：模块的写法 http://www.ruanyifeng.com/blog/2012/10/javascript_module.html Javascript模块化编程（二）：AMD规范 http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html Javascript模块化编程（三）：require.js的用法 http://www.ruanyifeng.com/blog/2012/11/require_js.html RequireJS入门（一） http://www.cnblogs.com/snandy/archive/2012/05/22/2513652.html RequireJS入门（二） http://www.cnblogs.com/snandy/archive/2012/05/23/2513712.html RequireJS进阶（三） http://www.cnblogs.com/snandy/archive/2012/06/08/2538001.html requrie源码学习 http://www.cnblogs.com/yexiaochai/p/3632580.html requrie 入门指南 http://www.oschina.net/translate/getting-started-with-the-requirejs-library requrieJS 学习笔记 http://www.cnblogs.com/yexiaochai/p/3214926.html requriejs 其一 http://cyj.me/why-seajs/requirejs/ require backbone结合 http://www.cnblogs.com/yexiaochai/p/3221081.html Seajs Seajs 地址 seajs http://seajs.org seajs 中文手册 http://cyj.me/why-seajs/zh Less,sass Less,sass 地址 sass http://www.w3cplus.com/sassguide sass教程-sass中国 http://www.sass.hk Sass 中文文档 http://sass.bootcss.com less http://less.bootcss.com Markdown Markdown 地址 Markdown 语法说明-简体中文版 https://zhouie.cn/markdown-doc/markdown-doc-syntax-zh markdown入门参考 https://github.com/LearnShare/Learning-Markdown/blob/master/README.md gitbook https://www.gitbook.com 国外的在线markdown可编辑成书 mdeditor https://www.zybuluo.com/mdeditor 一款国内的在线markdown编辑器 stackedit https://stackedit.io 国外的在线markdown编辑器，功能强大，同步云盘 mditor http://bh-lay.github.io/mditor 一款轻量级的markdown编辑器 lepture-editor https://github.com/lepture/editor markdown-editor https://github.com/jbt/markdown-editor 作业部落 https://www.zybuluo.com 功能强大，速度流畅，全平台同步 兼容性 兼容性 地址 esma 兼容列表 http://kangax.github.io/compat-table/es6 W3C CSS验证服务 http://jigsaw.w3.org/css-validator/validator.html.zh-cn caniuse http://caniuse.com/#index csscreator http://csscreator.com/properties microsoft https://msdn.microsoft.com/zh-cn/library/cc351024(v=vs.85.aspx 在线测兼容-移动端 http://www.responsinator.com emulators https://www.manymo.com/emulators UI相关 UI相关 地址 bootcss http://v3.bootcss.com MetroUICSS http://www.w3cplus.com/MetroUICSS semantic http://semantic-ui.com Buttons http://alexwolfe.github.io/Buttons kitecss http://hiloki.github.io/kitecss pintuer http://www.pintuer.com amazeui http://amazeui.org worldhello http://www.worldhello.net/gotgithub/index.html linuxtoy http://igit.linuxtoy.org/contents.html gitmagic http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn rogerdudler http://rogerdudler.github.io/git-guide/index.zh.html gitref http://gitref.justjavac.com book http://git-scm.com/book/zh gogojimmy http://gogojimmy.net/2012/01/17/how-to-use-git-1-git-basic 其它API 其它API 地址 HTTP API 设计指南 http://segmentfault.com/bookmark/1230000002521721 javascript流行库汇总 javascriptoo 验证api http://niceue.com/validator/demo/index.php underscore 中文手册 http://www.css88.com/doc/underscore underscore源码分析 http://www.html-js.com/article/Underscorejs-source-code-analysis-of-underscorejs-source-code-analysis%203031 underscore源码分析-亚里士朱德的博客 http://yalishizhude.github.io/tags/underscore underscrejs en api http://underscorejs.org lodash - underscore的代替品 https://lodash.com ext4api http://extjs-doc-cn.github.io/ext4api backbone 中文手册 http://www.csser.com/tools/backbone/backbone.js.html qwrap手册 http://dev.qwrap.com/resource/js/_docs/_youa/#/qw/base/loadJs_.htm 缓动函数 http://easings.net/zh-cn svg 中文参考 http://www.w3school.com.cn/svg/svg_reference.asp svg mdn参考 https://developer.mozilla.org/en-US/docs/Web/SVG svg 导出 canvas https://github.com/gabelerner/canvg svg 导出 png https://github.com/exupero/saveSvgAsPng ai-to-svg http://www.zamzar.com/convert/ai-to-svg localStorage 库 https://github.com/machao/localStorage 图表类 图表类 地址 Highcharts 中文API http://www.hcharts.cn/api/index.php Highcharts 英文API http://api.highcharts.com/highcharts ECharts 百度的图表软件 http://echarts.baidu.com/ 高德地图 http://lbs.amap.com/api 开源的矢量图脚本框架 http://paperjs.org svg 地图 http://jvectormap.com 正则 正则 地址 JS正则表达式元字符 http://segmentfault.com/a/1190000002471140 正则表达式30分钟入门教程 http://deerchao.net/tutorials/regex/regex.htm MDN-正则表达式 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions ruanyifeng - RegExp对象 http://javascript.ruanyifeng.com/stdlib/regexp.html 小胡子哥 - 进阶正则表达式 http://div.io/topic/764?page=1 is.js https://github.com/Cedriking/is.js/blob/master/is.js 正则在线测试 http://regexper.com 前端规范 前端规范 地址 通过分析github代码库总结出来的工程师代码书写习惯 http://alloyteam.github.io/CodeGuide HTML&amp;CSS编码规范 by @mdo http://codeguide.bootcss.com 团队合作的css命名规范-腾讯AlloyTeam前端团队 http://www.alloyteam.com/2011/10/css-on-team-naming/ 前端编码规范之js - by yuwenhui http://yuwenhui.github.io 前端编码规范之js - by 李靖 http://www.cnblogs.com/hustskyking/p/javascript-spec.html 前端开发规范手册 http://zhibimo.com/read/Ashu/front-end-style-guide Airbnb JavaScript 编码规范（简体中文版） https://github.com/yuche/javascript#table-of-contents AMD与CMD规范的区别 http://www.zhihu.com/question/20351507 AMD与CMD规范的区别 http://www.cnblogs.com/tugenhua0707/p/3507957.html KISSY 源码规范 http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html bt编码规范 http://codeguide.bootcss.com 规范加强版 https://github.com/Suxiaogang/Code_Guide 前端代码规范 及 最佳实践 http://blog.jobbole.com/79075 百度前端规范 http://coderlmn.github.io/code-standards 百度前端规范 http://isobar-idev.github.io/code-standards 百度前端规范 http://zhuanlan.zhihu.com/fuyun/19884834 ECMAScript6 编码规范–广发证券前端团队 https://github.com/gf-rd/es6-coding-style JavaScript 风格指南/编码规范（Airbnb公司版） http://blog.jobbole.com/79484 网易前端开发规范 http://nec.netease.com/standard css模块 http://www.75team.com/archives/1049 前端规范资源列表 https://github.com/ecomfe/spec PHP PHP 地址 最流行的PHP 代码规范 http://segmentfault.com/a/1190000000443795 最流行的PHP 代码规范 https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md 各大公司开源项目 各大公司开源项目 地址 Facebook Projects https://code.facebook.com/projects/web 百度web前端研发部 http://fex.baidu.com 百度EFE http://efe.baidu.com 百度github https://github.com/fex-team alloyteam http://www.alloyteam.com alloyteam-github http://alloyteam.github.io alloyteam-AlloyGameEngine https://github.com/AlloyTeam/AlloyGameEngine AlloyDesigner http://alloyteam.github.io/AlloyDesigner 即时修改，即时保存，设计稿较正，其它开发辅助工具 H5交互页编辑器AEditor介绍 http://www.alloyteam.com/2015/06/h5-jiao-hu-ye-bian-ji-qi-aeditor-jie-shao H5动画交互页开发的工具介绍 AEditor http://aeditor.alloyteam.com H5动画交互页开发的工具 maka http://forum.maka.im/wordpress 值得订阅的weekly https://github.com/fenbility/weekly-feed 腾讯html5 http://cube.qq.com 奇舞团开源项目 http://75team.github.io Qunar UED http://ued.qunar.com Scrat http://scrat.io 常用 常用 地址 ieBetter.js-让IE6-IE8拥有IE9+,Chrome等浏览器特性 http://www.zhangxinxu.com/wordpress/2013/12/iebetter-js-make-ie6-ie8-like-modern-browser-ie9-chrome 模拟键盘 http://mottie.github.io/Keyboard 拼音 https://github.com/hotoo/pinyin 中国个人身份证号验证 https://github.com/mc-zone/IDValidator 算法 算法 地址 数据结构与算法 JavaScript 描述. 章节练习 https://github.com/Ralph-Wang/algorithm.in.js 常见排序算法（JS版） https://github.com/twobin/twobinSort 经典排序 https://github.com/luofei2011/jsAgm/blob/master/js/sort.js 常见排序算法-js版本 https://github.com/hechangmin/jssort JavaScript 算法与数据结构 精华集 https://github.com/lightningtgc/JavaScript-Algorithms 面试常考算法题精讲 http://www.nowcoder.com/live/courses 移动端 移动端 地址 fastclick https://github.com/ftlabs/fastclick no-click-delay https://github.com/mmastrac/jquery-noclickdelay 【敏捷开发】Android团队开发规范 http://www.cnblogs.com/lcw/p/3619181.html Android 开发规范与应用 http://www.jianshu.com/p/4390f4fe19b3 ionic https://github.com/ychow/ionic-guide JSON JSON 地址 模拟生成JSON数据 http://beta.json-generator.com 返回跨域JSONAPI http://jsonp.afeld.me 焦点图 焦点图 地址 myfocus https://github.com/koen301/myfocus myfocus-官方演示站 http://www.chhua.com/myfocus SuperSlidev2.1 – 大话主席 http://www.superslide2.com soChange http://www.bujichong.com/sojs/soChange/index.html Ext, EasyUI, J-UI 及其它各种UI方案 Ext, EasyUI, J-UI 及其它各种UI方案 地址 extjs https://www.sencha.com/products/extjs ext4英文api http://docs.sencha.com/extjs/4.0.7 ext4中文api http://extjs-doc-cn.github.io/ext4api jquery easyui 未压缩源代码 http://jquery-easyui.googlecode.com/svn/trunk/src J-UI http://jui.org MUI-最接近原生APP体验的高性能前端框架 http://dcloudio.github.io/mui Amaze UI 中国首个开源 HTML5 跨屏前端框架 http://amazeui.org 淘宝 HTML5 前端框架 http://m.sui.taobao.org KISSY - 阿里前端JavaScript库 http://docs.kissyui.com 网易Nej - Nice Easy Javascript http://nej.netease.com Kendo UI MVVM Demo http://demos.telerik.com/kendo-ui/mvvm/index Bootstrap http://www.bootcss.com Smart UI http://smartui.chinamzz.com 雅虎UI - CSS UI http://developer.yahoo.com/yui/grids 页面 社会化 分享功能 页面 社会化 分享功能 地址 百度分享 http://share.baidu.com pc端 JiaThis http://jiathis.com pc端 社会化分享组件 http://developer.baidu.com/soc/share 移动端 ShareSDK 轻松实现社会化功能 http://www.mob.com/#/index 移动端 友盟分享 http://dev.umeng.com/social/android/quick-integration 移动端 富文本编辑器 富文本编辑器 地址 功能齐全 tinymce https://www.tinymce.com 百度 ueditor http://ueditor.baidu.com/website 经典的ckeditor http://ckeditor.com 经典的kindeditor http://kindeditor.net wysiwyg http://www.bootcss.com/p/bootstrap-wysiwyg 一个有情怀的编辑器。Bach’s Editor http://integ.github.io/BachEditor tower用的编辑器 https://github.com/mycolorway/simditor summernote 编辑器 https://github.com/summernote/summernote html5编辑器 http://neilj.github.io/Squire Quilljs编辑器 http://quilljs.com XEditor http://lab.hustlzp.com/XEditor wangEditor https://github.com/wangfupeng1988/wangEditor 前端概述 前端概述 地址 前端工具大全 http://www.awesomes.cn 什么是前端工程化 https://github.com/fouber/blog/issues/10?from=timeline&amp;isappinstalled=0# [译] 前端攻略-从路人甲到英雄无敌 https://segmentfault.com/a/1190000005174755 Gulp Gulp 地址 Gulp官网 http://gulpjs.com Gulp中文网 http://www.gulpjs.com.cn gulp资料收集 https://github.com/Platform-CUF/use-gulp Gulp：任务自动管理工具 - ruanyifeng http://javascript.ruanyifeng.com/tool/gulp.html Gulp插件 http://gulpjs.com/plugins Gulp探究折腾之路(I) http://www.jeffjade.com/2015/11/25/2015-11-25-toss-gulp/ Gulp折腾之路(II) http://www.jeffjade.com/2016/01/19/2016-01-19-toss-gulp/ Gulp不完全入门教程 http://www.ido321.com/1622.html 为什么使用gulp? https://github.com/hjzheng/CUF_meeting_knowledge_share/issues/33 Gulp安装及配合组件构建前端开发一体化 http://www.dbpoo.com/getting-started-with-gulp Gulp 入门指南 https://github.com/nimojs/gulp-book Gulp 入门指南 - nimojs https://github.com/nimojs/blog/issues/19 Gulp in Action http://www.imooc.com/video/5692 Gulp开发教程（翻译） http://www.w3ctech.com/topic/134 前端构建工具gulpjs的使用介绍及技巧 http://www.cnblogs.com/2050/p/4198792.html Grunt Grunt 地址 gruntjs http://gruntjs.com Grunt中文网 http://www.gruntjs.net Fis Fis 地址 fis 官网 http://fex-team.github.io/fis-site/index.html fis http://fis.baidu.com pc图轮 pc图轮 地址 单屏轮播sochange http://www.jsfoot.com/jquery/demo/2011-09-20/192.html 左右按钮多图切换 http://bxslider.com/examples/carousel-demystified fullpage全屏轮播 https://github.com/alvarotrigo/fullPage.js 移动端图轮 移动端图轮 地址 无缝切换 http://www.swipejs.com 滑屏效果 http://www.idangero.us/swiper 全屏fullpage https://github.com/peunzhang/fullpage 单个图片切换 https://github.com/qiqiboy/touchslider 单个全屏切换 https://github.com/peunzhang/slip.js 百度的切换库 http://touch.code.baidu.com/examples.html?qq-pf-to=pcqq.group 单个全屏切换 https://github.com/peunzhang/iSlider 滑屏效果 https://github.com/saw/touch-interfaces 旋转拖动设置 http://baijs.com/tinycircleslider 类似于swipe切换 http://touchslider.com 支持多种形式的触摸滑动 http://www.swiper.com.cn/demo/index.html 滑屏效果 https://github.com/joker-ye/main/blob/master/wap/index.html 大话主席pc移动图片轮换 http://www.superslide2.com 滑屏效果 https://github.com/hahnzhu/parallax.js 基于zepto的fullpage https://github.com/yanhaijing/zepto.fullpage [WebApp]定宽网页设计下，固定宽度布局开发WebApp并实现多终端下WebApp布局自适应 http://www.cnblogs.com/plums/archive/2013/01/10/WebApp-fixed-width-layout-of-multi-terminal-adapter-since.html 判断微信客户端的那些坑 http://loo2k.com/blog/detecting-wechat-client 可以通过javascript直接调用原生分享的工具 https://github.com/JefferyWang/nativeShare.js JiaThis 分享到微信代码 http://www.jiathis.com/help/html/weixin-share-code 聊聊移动端跨平台开发的各种技术 http://fex.baidu.com/blog/2015/05/cross-mobile 前端自动化测试 http://www.zhihu.com/question/29922082 多种轮换图片 http://ajccom.github.io/niceslider 滑动侧边栏 https://mango.github.io/slideout 文件上传 文件上传 地址 百度上传组件 http://fex.baidu.com/webuploader 上传 https://blueimp.github.io/jQuery-File-Upload flash 头像上传 http://www.hdfu.net 图片上传预览 http://www.dropzonejs.com 图片裁剪 http://elemefe.github.io/image-cropper 图片裁剪-shearphoto http://www.shearphoto.com jQuery图片处理 http://www.oschina.net/project/tag/284/jquery-image-tools?lang=0&amp;os=0&amp;sort=view&amp;p=2 模拟select 模拟select 地址 糖饼 select http://aui.github.io/popupjs/doc/selectbox.html flexselect https://github.com/rmm5t/jquery-flexselect 双select http://loudev.com select2 http://select2.github.io 取色插件 取色插件 地址 类似 Photoshop 的界面取色插件 http://www.jq22.com/plugin/367 jquery color https://github.com/jquery/jquery-color 取色插件集合 http://www.oschina.net/project/tag/287/color-picker farbtastic 圆环＋正方形 https://github.com/mattfarina/farbtastic 城市联动 城市联动 地址 jquery.cityselect.js基于jQuery+JSON的省市或自定义联动效果 http://www.ijquery.cn/?p=360 剪贴板 剪贴板 地址 剪贴板 https://github.com/zeroclipboard/zeroclipboard clipboard 最新的剪切方案 http://zenorocha.github.io/clipboard.js 不是Flash的剪贴板 https://github.com/zenorocha/clipboard.js 简繁转换 简繁转换 地址 简繁转换 https://github.com/BYVoid/OpenCC 表格 Grid 表格 Grid 地址 facebook表格 http://facebook.github.io/fixed-data-table 类似于Excel编辑表格-handsontable http://handsontable.com bootstrap-table插件 http://bootstrap-table.wenzhixin.net.cn datatables https://www.datatables.net 在线演示 在线演示 地址 js 在线编辑 - runjs http://runjs.cn js 在线编辑 - jsbin http://jsbin.com js 在线编辑 - codepen http://codepen.io js 在线编辑 - jsfiddle http://jsfiddle.net java 在线编辑 - runjs http://ideone.com js 在线编辑 - hcharts http://code.hcharts.cn js 在线编辑 - jsdm http://jsdm.com sql 在线编辑 - sqlfiddle http://sqlfiddle.com mozilla 在线编辑器 https://thimble.mozilla.org 常规优化 常规优化 地址 Javascript高性能动画与页面渲染 http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering 移动H5前端性能优化指南 http://isux.tencent.com/h5-performance.html 5173首页前端性能优化实践 http://ued.5173.com/?p=1731 给网页设计师和前端开发者看的前端性能优化 http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers 复杂应用的 CSS 性能分析和优化建议 http://www.orzpoint.com/profiling-css-and-optimization-notes 张鑫旭——前端性能 张鑫旭——前端性能 前端性能监控总结 http://www.xiaoqiang.org/javascript/font-end-performance-monitor.html 网站性能优化之CSS无图片技术 网站性能优化之CSS无图片技术 web前端性能优化进阶路 web前端性能优化进阶路 前端技术：网站性能优化之CSS无图片技术 http://my.eoe.cn/tuwandou/archive/4544.html 浏览器的加载与页面性能优化 http://www.baiduux.com/blog/2011/02/15/browser-loading 页面加载中的图片性能优化 http://www.w3ctech.com/p/1503 Hey——前端性能 Hey——前端性能 html优化 html优化 99css——性能 99css——性能 Yslow——性能优化 http://www.yslow.net/category.php?cid=20 YSLOW中文介绍 http://www.cnblogs.com/yslow 转一篇Yahoo关于网站性能优化的文章，兼谈本站要做的优化 http://www.360ito.com/article/40.html Yahoo!团队实践分享：网站性能 http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml 网站性能优化指南：什么使我们的网站变慢？ http://blog.jiasule.com/i/153 网站性能优化实践，减少加载时间，提高用户体验 http://www.powereasy.net/helpyou/knowledge/ecommerce/9593.html 浅谈网站性能优化 前端篇 http://www.umtry.com/archives/747.html 前端重构实践之如何对网站性能优化？ http://www.adinnet.cn/blog/designview/2012-7-12/678.html 前端性能优化：使用媒体查询加载指定大小的背景图片 http://www.gbin1.com/technology/javascript/20130708-front-end-performance-optimization-9 网站性能系列博文 http://www.mykuer.com/post/factors-that-affect-the-speed-of-web-site-open.html 加载，不只是少一点点 http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml 前端性能的测试与优化 http://mzhou.me/article/95310 分享网页加载速度优化的一些技巧？ http://www.gbin1.com/technology/html/20130217-tips-for-speed-up-page-loading 页面加载中的图片性能优化 http://www.f2es.com/images-bytes-opt web前端优化(基于Yslow http://www.tcreator.info/webSchool/website/Front-end-Opt-Yslow.html 网站性能优化工具大全 https://www.qianduan.net/website-performance-optimization-tool.html 【高性能前端1】高性能HTML http://www.alloyteam.com/2012/10/high-performance-html 【高性能前端2】高性能CSS http://www.alloyteam.com/2012/10/high-performance-css 由12306谈谈网站前端性能和后端性能优化 http://coolshell.cn/articles/6470.html AlloyTeam——前端优化 AlloyTeam——前端优化 毫秒必争，前端网页性能最佳实践 http://www.cnblogs.com/developersupport/p/3248695.html 网站性能工具Yslow的使用方法 http://blog.sina.com.cn/s/blog_6e9d2e0701017kvu.html 前端工程与性能优化（上）：静态资源版本更新与缓存 http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1 前端工程与性能优化（下）：静态资源管理与模板框架 http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2 HTTPS连接的前几毫秒发生了什么 http://blog.jobbole.com/48369 Yslow http://uicss.cn/yslow/#more-12319 Essential Web Performance Metrics — A Primer, Part 1 http://blog.smartbear.com/web-performance/essential-web-performance-metrics-a-primer-part-1 Essential Web Performance Metrics — Part 2 http://blog.smartbear.com/performance/essential-web-performance-metrics-part-2 YUISlide,针对移动设备的动画性能优化 http://jayli.github.io/blog/data/2011/12/23/yuislide.html Improving Site Performance http://joelglovier.com/improving-site-performance 让网站提速的最佳前端实践 http://segmentfault.com/a/1190000000367899 Why Website Speed is Important http://sixrevisions.com/web-development/why-website-speed-is-important Need for Speed – How to Improve your Website Performance https://www.devbridge.com/articles/need-for-speed-how-to-improve-your-website-performance 阿里无线前端性能优化指南 (Pt.1 加载期优化 https://github.com/amfe/article/issues/1 优化工具 优化工具 地址 JavaScript 性能分析新工具 OneProfile http://www.html-js.com/article/3083 JavaScript 堆内存分析新工具 OneHeap http://www.html-js.com/article/3091 在线工具 在线工具 地址 google在线工具 https://developers.google.com/speed/pagespeed/insights 阿里测 http://www.alibench.com 阿里-免费测试服务 http://itest.aliyun.com 阿里-F2etest多浏览器兼容性测试解决方案 https://github.com/alibaba/f2etest js性能测试 http://jsperf.com 前端架构 前端架构 地址 技术架构 http://www.zhihu.com/topic/19612641 前端架构 http://saito.im/note/The-Architecture-of-F2E 如何成为前端架构师 http://www.zhihu.com/question/24092572 关于前端架构-张克军 http://hikejun.com/sharing/2010webrebuild/?file=fe-infrastructure.html 百度腾讯offer比较（腾讯游戏VS百度基础架构） http://www.zhihu.com/question/25583350 推荐作品 推荐作品 地址 winter代码片段需要翻墙 https://gist.github.com/wintercn fgm http://www.fgm.cc/learn 岑安作品集 https://github.com/hongru/hongru.github.com 当耐特demo集合 http://kmdjs.github.io 米空格 js作品 http://www.laoshu133.com/Lab myFocus http://koen301.github.io SeaJS组件库 http://panxuepeng.github.io/seajslib 颜海镜作品 http://yanhaijing.com/myProject 脚儿网作品 http://jo2.org/category/myworks javascript个人作品 http://www.cnitblog.com/yemoo/category/3107.html 妙味的雷东升游戏作品 http://bbs.miaov.com/forum.php?mod=viewthread&amp;tid=7790 javascript作品集 http://bbs.csdn.net/topics/380227212 云五笔，灰度产生生成工具 https://github.com/TooBug/works 项目主页 http://koen301.github.io 个性的作品主页 http://zaole.net 播放器 http://static.tingall.com/v2/player ucren js demos 集 http://ucren.com/blog/demos 智能社 http://www.zhinengshe.com/works_list.html 实例陈列架 http://demos.shizuwu.cn zoye demo http://zoye.sinaapp.com/demo 王员外 http://lab.yuanwai.wang 平凡 http://pingfan1990.sinaapp.com jyg 游戏案例 http://www.lovewebgames.com 很多jquery插件 http://www.helloweba.com/list.html 不羁虫 - soJs 作品系列 http://www.bujichong.com/sojs/api/index.html frozenui http://frozenui.github.io/case.html 黑白棋 http://js-game.github.io/othello fromone http://yansm.github.io/fromone/index.html pazguille http://pazguille.me Html5 VideoPlayer https://github.com/zmmbreeze/DeadSimpleVideoPlayer Proton 烟花 http://a-jie.github.io/Proton/#example 简历模板 简历模板 地址 简历 http://hcy2367.github.io/resume 张伦 http://ncuey.sinaapp.com/CrispElite/ 简历 https://github.com/hacke2/ResumeSample 马斯特 http://pinkyjie.com/resume 张秋怡 https://joyeecheung.github.io/resume/ 翁天信 http://blog.dandyweng.com/2013/07/how-my-website-was-created 动画方式的简历 http://www.webhek.com/misc/interactive-resume 组件丰富简历 http://www.linqing07.com/resume.html haorooms博客 http://www.haorooms.com/about 面试题 面试题 地址 那几个月在找工作（百度，网易游戏） http://www.nowcoder.com/discuss/3196 2014最新面试题 http://www.html-js.com/article/1743 2016校招内推 – 阿里巴巴前端 – 三面面试经历 http://www.cnblogs.com/imwtr/p/4685546.html 年后跳槽那点事：乐视+金山+360面试之行 http://www.cnblogs.com/lvdabao/p/3660707.html Interviewing a front-end developer http://blog.sourcing.io/interview-questions 拉勾网js面试题 http://www.cnblogs.com/52cik/p/js-question-lg.html 前端面试 http://www.cnblogs.com/allenxing/p/3724382.html Web开发笔试面试题 大全 http://mianshiti.diandian.com 前端开发面试题 http://segmentfault.com/a/1190000000465431 2014最新前端面试题 https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions 百度面试 https://github.com/fex-team/interview-questions 面试题 http://www.w3cfuns.com/forum.php?mod=forumdisplay&amp;fid=51&amp;filter=typeid&amp;typeid=177 前端工作面试问题 https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Chinese 前端开发面试题 http://segmentfault.com/a/1190000000465431 5个经典的前端面试问题 5个经典的前端面试问题 最全前端面试问题及答案总结 http://segmentfault.com/a/1190000002562454 如何面试一名前端开发工程师？ http://www.html-js.com/article/Large-search-front-team-column%202961 史上最全 前端开发面试问题及答案整理 https://github.com/hawx1993/Front-end-Interview-questions 前端实习生面试总结 http://www.cnblogs.com/xiaoruo/p/4665163.html 史上最全 前端开发面试问题及答案整理 https://github.com/hawx1993/Front-end-Interview-questions BAT及各大互联网公司2014前端笔试面试题：JavaScript篇 http://blog.jobbole.com/78738 前端开发面试题大收集 https://github.com/paddingme/Front-end-Web-Development-Interview-Question 收集的前端面试题和答案 https://github.com/qiu-deqing/FE-interview 如何面试前端工程师 http://www.zhihu.com/question/19568008 前端开发面试题 https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md 牛客网-笔试面经 http://www.nowcoder.com/discuss?type=2 iconfont iconfont 地址 中文字体 http://www.zhihu.com/question/21253343 淘宝字库 http://iconfont.cn 字体 http://mux.alimama.com/fonts 制作教程 http://iconfont.cn/help/platform.html zhangxinxu-icommon http://www.zhangxinxu.com/wordpress/?s=icomoon icommon https://icomoon.io/app 用字体在网页中画ICON图标(推荐教程 http://imooc.com/learn/243 字体压缩工具 http://font-spider.org Fiddler Fiddler 地址 Fiddler调式使用知多少(一深入研究 http://www.cnblogs.com/tugenhua0707/p/4623317.html 微信fiddle http://www.cnblogs.com/strick/p/4570006.html 微信fiddle http://gaoboy.com/article/26.html Chrome Chrome 地址 Google Chrome 官方 https://developer.chrome.com/devtools Chrome - 基础 http://www.cnblogs.com/constantince/p/4565261.html Chrome - 进阶 http://www.cnblogs.com/constantince/p/4579121.html Chrome - 性能 http://www.cnblogs.com/constantince/p/4585983.html Chrome - 性能进阶 http://www.cnblogs.com/constantince/p/4607497.html Chrome - 移动 http://www.cnblogs.com/constantince/p/4624241.html Chrome - 使用技巧 http://www.cnblogs.com/liyunhua/p/4544738.html Chrome - Console控制台不完全指南 http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html Chrome - Workspace使浏览器变成IDE http://c7sky.com/chrome-devtools-workspace.html network面板 http://www.html-js.com/article/Nothing-blind%202975 chrome开发工具快捷键 http://anti-code.com/devtools-cheatsheet chrome调试工具常用功能整理 http://www.html-js.com/article/2327 Chrome 开发工具 Workspace 使用 http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace Chrome神器Vimium快捷键学习记录 http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html sass调试-w3cplus http://www.w3cplus.com/sassguide/debug.html 如何更专业的使用Chrome开发者工具-w3cplus http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html chrome调试canvas http://sentsin.com/web/253.html chrome profiles1 https://developer.chrome.com/devtools/index chrome profiles2 http://h5dev.uc.cn/article-25-1.html chrome profiles3 http://www.oschina.net/translate/performance-optimisation-with-timeline-profiles chrome移动版调试 https://developer.chrome.com/devtools/docs/mobile-emulation chrome调试 http://ued.taobao.org/blog/2012/06/debug-with-chrome-dev-tool chrome的调试 http://www.cnblogs.com/QLeelulu/archive/2011/08/28/2156402.html chrome console 命令详解 https://developer.chrome.com/devtools/docs/commandline-api 查看事件绑定1 http://www.cnblogs.com/leonkao/p/3809655.html 查看事件绑定2 http://www.cnblogs.com/xiaoyao2011/p/3447421.html 神器——Chrome开发者工具(一 http://segmentfault.com/a/1190000000683599 奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍 https://xinranliu.me/2015-05-22-qiqu-performance chrome 开发者工具的 15 个小技巧 http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html Chrome开发者工具不完全指南 http://1ke.co/course/361 Chrome 开发者工具使用技巧 http://segmentfault.com/a/1190000003882567 Firebug Firebug 地址 firebug视频教程 http://www.imooc.com/learn/137 firefox 模拟器 https://developer.mozilla.org/zh-CN/docs/Tools/WebIDE console.log 命令详解 http://www.cnblogs.com/ctriphire/p/4116207.html Firebug入门指南 http://www.ruanyifeng.com/blog/2008/06/firebug_tutorial.html Firebug控制台详解 http://www.ruanyifeng.com/blog/2011/03/firebug_console_tutorial.html 移动,微信调试 移动,微信调试 地址 浏览器端调试安卓 https://openstf.github.io 移动端前端开发调试 http://yujiangshui.com/multidevice-frontend-debug 使用 Chrome 远程调试 Android 设备 https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md mac移动端调试 http://plus.uc.cn/document/webapp/doc5.html mac移动端调试 http://www.mihtool.com 无线调试攻略 http://thx.github.io/mobile/debugging-in-mobile 无线调试攻略 http://yanhaijing.com/mobile/2014/12/17/web-debug-for-mobile 屌爆了,完美调试 微信webview(x5 http://www.jianshu.com/p/ccf124f1f74b 微信调试的那些事 微信调试的那些事 远程console http://jsconsole.com 微信调试工具 http://blog.qqbrowser.cc 各种真机远程调试方法汇总 https://github.com/jieyou/remote_inspect_web_on_real_device iOS Simulator iOS Simulator 地址 Simulator iOS_Simulator_Guide-Introduction iOS Simulator的介绍和使用心得 http://www.crifan.com/intro_ios_simulator_in_xcode_and_usage_summary Image img 地址 loading img http://preloaders.net/en/circular 智图-图片优化平台 http://zhitu.isux.us 在线png优化 https://tinypng.com SM.MS(图床工具～简易好用) https://sm.ms/ yutuku：极简图床 http://yotuku.cn/ Qchan图床 http://tuchuang.org/ 浏览器同步 浏览器同步 地址 puer https://github.com/leeluolee/puer liveReload http://livereload.com f5 http://getf5.com File Watchers http://geek100.com/2608 在线PPT制作 在线PPT制作 地址 nodePPT nodePPT Cleaver快速制作网页PPT http://www.jeffjade.com/2015/10/15/2015-10-16-cleaver-make-ppt/ impress.js http://www.cnblogs.com/Darren_code/archive/2013/01/04/impressjs.html PPT https://github.com/ksky521/nodePPT reveal https://github.com/hakimel/reveal.js bespoke-fx https://github.com/ebow/bespoke-fx slippy https://github.com/Seldaek/slippy 前端导航网站 前端导航网站 地址 界面清爽的前端导航 http://uxbees.com/index.html 前端导航 http://whycss.com 前端网址导航 http://www.daqianduan.com/nav 前端名录 http://sentsin.com/daohang 前端导航 http://123.jser.us 前端开发资源 http://www.css88.com/nav 网址导航 http://www.haourl.cn 前端开发仓库 - 众多效果的收集地 http://code.ciaoca.com 前端资源导航 https://github.com/jnoodle/f2e-collect F2E 前端导航 http://f2e.im/static/pages/nav/index.html 常用CDN 常用CDN 地址 新浪CDN http://lib.sinaapp.com 百度静态资源公共库 http://cdn.code.baidu.com 360网站卫士常用前端公共库CDN服务 http://libs.useso.com Bootstrap中文网开源项目免费 CDN 服务 http://www.bootcdn.cn 开放静态文件 CDN - 七牛 http://staticfile.org CDN加速 - jq22 http://www.jq22.com/cdn jQuery CDN http://code.jquery.com Google jQuery CDN http://www.google-jquery-cdn.com 微软CDN http://www.asp.net/ajax/cdn Git Git 地址 git-scm http://git-scm.com 廖雪峰-Git教程 廖雪峰-Git教程 git-for-windows https://git-for-windows.github.io GitHub 添加 SSH keys http://daemon369.github.io/git/2015/03/10/add-ssh-keys-for-github gogithub http://www.worldhello.net/gotgithub/index.html git常规命令练习 http://pcottle.github.io/learnGitBranching git的资料整理 https://github.com/xirong/my-git 我所记录的git命令（非常实用） http://www.cnblogs.com/fanfan259/p/4810517.html 企业开发git工作流模式探索部分休整 https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md GitHub 漫游指南 https://github.com/phodal/github-roam GitHub秘籍 https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md 使用git和github进行协同开发流程 http://livoras.com/post/28 动画方式练习git http://onlywei.github.io/explain-git-with-d3 各种日期日历 各种日期日历 地址 经典my97 http://www.my97.net/dp/demo/index.htm 强大的独立日期选择器 http://www.cnblogs.com/gbin1/archive/2012/04/16/2452105.html fullcalendar http://fullcalendar.io fullcalendar日历控件知识点集合 http://blog.csdn.net/francislaw/article/details/7740630 中文api http://blog.sina.com.cn/s/blog_9475b1c101012c5f.html 农历日历 https://github.com/zzyss86/LunarCalendar 超酷的仿百度带节日日历老黄历控件 http://www.sucaisj.com/jiaoben/date/201509/16856.html 日期格式化 http://momentjs.com 大牛日历控件 https://github.com/Johnqing/QPAYCalendar 我群某管理作品 https://github.com/Iamlars/dateMarker input按位替换-官网 http://digitalbush.com/projects/masked-input-plugin input按位替换-github https://github.com/digitalBush/jquery.maskedinput/tree/1.2.2 bootstrap-daterangepicker https://github.com/dangrossman/bootstrap-daterangepicker 国外30个插件集合 http://www.vandelaydesign.com/30-best-free-jquery-plugins JavaScript datepicker http://dbushell.com/2012/10/09/pikaday-javascript-datepicker Datepair.js http://jonthornton.github.io/Datepair.js 一个风格多样的日历 https://github.com/glad/glDatePicker 弹出层式的全日历 http://amsul.ca/pickadate.js/date jquery双日历 http://www.daterangepicker.com 大气实用jQuery手机移动端日历日期选择插件 http://www.frankdemo.cn/index.php?c=content&amp;a=show&amp;id=115 jQuery Mobile 移动开发中的日期插件Mobiscroll https://mobiscroll.com Date library Date library 地址 Datejs https://github.com/datejs/Datejs sugarjs http://sugarjs.com/api/Date 其它 其它 地址 Mock.js 是一款模拟数据生成器 http://mockjs.com 特色的HTML框架可以创建精美的iOS应用 http://framework7.taobao.org 淘宝SUI http://m.sui.taobao.org avalonjs http://avalonjs.github.io Avalon新一代UI库： OniUI http://ued.qunar.com/oniui/index.html avalon.oniui-基于avalon的组件库 https://github.com/RubyLouvre/avalon.oniui 生成二维码(草料) http://cli.im 效果类 效果类 地址 弹出层 http://www.imooc.com/learn/58 焦点图轮播特效 http://www.imooc.com/learn/18 HTML5 有哪些让你惊艳的 demo？ http://www.zhihu.com/question/24398907 弹出层 弹出层 地址 artDialog 最新版 https://github.com/aui/artDialog artDialog 文档 http://aui.github.io/artDialog/doc/index.html google code 下载地址 https://code.google.com/p/artdialog/downloads/list 贤心弹出层 http://layer.layui.com 响应式用户交互组件库 https://github.com/bh-lay/UI sweetalert-有css3动画弹出层 http://t4t5.github.io/sweetalert 优秀JavaScript项目 优秀JavaScript项目 地址 Angular和Webpack种子文件 https://github.com/AngularClass/angular2-webpack-starter Fis3面向前端的工程构建系统 https://github.com/fex-team/fis3 Fis3 DEMO https://github.com/fex-team/fis3-demo 前端JQuery系列:源码剖析 https://github.com/JsAaron/jQuery avalon框架 https://github.com/RubyLouvre/avalon Microsoft ChakraCore 微软的Chakra引擎 https://github.com/Microsoft/ChakraCore Quintus HTML游戏引擎 https://github.com/cykod/Quintus 一个用node.js搭建的有趣博客 https://github.com/STRML/strml.net Web前端助手–FeHelper（Chrome扩展） https://github.com/zxlie/FeHelper 百度前端技术学院 https://github.com/baidu-ife/ife Cheerio（node.js中的jQuery） https://github.com/cheeriojs/cheerio nodejs的一个聊天软件 类似微信 https://github.com/BryanYang/freechat 使用html5和node.js构建的网易云音乐 https://github.com/stkevintan/Cube babel ES6转换为ES5 https://github.com/babel/babel 一个JS富文本编辑器 https://github.com/fex-team/ueditor 一个JS脑图可视化工具 https://github.com/fex-team/kityminder-core 一个JS写的Flappy Bird Game https://github.com/ellisonleao/clumsy-bird 一个JS写的GBA模拟器 https://github.com/taisel/IodineGBA SegmentFault写的Markdown解析器 https://github.com/SegmentFault/HyperDown.js 基于node.js的Ghost博客 https://github.com/TryGhost/Ghost 学习react的demos https://github.com/ruanyf/react-demos 10个值得前端收藏的CSS3动效库现在的网站和App的设计中越来越重视用户体验，而优秀的动效则能使你的应用更具交互性，从而吸引更多用户的使用。如果你对CSS3中定义动效还不熟练，或希望采用更加简单直接的方式在你的应用中引入动效的话，你可以参考并使用下面的这10个优秀动效库（工具）。 1.Animate.cssAnimate.css是我比较喜欢的一个CSS3动效库，非常适合那些对CSS3动画效果不熟悉，但又希望给自己所做的网站或基于H5的APP引入动效的朋友。因为，你只需要给需要实现动效的元素添加上Animate.css中预定义的那些动效名称就可以了。比如常见的：bounce，flash，fadeIn，fadeOut等等，加起来有75种不同的动效，完全能够满足你的基本需要了。 Animate 当然对于这个库也有一些使用注意事项，比如你最好在给元素添加动效样式完成动效后，马上将这个动效样式去掉。另外，对于动效的时长，振动幅度等，你也需要做一些调整。因为，我感觉它默认设置中的动效过于快速和强烈了。Animate.css已经提供了详细的文档告诉你应该如何做这些调整。 2.Bounce.jsBounce.js是一个能够生成CSS3动效的小工具，它是用JavaScript编写的，提供了一个Web界面，你可以添加一个组件然后就可以选择包括Scale，Translate，Rotate，Skew这些动效类型，然后分别设置它们的参数，当达到你想要的效果后，你可以将这个动效以CSS的方式导出，这样你就可以将它应用到你的应用中了。 Bounce 3.CSS3 AnimationCSS3 Animation是一个非常简单易用的动效工具，你可以在它提供的简单图形界面里，通过拖拽一些进度条来控制你的动效，生成的CSS代码会自动显示在下面的一个文本框里，你可以拷贝粘贴到你的应用中直接使用。 Animation 4.CSS Animate如果你觉得上面的工具还无法做出你想要的动效，那么可以看看CSS Animate这个工具。它能让你设置更多的动效参数，比如你可以同时设置动效起始和终止状态的坐标，大小，以及透明度，这样你就能够做出更加复杂的动效来。 Animate1 5.Magic AnimationsMagic Animations与Animate.css十分类似，也是一个预定义了一系列动效的CSS库。但与Animate.css的最大区别可能是，它定义的那些动效更炫也更酷一些，如果你的网站也很新潮，那可以考虑使用这个CSS动效库。 Magic 6.AniJSAniJS是一个通过JavaScript控制的动效库。它允许你通过它的链式语法来定义动效。比如下面这个例子：当用户点击时这个元素会沿Y轴翻转。 1&lt;div data-anijs=\"if: click, do: flipInY, to: .container-box\"&gt;&lt;/div&gt; AniJS 7.Single Element CSS Spinners我们经常会需要一些动效来表达系统处于加载或处理数据的过程中。Single Element CSS Spinners这个在GitHub上的项目，提供了一组非常漂亮的可用于加载的CSS3动效。 Spinners 8.Snabbt.jsSanbbt.js是我很喜欢的一个动效库，它非常小巧只有5K，所以可以被用在移动应用中。而且它也支持链式语法，你可以很方便地写出复杂的动效组合。 123456789snabbt(element, &#123; position: [200, 0, 0], easing: function(value) &#123; return value + 0.3 * Math.sin(2*Math.PI * value); &#125;&#125;).snabbt(&#123; position: [0, 0, 0], easing: 'easeOut'&#125;); Snabbt 9.OdometerOdometer 是用来给数字作动效的，比如通过它你可以很好地呈现网站人数的增加，倒计时等与数字相关的动画效果。 Odometer 10.Hover.cssHover.css提供了大量的Hover效果，包括2D变换，图标变换，背景变换等等。而且几乎可以应用于所有元素，包括链接，按钮，logo，SVG甚至图片等等。 Hover","tags":[{"name":"Collection","slug":"Collection","permalink":"https://zhouie.cn/tags/Collection/"},{"name":"转载","slug":"转载","permalink":"https://zhouie.cn/tags/转载/"}]},{"title":"【分享】 转载的一些站点与工具(二)","date":"2018-04-29T15:38:32.000Z","path":"posts/201804291/","text":"Static site 总结各种各有的 static site generator Jekyll 其实是一个 static site generator. 如果你去 Google 这个，会发现有很多总结各种各有的 static site generator 的网站，例如这个：https://www.staticgen.com/ 。 很多人会选择 Octopress, Hugo, Hexo 等等，然而 Jekyll 还是大多数人的选择（一个原因应该是 GitHub, GitLab, Coding.net 都是默认支持 Jekyll 的）。 Some online play for joy Goodoldtetris Strobe Imagination Hexxagon 2048 矢量图标库 创造狮导航 Emoji Homepage Icons8 Icomoon 阿里巴巴矢量图标库 Awesome 中文网 站长素材-图标 字体·配色 求字体，不求人 COLORS —— A nicer color palette for the web.(Source) 在线调色板 在线小工具 在线工具 —— 开源中国社区 二维码 QR Code 制作器 制作svg工具Gimp &amp; Inkscape 自动正确给出英文标题哪里应该大写 通过电子表格创建数据映射 在线白板 持续不定期更新 🆗","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"转载","slug":"转载","permalink":"https://zhouie.cn/tags/转载/"}]},{"title":"【博客】 详细的更新日志","date":"2018-04-27T02:15:37.000Z","path":"posts/201804271/","text":"更新日志(详细) 2018-01-13正式开始搭建个人博客静态网站工作 2018-02-04利用GitHub提供的Pages服务完成了基于Jekyll框架下Vno-Jekyll主题的博客静态网站搭建，也就是上面提到的北岛向南的老店，具体搭建过程可参照我的这篇博文 2018-04-10增加了项目模块，尤其是那个online albums，特别感谢碰到了HTML5 UP提供的主题 2018-04-15几番测试将博客评论系统调换为较合适的来比力 2018-04-18去阿里云上购买了一个域名zhouie.cn并与GitHub Pages实现自定义域名 2018-04-19图床的集体更换，主要考虑并应用的有CloudApp、七牛云、微博相册等等，具体请看这里 2018-04-20自定义域名后，利用一家炒鸡棒的CDN提供商CloudFlare为该静态网站添加SSL并开启HTTPS强制，小绿锁真可爱哈哈哈…可参考文章 2018-04-22根据零碎的积累、见识，在这个过程中发现Hexo越来越吸引我了，而且Jekyll是不是还会给我带来一些惊喜(xia),于是乎，我毅然决然地准备开始花点时间去转移我的站点了 2018-04-26完成了基于Hexo框架下indigo主题的静态网站搭建，至于搭建Hexo框架所需要配置的环境啥的不想多赘述了，这个网上有很多教程的，而且感觉Hexo这种基于NodeJS的搭建过程相比Jekyll基于Ruby要简单快捷得多，分析了一下，应该是两个原因：① 以前NodeJS这方面有实用过，相对没那么陌生，更何况Hexo的确越来越更受大家的喜爱；② 前期的一些相关经验积累在这里也潜移默化地提高了我们在这里的搭建效率 2018-04-27基于Travis CI实现Hexo在Github和Coding的同步自动化部署 2018-04-30由于Gittalk出现问题了，简单尝试解决却失败了…于是直接将评论系统换为Valine，作为一款快速、简洁且高效的无后端评论系统，这款评论目前来说还可以，支持不需要登录相关账号的匿名评论，参考教程完成配置即可。同时，给出浏览到的这篇博文以供拓展：Hexo 优化———Valine 扩展之邮件通知 2019-01-05之前使用的图床是七牛云，不过后来七牛云就弄了三个月域名测试期，之前留存在七牛云中的很多未备份的图片就此消失了。只好重新选择https://sm.ms/图床平台将失效图床更换链接。 2019-03-12为了好(耍)看(酷)，添加了鼠标特效(爱心图形❤以及24字社会主义核心价值观)，LOVE AND PEACE 🔅 2019-03-29Valine评论系统出现邮件提醒失败的问题，所以调换当前的评论系统为一直以来想体验的Disqus。特别说明一下，这款评论系统需要FQ才能看到。","tags":[{"name":"日志","slug":"日志","permalink":"https://zhouie.cn/tags/日志/"}]},{"title":"【博客】 基于Travis CI实现Hexo在Github和Coding的同步自动化部署","date":"2018-04-26T11:09:41.000Z","path":"posts/201804261/","text":"完成Hexo主题安装和配置如果您还没有安装Hexo环境，请参考Hexo文档安装，也给出这样两篇博文————百度经验和2018最新版hexo+Github搭建个人博客教程仅供参考，这个去网上一搜到处都有，而且操作也很简单，就不赘述了。 我采用的是Indigo 主题，而且这个主题还很详细地给出了配置安装本主题的详细教程步骤(3.0 以上Hexo版本) Indigo 主题，一个Material Design风格的Hexo主题..预览：https://yscoder.github.io/.. NexT 主题，一个高质量并且优雅的Hexo主题，NexT使用文档.. 当然了，Hexo主题很多，更多可访问官网以及Hexo’s GitHub WiKi 基于Travis CI实现同步部署参考内容在这里要特别感谢一下这位CSDN认证博客专家PayneQin以下两篇博文对总个过程的帮助！ 持续集成在Hexo自动化部署上的实践 基于Travis CI实现Hexo在Github和Coding的同步部署 当然还有这篇手把手教你使用Travis CI自动部署你的Hexo博客到Github上.. 以及Travis CI自动部署Hexo系列文章 Travis自动部署Hexo一 Travis自动部署Hexo二 Travis自动部署Hexo三 Travis自动部署Hexo四 Travis自动部署Hexo五 Travis自动部署Hexo六 相关链接 Hexo的创建者@tommy351 | Twitter hexo专区文章 Hexo主题集锦 利用CI自动部署hexo博客 Travis CI - 项目持续集成好伴侣 Hexo Plugins 有哪些好看的 Hexo 主题？——知乎 原谅我最近很累，没打算去一点一点去码字记录下之前整个完整的过程了，所以呢，😅贴了一面A4大小的链接烂文… 不过还是按照我的路线写清了过程 如果之后会有什么问题的话，我会在本文后面补充说明，嗯就是这样 如果还有更新的话，我也会在详细的更新日志中给出 待补充🙏希望少出问题啦","tags":[{"name":"Git","slug":"Git","permalink":"https://zhouie.cn/tags/Git/"},{"name":"Hexo","slug":"Hexo","permalink":"https://zhouie.cn/tags/Hexo/"},{"name":"NodeJS","slug":"NodeJS","permalink":"https://zhouie.cn/tags/NodeJS/"},{"name":"Travis CI","slug":"Travis-CI","permalink":"https://zhouie.cn/tags/Travis-CI/"}]},{"title":"【分享】 图床工具分享","date":"2018-04-24T23:39:59.000Z","path":"posts/201804241/","text":"什么是图床？这并不是一个多么高大上的名词概念！用比较通俗的话来说，当你在撰写新文章时，你需要去插入图片以使得你的文章内容更加直观、易懂，这个时候有以下几种办法： 在博客根目录的 source 文件夹下新建一个image文件夹专门存放图片，在博文中引用的图片路径为 /image/图片名.后缀 1![](图片路径) 对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源，将站点配置文件中的post_asset_folder选项设为 true 来打开文章资源文件夹 1post_asset_folder: true 然后再博文中通过相对路径引用 1&#123;% asset_img 图片文件名 %&#125; 我们知道Github的主机还在国外，虽说目前访问速度还不算慢的，可是不论是Github还是Coding，项目容量都是有限的，不可能放入太多图片文件。 如果在项目文件中以相对路径引用的话，会出现跳转页面时一些图片路径会错误；使用绝对路径引用的话，会出现重定向的问题，浏览器可能会报302异常，使浏览器上的绿色小锁头不见了(这个不能忍……)。 使用第三方云服务储存，把图片放在国内的图床上是个更好的选择，虽然绝大多数云服务提供商都是收费(或是会有会员免费体验期或是按月分发一些免费容量)的，但在这个巨大的网络缝隙中，还是能找到其他一些可取的方法去满足我们(贫穷的学生党，呜wuwu~~)，下面我会列出一些我所找到的可取之径： 国内 阿里云 腾讯云 百度云 网易云 七牛云 又拍云 亿方云 坚果云 500px 上传照片到微博微相册 QQ空间相册其实也是可以的，只是这类处理方法也比较麻烦low… 上面这些都是目前国内一些在云服务方面较为主流的、实力也比较可靠的服务提供商，很多带有CDN加速处理，加载起来会更快。但可能有时候会因为容量太少的问题等，给劳苦大众带来一些不愉快，所以啊，还是广泛地搜集了一波国内其他一些的图床服务，其实这也是为了应对自己的不时之需，毕竟国内做图床服务这方面的不稳定性真的是…跌宕起伏 (哎，抬头远望，长城方向) 图床服务 个人评价 SM.MS ⭐⭐⭐⭐ cheveieto ⭐⭐⭐⭐ 路过图床 ⭐⭐⭐ uploader ⭐⭐⭐ 贴图库 ⭐⭐⭐ Clantu云相册 ⭐⭐⭐ 淡然图床 ⭐⭐⭐ 随意云 ⭐⭐⭐ MPic-图床神器 ⭐⭐⭐ 爱信息图床 ⭐⭐⭐ Gimhoy图床 ⭐⭐ 萝莉图床 ⭐⭐ 国外 CloudApp————国内可访问，个人比较推荐这个应用 Dropbox————墙了 Flickr————墙了","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"图床","slug":"图床","permalink":"https://zhouie.cn/tags/图床/"}]},{"title":"【分享】 在线演示工具分享","date":"2018-04-24T23:39:59.000Z","path":"posts/201804242/","text":"在线分享演示文稿在在线分享演示文稿这个标题的选择上，斟酌了好久，🙊就感觉怎么用最少的汉字来准确完整地将这项design tool的作用与应用领域给表达出来… 直接用一个实例展示一下吧~ 点击查看 工具分享目前我遇到的主要就是这两个，以后要是遇到相关的、喜欢的会再补充。 SpeakerDeck————墙了 Slides————国内可访问，个人很推荐这个应用 补充 2018-04-29整理分享了一些有关slides show的制作工具与框架原型等 ———— Slide Show👣","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"在线演示","slug":"在线演示","permalink":"https://zhouie.cn/tags/在线演示/"}]},{"title":"【博客】 为GitHub Pages自定义域名并添加SSL-开启https强制","date":"2018-04-23T10:01:44.000Z","path":"posts/201804231/","text":"直奔主题为什么要使用https协议？ 提高网站访问安全性，网络连接都是加密的 (PS：虽然SSL并不是无懈可击的，但是我们应该尽可能提高窃听成本)。 目前越来越多的浏览器会判断当前站点支不支持https协议，提高用户信任度，体验好. 例如：据外媒报道，从2017年1月份正式发布的Chrome 56开始，Google将把某些包含敏感内容的HTTP页面标记为“不安全”，比如含有密码或支付表单信息。Google最终目标是将所有打破了https连接的HTTP页面，用特定的红色图标给标记出来… 此举旨在唤起用户有关HTTP连接不安全、容易受到中间人攻击等危险的意识。通过HTTP连接发送的数据（比如密码和支付细节），会被通网络下别有用心的人轻易拦截。 Mozilla也在做着同样的事情——其中就有通过提供免费的TSL证书，以便其为网站服务部署https连接的Let&#39;s Encrypt项目。根据Chrome的遥测数据，在该浏览器每天加载的网页中，有近一半是通过https连接的。 福利：使用了https之后，如果网站的访客是从其他已经使用了https的网站上跳转过来，你就能在Google Analytics中获取更完整的来源信息。(说到这，不得不吐槽一下”墙”，它导致 Google Analytics的信息延迟长达一天以上，最后我不得不再将 Baidu Analytics 纳入我的选择。) 使用https之后，谷歌、百度等搜索排名权值（PR等）也会有相对提升。 And 个人原因，作为一个有个性并略有强迫症的耿直Boy，终于在前一阵子给自己的博客弄了个人域名zhouie.cn(阿里云)，怎么可以没有一把小小的绿锁头？！ 默认情况下使用GitHub Pages的给定域名则支持http和https两种协议，但是如果使用自定义域名的话，则只能通过http://访问，也就是说我们在Github上搭建 Hexo 或Jekyll 主题博客后，通过CNAME绑定个人域名后，我们只能通过http://域名来访问。如果访问https://XXX.github.io/(即原来的GitHub Pages域名)将会被重定向到我们的自定义域名。但若直接访问https://我们的自定义域名，浏览器会报SSL_DOMAIN_NOT_MATCHED警告。 附：在Github上搭建 Hexo 或Jekyll 主题博客，这个网上教程很多，提供一篇我之前有写过的一篇教程Jekyll 搭建个人博客。 那么怎么给自己的域名加上https呢？这个时候就需要使用第三方网站的证书了。而GitHub Pages并不支持上传SSL证书。 我在Google、Bbaidu上找相关解决办法时，又看到这样一个帖子：GitHub Pages 自定义域名启用 SSL，各位有什么建议？。 从网上提供的信息来看，目前方案主要有两种： 自己购买证书，部署到一台机器，机器部署nginx，stunnel等代理软件，反向代理到GitHub pages站点，域名指向代理机器IP(收费的SSL服务肯定是比免费的更加周到，一般收费的SSL都会提供端到端的加密，但是价格不菲，不推荐，不过这里还是分享一篇相关教程一步步教你把HTTP网站免费转成HTTPS网站)； 使用CloudFlare提供方案1类似的设置(推荐) 借用CloudFlare 给自己的域名加个 sCloudFlare 是一家CDN提供商，它提供了免费的https服务(但不是应用SSL证书)。实现模式就是，用户到CDN服务器的连接为https，而CDN服务器到GithubPage服务器的连接为http，就是在CDN服务器那里加上反向代理。 在网上还找到这样一种解释Cloudflare 提供一种被他们称之为Universal SSL的服务，可以让任意 HTTP站点支持 HTTPS。它的原理是当访客使用 HTTPS访问站点的时候，从访客到 Cloudflare 这段是加密的，然后从 Cloudflare 到站点这段是明文的。虽然不是全程加密，但是也能很大程度上解决中间人，如果从 Cloudflare 到站点的信道相对可靠的话 注册并登录CloudFlare，并将自己域名下的name server修改为CloudFlare的name server。 在CloudFlare的DNS设置域名匹配到自己的GithubPage(启用动态DNS加速)。 在CloudFlare的Crypto设置SSL为Flexible(等待一定时间实现建立连接后，就可以通过https来访问自己的 GithubPage )。 在CloudFlare的Page Rules中设置路由规则。一般情况下，利用Always use https设置两条规则，规则链接分别为http://域名/* 与http://域名/(开启https强制跳转)。 还有其他的一些，例如Cloudflare还提供免费的CDN和缓存技术，让浏览者有更好的体验~~ 详细步骤 创建CloudFlare帐户，并添加网站 首先你已经有自己的自定义域名的GitHub Pages ，我的 GitHub Pages CNAME文件写的是 zhouie.cn 明确一下我们的实现目标： 当访客输入zhouie.cn 强制跳转使用https，访问wwww.zhouie.cn 也会跳转到https://www.zhouie.cn 如果你还没有Cloudflare账号，点击注册 登陆后，点击这里 增加你的域名，如下图，输入你的域名，例如 zhouie.cn 并点击Add Site 注意不要写WWW前缀，大约60秒即可完成域名解析扫描。完成后点击Confirm Setup 继续下一步 选择免费计划，然后下一步~ 你看到DNS记录（包括子域）列表之后，按照下图提示设置后，其中cname是为了重定向www备的，点击Continue下一步 到你域名控制面板修改cloudflare给出的域名服务器，我这里以阿里云为例 在域名管理台点击管理 注：虽然官方说明，域名服务器修改最长需要72小时生效，但我用域名做了自己测试，大约只需要 5~10 分钟，看到 Status: Active 即可 设置SSL点击 crypto菜单 , 然后设置Flexible SSL ，如下图 添加www重定向到https://zhouie.cn并添加自动重定向到 SSL页面 添加SSL的教程就此完成，一般需要5~30分钟生效，小绿锁出现了，哈哈，美滋滋=.= 补充[转载]为什么Github Pages不支持为自定义域名添加SSL证书呢？当我们访问自定义域名，DNS指向的地址(Github Pages的IP)会在我们的仓库中寻找cname文件，判断目标文件和请求来源地址的域名一致后，Github Pages会将errorlife.github.io的内容返回给用户。 Ok，这是一个比较完整的过程，但是在解析的途中，看上面两张图(tracert一下这个”裸奔”站好了 :P)，你会发现请求的地址是“美国Fastly公司CDN网络节点”，很明显这是Github的CDN，而且它只支持80端口，不支持443端口，免费的CDN一般不支持,而https默认就是使用443端口。 所以我们就知道Github Pages在解析域名和原生地址所分配的是不同的CDN，前者是不支持https的，而后者恰恰相反。 思考我们牺牲了什么 天下没有免费的午餐，不劳而获始终都是泡沫。所以在这个过程中我们究竟牺牲了什么？ 我们必须修改域名的DNS服务器为Cloudflare提供的地址才能使用这项服务； 无法进行coding+github双线部署，除非你使用Cloudflare的收费服务，或者反向代理，更多思路详见v2ex提问的一个帖子。 检查是否引用外部资源这个问题在我这儿并没有出现过，可是从网上教程来看，因为以往(一两年前)引用的某些外部资源还是http的，会出现一些问题，比如： 生效后我发现我的网站是不太安全的状态，而且当我点击加载脚本之后，从不太安全的状态变成了不安全的状态。 v友的解决办法： 按下F12，尴尬的事情发生了，原来是配置文件和palceholder在作怪，由于多说的头像用的还是http，巧的是，没多久，多说就下线关门了。 这就要求我们对https协议理解通透，之后google了一下，发现https并不支持这种第三方引入资源。 参考资料 cloudflare官方使用指南 keanulee Blog sheharyar Blog Pages 博客 HTTPS 化尝试与 Universal SSL 为自定义域名的GitHub Pages添加SSL 完整方案 Hexo支持https访问 github pages绑定了个人域名，怎么使用https访问而证书不报错呢？-知乎 为绑定域名的 GitHub Pages 启用 HTTPS","tags":[{"name":"SSL","slug":"SSL","permalink":"https://zhouie.cn/tags/SSL/"},{"name":"HTTPS","slug":"HTTPS","permalink":"https://zhouie.cn/tags/HTTPS/"}]},{"title":"【分享】 转载的一些站点与工具(一)","date":"2018-04-17T17:59:17.000Z","path":"posts/201804171/","text":"技术站点 Hacker News：非常棒的针对编程的链接聚合网站 Programming reddit：同上 MSDN：微软相关的官方技术集中地，主要是文档类 infoq：企业级应用，关注软件开发领域 OSChina：开源技术社区，开源方面做的不错哦 cnblogs，51cto，csdn：常见的技术社区，各有专长 stackoverflow：IT技术问答网站 GitHub：全球最大的源代码管理平台，很多知名开源项目都在上面，如Linux内核 OpenStack等免费的it电子书：http://it-ebooks.info/ DevStore:开发者服务商店 平台工具（都是开源的好东东哦） Redmine/Trac：项目管理平台 Jenkins/Jira(非开源)：持续集成系统（Apache Continuum，这个是Apache下的CI系统，还没来得及研究） Sonar：代码质量管理平台 git，svn：源代码版本控制系统 GitLib/Gitorious：构建自己的GitHub服务器 gitbook：https://legacy.gitbook.com/写书的好东西，当然用来写文档也很不错的 Travis-ci：开源项目持续集成必备，和GitHub相结合，https://travis-ci.org/ 开源测试工具、社区（Selenium、OpenQA.org） Puppet:一个自动管理引擎，可以适用于Linux、Unix以及Windows平台。所谓配置管理系统，就是管理机器里面诸如文件、用户、进程、软件包这些资源。无论是管理1台，还是上万台机器Puppet都能轻松搞定。 Nagios：系统状态监控报警，还有个Icinga(完全兼容nagios所有的插件,工作原理,配置文件以及方法,几乎一模一样。配置简单,功能强大) Ganglia：分布式监控系统 fleet：分布式init系统 爬虫相关(好玩的工具) Phantomjs berserkJS(基于Phantomjs的改进版本) SlimerJS CasperJS selenium Web 服务器性能/压力测试工具/负载均衡器 http_load: 程序非常小，解压后也不到100K ab: ab是apache自带的一款功能强大的测试工具 Siege: 一款开源的压力测试工具，可以根据配置对一个WEB站点进行多用户的并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。 squid（前端缓存），nginx（负载），nodejs（没错它也可以，自己写点代码就能实现高性能的负载均衡器）：常用的负载均衡器 Piwik：开源网站访问量统计系统 ClickHeat：开源的网站点击情况热力图 HAProxy：高性能TCP /HTTP负载均衡器 ElasticSearch：搜索引擎基于Lucene Page Speed SDK和YSLOW HAR Viewer: HAR分析工具 protractor：E2E（end to end）自动化测试工具 Web 前端相关 GRUNT: js task runner Sea.js: js模块化 knockout.js：MVVM开发前台，绑定技术 Angular.js: 使用超动感HTML &amp; JS开发WEB应用！ Highcharts.js，Flot:常用的Web图表插件 Raw：非常不错的一款高级数据可视化工具 Rickshaw:时序图标库，可用于构建实时图表 JavaScript InfoVis Toolkit：另一款Web数据可视化插件 Pdf.js，在html中展现pdf ACE，CodeMirror：Html代码编辑器（ACE甚好啊） NProcess：绚丽的加载进度条 impress.js：让你制作出令人眩目的内容展示效果(类似的还有reveal) Threejs：3DWeb库 Hightopo：基于Html5的2D、3D可视化UI库 jQuery.dataTables.js:高度灵活的表格插件 Raphaël：js，canvas绘图库，后来发现百度指数的图形就是用它绘出来的 director.js：js路由模块，前端路由，Nodejs后端路由等，适合构造单页应用 pace.js：页面加载进度条 bower：Web包管理器 jsnice：有趣的js反编译工具，猜压缩后的变量名http://www.jsnice.org/ D3.js: 是一个基于JavaScript数据展示库（类似的还有P5.js） Zepto.js：移动端替代jQuery的东东，当然也可以使用jquery-mobile. UI框架：Foundation，Boostrap，Pure，EasyUI，Polymer 前端UI设计师必去的几个网站：Dribbble，awwwards，unmatchedstyle，UIMaker Mozilla 开发者中心：https://developer.mozilla.org/en-US/ 图标资源：IcoMoon（我的最爱），Themify Icons，FreePik，Glyphiconsart Dialog:非常漂亮的对话框 AdminLTE：github上的一个开源项目，基于Boostrap3的后台管理页面框架 Respond.js：让不懂爱的IE6-8支持响应式设计 require.js: js模块加载库 select2：比chosen具有更多特性的选择框替代库 AngularUI：集成angular.js的UI库 normalize.css: 采用了现代化标准让各浏览器渲染出的html保持一致的库 CreateJS：Html5游戏引擎Less,Compass:简化CSS开发 emojify.js:用于自动识别网页上的Emoji文字并将其显示为图像 simditor:一个不错的开源的html编辑器，简洁高效 Sencha: 基于html5的移动端开发框架 SuperScrollorama+TweenMax+skrollr:打造超酷的视差滚动效果网页动画 jquery-smooth-scroll:同上，平滑滚动插件 Animate.css:实现了各种动画效果的css库 Emmet:前端工程师必备，ZenCode的前身 MagicDraw:Uml图工具 大数据处理/数据分析/分布式工具 Hadoop：分布式的文件系统，结合其MapReduce编程模型可以用来做海量数据的批处理（Hive，Pig，HBase啥的就不说了），值得介绍的是Cloudera的Hadoop分支CDH5，基于YARN MRv2集成了Spark可直接用于生产环境的Hadoop，对于企业快速构建数据仓库非常有用。 Ceph:Linux分布式文件系统（特点：无中心） Storm：实时流数据处理，可以看下IBM的一篇介绍 （还有个Yahoo的S4，也是做流数据处理的） Spark：大规模流式数据处理（可以应付企业中常见的三种数据处理场景：复杂的批量数据处理（batch data processing）；基于历史数据的交互式查询（interactive query）；基于实时数据流的数据处理（streaming data processing）），CSND有篇文章介绍的不错 Spark Streaming：基于Spark的实时计算框架 Tachyon：分布式内存文件系统 Mesos：计算框架一个集群管理器，提供了有效的、跨分布式应用或框架的资源隔离和共享Impala：新一代开源大数据分析引擎，提供Sql语义，比- Hive强在速度上 SNAPPY：快速的数据压缩系统，适用于Hadoop生态系统中 Kafka:高吞吐量的分布式消息队列系统 ActiveMQ:是Apache出品，最流行的，能力强劲的开源消息总线 MQTT:Message Queuing Telemetry Transport(消息队列遥测传输)，是IBM开发的一个即时通讯协议，有可能成为物联网的重要组成部分 RabbitMQ：记得OpenStack就是用的这个东西吧 ZeroMQ：宣称是将分布式计算变得更简单，是个分布式消息队列，可以看下云风的一篇文章的介绍开源的日志收集系统：scribe、chukwa、kafka、flume。这有一篇对比文章 Zookeeper：可靠的分布式协调的开源项目 Databus：LinkedIn 实时低延迟数据抓取系统 数据源获取：Flume、Google Refine、Needlebase、ScraperWiki、BloomReach 序列化技术：JSON、BSON、Thrift、Avro、Google Protocol Buffers NoSql：Apache Hadoop、Apache Casandra、MongoDB、Apache CouchDB、Redis、BigTable、HBase、Hypertable、Voldemort、Neo4j MapReduce相关：Hive、Pig、Cascading、Cascalog、mrjob、Caffeine、S4、MapR、Acunu、Flume、Kafka、Azkaban、Oozie、Greenplum 数据处理：R、Yahoo! Pipes、Mechanical Turk、Solr/ Lucene、ElasticSearch、Datameer、Bigsheets、TinkerpopNLP自然语言处理：Natural Language Toolkit、Apache OpenNLP、Boilerpipe、OpenCalais 机器学习：WEKA、Mahout、scikits.learn、SkyTree 可视化技术：GraphViz、Processing、Protovis、Google Fusion Tables、Tableau、Highcharts、EChats（百度的还不错）、Raphaël.js Kettle：开源的ETL工具 Pentaho：以工作流为核心的开源BI系统 Mondrian：开源的Rolap服务器 Oozie：开源hadoop的工作流调度引擎 开源的数据分析可视化工具：Weka、Orange、KNIME Cobar：阿里巴巴的MySql分布式中间件 C &amp; C++ Thrift:用来进行可扩展且跨语言的服务的开发(类似的还有个Avro，Google protobuf)。 libevent:是一个事件触发的网络库，适用于windows、linux、bsd等多种平台，内部使用select、epoll、kqueue等系统调用管理事件机制。（对了还有个libev呢） Boost:不多说了，准C++标准库 Ptmalloc\\Valgrind\\Purify NetworkServer架构：acceptor-&gt;dispatcher-&gt;worker(这个不算工具哦) breakpad:崩溃转储和分析模块，很多crashreport会用到 UI界面相关：MFC、BCG和QT这类的就不说了，高端一点的还有Html和DirectUI技术：libcef（基于chrome内核的，想想使用html5开发页面，还真有点小激动呢）、HtmlLayout、Duilib、Bolt，非C++的，还有node-webkit也不错，集成了node和webkit内核。 游戏开发相关 MINA：使用Java开发手游和页游服务器(对了还有Netty，也很猛的，都是基于NIO的) HP-Socket：见有有些页游服务器使用这个构建的 云风的技术博客：http://blog.codingnow.com/ OGRE：大名鼎鼎的3D图形渲染引擎 OpenVDB：梦工厂C++的特效库，开源的 cocos2d：跨平台2D游戏引擎 unity3d：跨平台3D游戏引擎，很火的哦 Nodejs：也有不少使用它来开发手游和也有服务器（网易的Pomelo就是哦） 日志聚合，分布式日志收集 Scribe：Facebook的（nodejs + scribe + inotify 同步日志） logstash:强大的日志收集系统，可以基于logstash+kibana+elasticsearch+redis开发强大的日志分析平台 log.io: nodejs开发的实时日志收集系统 RTP,实时传输协议与音视频 RTP，RTCP，RTSP-&gt; librtp，JRTPLIB(遵循了RFC1889标准) 环形缓冲区，实时数据传输用 SDL,ffmpeg,live555,Speex Red5:用Java开发开源的Flash流媒体服务器。它支持：把音频（MP3）和视频（FLV）转换成播放流； 录制客户端播放流（只支持FLV）；共享对象；现场直播流发布；远程调用。 Python Eric,Eclipse+pydev,比较不错的Python IDE PyWin:Win32 api编程包 numpy:科学计算包，主要用来处理大型矩阵计算等，此外还有SciPy，Matplotlib GUI相关：PyQt，PyQwt supervisor:进程监控工具 Java相关 常用的IDE：IntelliJ IDEA，Eclipse，Netbeans Web开发相关：Tomcat、Resin、Jetty、WebLogic等，常用的组件Struts，Spring HibernateNetty: 异步事件驱动网络应用编程框架，用于高并发网络编程比较好（NIO框架） MINA：简单地开发高性能和高可靠性的网络应用程序（也是个NIO框架），不少手游服务端是用它开发的 jOOQ：java Orm框架Activiti:工作流引擎，类似的还有jBPM、Snaker Perfuse:是一个用户界面包用来把有结构与无结构数据以具有交互性的可视化图形展示出来. Gephi:复杂网络分析软件, 其主要用于各种网络和复杂系统，动态和分层图的交互可视化与探测开源工具 Nutch:知名的爬虫项目，hadoop就是从这个项目中发展出来的 web-harvest：Web数据提取工具 POM工具：Maven+ArtifactoryNetflix Curator：Netflix公司开源的一个Zookeeper client library，用于简化Zookeeper客户端编程 Akka:一款基于actor模型实现的 并发处理框架 EclEmma：覆盖测试工具 .net相关 Xilium.CefGlue:基于CEF框架的.NET封装，基于.NET开发Chrome内核浏览器 CefSharp：同上，有一款WebKit的封装，C#和Js交互会更简单 netz:免费的 .NET 可执行文件压缩工具 SmartAssembly:变态的.net代码优化混淆工具 NETDeob0：.net反混淆工具，真是魔高一尺道高一丈啊(还有个de4dot，在GitHub上，都是开源的) ILMerge：将所有引用的DLL和exe文件打成一个exe文件 ILSpy:开源.net程序反编译工具 Javascript.NET：很不错的js执行引擎，对v8做了封装 NPOI: Excel操作 DotRAS:远程访问服务的模块 WinHtmlEditor: Winform下的html编辑器 SmartThreadPool:使用C#实现的，带高级特性的线程池 Snoop: WPF Spy Utility Autofac: 轻量级IoC框架 HtmlAgilityPack：Html解析利器 Quartz.NET：Job调度 HttpLib：@CodePlex，简化http请求 SuperSocket：简化Socket操作，基于他的还有个SuperWebSocket，可以开发独立的WebSocket服务器了 DocX：未安装Office的情况下操作Word文件 Dapper：轻量级的ORM类，性能不错 HubbleDotNet：支持接入数据库的全文搜索系统 fastJSON：@CodeProject，高性能的json序列化类 ZXing.NET：@CodePlex，QR，条形码相关 Nancy：轻量级Http服务器，做个小型的Web应用可以摆脱IIS喽(Nancy.Viewengines.Razor,可以加入Razor引擎) AntiXSS：微软的XSS防御库Microsoft Web Protection LibraryJint：JavaScript解释器 CS-Script：将C#代码文件作为脚本执行 Jexus：Linux下 高性能、易用、免费的ASP.NET服务器 Clay：将dynamic发挥的更加灵活，像写js一样写C# DynamicJSON：不必定义数据模型获取json数据 Antlr：开源的语法分析器（归到C#不太合适，其他语言也可以去用） SharpPcap：C#版的WinPcap调用端，牛逼的网络包分析库（自带PacketNotNet用于包协议分析） Roslyn：C#，VB编译器 ImageResizer: 服务端自由控制图片大小，真乃神器也，对手机端传小图，PC端传大图，CMS用它很方便 UI相关：DevExpress, Fluent(Office 07风格), mui（Modern UI for WPF） NetSparkle：应用自动更新组件 ConfuserEx: 开源.net混淆工具 ServiceStack: 开源高性能Web服务框架，可用于构建高性能的REST服务Expression Evaluator：Eval for C#,处理字符串表达式 http://nugetmusthaves.com/ 常用工具 Fiddler：非常好用的Web前端调试工具，当然是针对底层http协议的，一般情况使用Chrome等自带的调试工具也足够了，特殊情况还得用它去处理 wireshark：知名的网络数据包分析工具 PowerCmd:替代Windows Cmd的利器 RegexBuddy:强大的正则表达式测试工具 Soure Insight：源代码阅读神器 SublimeText：程序员最爱的编辑器 Database.NET：一个通用的关系型数据库客户端，基于.NET 4.0开发的，做简单的处理还是蛮方便的 Navicat Premium：支持MySql、PostgreSQL、Oracle、Sqlite和SQL Server的客户端，通用性上不如Database.NET，但性能方面比Database.NET好很多，自带备份功能也用于数据库定时备份。 Synergy : 局域网内一套键盘鼠标控制多台电脑 DameWare：远程协助工具集（我在公司主要控制大屏幕用） Radmin: 远程控制工具，用了一段时间的 DameWare，还要破解，对Win7支持的不好，还是发现这个好用 Listary：能极大幅度提高你 Windows 文件浏览与搜索速度效率的「超级神器」 Clover：给资源管理器加上多标签 WinLaunch：模拟Mac OS的Launch工具 Fritzing：绘制电路图 LICEcap：gif教程制作git svn：版本控制系统Enigma Virtual Box（将exe，dll等封装成一个可执行程序） Open DBDiff(针对SqlServer)数据库同步 SymmetricDS：数据库同步 BIEE,Infomatica，SPSS，weka，R语言：数据分析 CodeSmith，LightSwitch：代码生成 Pandoc：Markdown转换工具，出书用的。以前玩过docbook，不过现在还是Markdown盛行啊。 Window Magnet[Mac]：增强Mac窗口管理功能，想Win7一样具有窗口拖放到屏幕边缘自动调整的功能 log explorer：查看SqlServer日志dependency walker：查询Windows应用程序dll依赖项 Shairport4w：将iPhone，iPad，iPod上的音频通过AirPlay协议传输到PC上 ngrok：内网穿透工具Axure:快速原型制作工具，还有个在线作图的工具国内的一个创业团队做的，用着很不错http://www.processon.com tinyproxy:（Linux）小型的代理服务器支持http和https协议EaseUS Partition Master：超级简单的分区调整工具，速度还是蛮快的，C盘不够用了就用它从D盘划点空间吧，不用重装系统这么折腾哦。 CheatEngine：玩游戏修改内存值必备神器（记得我在玩轩辕剑6的时候就用的它，超级方便呢） ApkIDE:Android反编译神器翻、墙工具（自由门、天行浏览器） 设计工具：Sketch、OmniGraffle MindManger：思维导图","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"转载","slug":"转载","permalink":"https://zhouie.cn/tags/转载/"}]},{"title":"【博客】 走进Markdown园子","date":"2018-04-11T13:46:57.000Z","path":"posts/201804111/","text":"欢迎关注微信公众号：北岛向南（id：nanzhouie） 扫一扫 + 微信公众号 GitHub Pages：https://zhouie.cn/markdown-doc/ 认识 Markdown HTML ( HyperText Markup Language ) 作为一种超文本标记语言 ( Markup Language ) 应运而生，无数的网页从此有了主次分明，层次清晰的格式。如果将 HTML 比作一架重机枪，那么 Markdown 就是一把手枪，满足了主要的文本格式标记的需求，可是操作性却大大简化。秉承 易读易写 的宗旨，Markdown 作为一种轻量级标记语言 ( Lightweight Markup Language ) ，让无数的程序猿和文字工作者爱不释手。 Markdown的优点 专注你的文字内容而不是排版样式，安心写作 轻松的导出 HTML、PDF 和本身的 .md 文件 纯文本内容，兼容所有的文本编辑器与字处理软件 随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱 可读、直观、学习成本低 Markdown 的现状 有时候一件事情的真相，不是来自于对它的思考，而是来自于对它的感觉。——Stanley Kubrick 这是 John Grumber 最喜欢的用来解释 Markdown 设计初衷的一句话，Markdown 语言希望带来的就是纯粹的写作的感觉，旨在简洁、高效，也由于 Markdown 的易读易写，人们用不同的编程语言实现了多个版本的解析器和生成器。 目前不同的 Markdown 工具集成了不同的功能（但基础功能大致相同），例如 流程图 与 时序图 ，复杂表格 与 复杂公式 的呈现。我相信随着 Markdown 语法的逐渐普及开来，以后更多的平台会支持 Markdown 书写模式，并集成更加完整的功能模块。 虽然功能的 “丰富” 并没有什么本质的缺点，但这个程度一旦 “过” 了头，终归有些背离初衷，与 “易读易写” 出现矛盾，开始在编写的过程中觉得有些许吃力了。那这个时候，用户可能会觉得，不如使用专业化的工具来撰写更有效率。 Markdown官方文档 创始人 John Gruber 的 Markdown 语法说明 Markdown 中文版语法说明 了解一下 John Gruber 2004 年 John Gruber创造 Markdown 语言，14年间，Markdown 语言从程序员圈子中逐渐扩散开来，成为了越来越多的电脑写作者第一选择。 John Gruber 是一个资深果粉，他的个人博客 Daring Fireball 被人戏称为 苹果官方喉舌博客。所以你应该懂为什么最好的 Markdown 编辑器都集中在 Mac 平台上了吧。 使用Markdown标题Markdown 通过在行首添加 1 ~ 6个 # 符号来定义不同级别的标题，最多到六级标题。注意 ：# 后最好是需要加一个空格。 书写格式 1234# 一级标题## 二级标题### 三级标题###### 六级标题 解析效果 # 标题样式 特别的，还可使用 = (高阶标题) 和 - (次阶标题) 标记 一级 和 二级 标题。注意：= 和 - 的个数在不同 Markdown 工具中都有不同，但这倒不是多大的问题了，简单试试就知道了。 书写格式 1234效果和一级标题一样=效果和二级标题一样- 解析效果 - = 标题样式 加粗、斜体 和 删除线 markdown使用 * 和 _ 强调文本，使用一个 * 和 _ 包围的文本会被转化为 斜体 ；而用两个 * 和 _ 包围的文本则会被转化成 加粗 ；使用两个~包围的文本会被转化为 删除线 但如果你的 * 、_ 和 ~ 两边都有空白的话，它们就只会被当成普通的符号，这其实也是一个需要注意的地方 如果要在文字前后直接插入普通的 星号 * 或 下划线 _ ，你可以用 反斜杠 \\ 转义 书写格式 12345*斜体文字*_斜体文字_**加粗文字**__加粗文字__~~删除内容~~ 解析效果 斜体文字斜体文字加粗文字加粗文字删除内容 列表Markdown支持 无序列表 和 有序列表。无序列表可以使用 * ， + ， - 三者中任意符号来标记；有序列表则使用 数字 加 . 来标记。注意：标记后面最好是需要加一个空格，有序列表的数字会被按顺序自动更正。通常情况下，无序列表的项目符号是按照实心圆、空心圆、实心方格的层级关系递进的。 书写格式 123456789101112131415161718有序列表1. 第一点2. 第二点5. 第三点无序列表* 这是无序列表项目- 这是无序列表项目+ 这是无序列表项目嵌套的列表- 呵呵 + 嘉嘉 * 嘻嘻 * 吼吼 * 嘎嘎 - 桀桀+ 哈哈 解析效果 有序列表 第一点 第二点 第三点 无序列表 这是无序列表项目 这是无序列表项目 这是无序列表项目 嵌套的列表 呵呵 嘉嘉 嘻嘻 吼吼 嘎嘎 桀桀 哈哈 引用在段落前添加一个 &gt; 符号即可将该段落标记为引用注意： &gt; 后最好是需要加一个空格；&gt;、&gt;&gt; 和 &gt;&gt;&gt; 等多层嵌套的使用，有点不太好总结，不要问我为什么，实践出真知。 书写格式 1234567891011121314151617181920一般用法&gt; 这是引用迭代使用（引用中的引用）&gt; 这是一级引用&gt;&gt; 这是二级引用&gt;&gt;&gt; 这是三级引用&gt;&gt;&gt;&gt; 这是二级引用&gt;&gt; 这是一级引用引用的区块内也可使用其他 Markdown 语法&gt; 1. 这是第一行列表项。&gt; 3. 这是第二行列表项。&gt; 5. 这是第三行列表项。&gt;&gt; 给出一些例子代码：&gt;&gt; return shell_exec(\"echo $input | $markdown_script\"); 解析效果 一般用法 这是引用 迭代使用（引用中的引用） 这是一级引用 这是二级引用 这是三级引用 这是二级引用 这是一级引用 引用的区块内也可使用其他 Markdown 语法 这是第一行列表项。 这是第二行列表项。 这是第三行列表项。 给出一些例子代码： return shell_exec(&quot;echo $input | $markdown_script&quot;); 补充一下 引用区块和代码区块的区别：&gt;引用区块中的文本保留Markdown语法，而\\```代码块中的文本不保留Markdown语法。 分割线分割线最常使用就是三个或以上 * ，还可以使用 - 和 _ 。注意：使用 --- 作为水平分割线时，要在它的前面空一行，防止 --- 被当成标题标记的表示方式。 书写格式 123---***___ 解析效果 插入链接markdown文本中插入链接非常方便，有 文内链接 和 引用链接 两种方式。 注意：文内链接 和 引用链接 显示效果是一样的，但是在编辑状态下的使用情况不一样。文内链接紧跟链接文字，可以在看到链接文字的同时清楚的知道链接地址，但是不便于多次重复利用。 引用链接可以重复使用，但一般都是将一些链接放在一起统一管理，如一段文字后面或文章结尾，因此在找到链接和链接文字的对应关系上有些麻烦，各有利弊，分情况使用吧。 书写格式 12345678910111213141516171819202122文内链接这是一个文内链接的[例子](http://example.com/ \"鼠标悬浮此处显示的标题\")。[这个](http://example.net/)链接在鼠标悬浮时没有标题。[这个](/about/)链接是本地资源。引用链接这是一个引用链接的 [例子][id]，[例子2][]。[id]: http://example.com/ \"鼠标悬浮标题（可选）\"[例子2]: http://example.com/ 注意，这里的 id 没有大小写区分，如果省略 id ，则前面方括号的内容会被用作 id 。我常用的网站包括 [Google][1]， [Yahoo][2] 和 [MSN][3] 。[1]: http://google.com/ \"Google\"[2]: http://search.yahoo.com/ \"Yahoo Search\"[3]: http://search.msn.com/ \"MSN Search\" 也可以写成我常用的网站包括 [Google][]，[Yahoo][] 和 [MSN][] 。[google]: http://google.com/ \"Google\"[yahoo]: http://search.yahoo.com/ \"Yahoo Search\"[msn]: http://search.msn.com/ \"MSN Search\" 解析效果 文内链接这是一个文内链接的这是一个链接的例子。这个链接在鼠标悬浮时没有标题。这个链接是本地资源。 引用链接的解析效果 插入图片插入图片和插入链接非常类似，只是在方括号前多一个 ! 。 [图片上传失败...(image-3c0559-1533526878147)] Alt text为如果图片无法显示时显示的文字。 /path/to/img.jpg为图片所在路径。 Optional title为显示标题。显示效果为在你将鼠标放到图片上后，会显示一个小框提示，提示的内容就是Optional title。 注意：Markdown 语法目前还没有某种合适的办法指定图片的宽高，但据我所知，很多平台以及在这个方向作出相当多的改进了，一起期待吧！ 书写格式 1234567文内链接![idol](http://pcx2lec2u.bkt.clouddn.com/201808051449_378.jpg)引用链接![idol][idol][idol]: http://pcx2lec2u.bkt.clouddn.com/201808051449_378.jpg 解析效果 文内链接 idol 引用链接解析效果 表格表格的书写格式一目了然，还是很方便简洁的。 书写格式 1234| 左对齐 | 中间对齐 | 右对齐 || :--- | :---: | ---: || 左1 | 中1 | 右1 || 左2 | 中2 | 右3 | 解析效果 左对齐 中间对齐 右对齐 左1 中1 右1 左2 中2 右2 角标不同于前面说的链接，这里的角标内容会被放在文末，点击可以实现跳转，使用 [^] 来定义脚注。 书写格式 1234使用 Markdown[^1] 可以效率的书写文档，直接转换成 HTML[^2] ，你可以使用Leanote[^Le] 编辑器进行书写。[^1]: Markdown是一种纯文本标记语言[^2]: HyperText Markup Language 超文本标记语言[^Le]: 开源笔记平台，支持Markdown和笔记直接发为博文 解析效果 使用 Markdown^1 可以效率的书写文档，直接转换成 HTML[^2] ，你可以使用Leanote^Le 编辑器进行书写。 [^2]: HyperText Markup Language 超文本标记语言。 上下标&lt;sub&gt;、&lt;sup&gt; 用作表示上下标 书写格式 123E = mc&lt;sup&gt;2&lt;/sup&gt;Water : H&lt;sub&gt;2&lt;/sub&gt;O 解析效果 E = mc2 Water : H2O 直接链接与邮箱在 markdown 中将 链接地址 或 邮箱地址 用 &lt;&gt; 包围，则会被自动转换成可点击的链接地址。 书写格式 123&lt;http://haoeric.com&gt;&lt;haoeric0520@gmail.com&gt; 解析效果 http://haoeric.com &#x68;&#97;&#111;&#101;&#114;&#105;&#x63;&#48;&#x35;&#50;&#x30;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#x6d; 换行使用html标签 &lt;br/&gt; 、 &lt;br&gt; 换行 书写格式 1第一行hahaha &lt;br/&gt; 第二行6666 解析效果 第一行hahaha 第二行6666 反斜杠如果需要避免文本中的符号被当做 markdown 标识符而发生不必要的格式转化，可以在符号前加 \\ 来避免。 书写格式 1\\*不是斜体\\* 解析效果 * 不是斜体 * 整理一下，Markdown 支持以下这些符号前面加上 反斜杠 来帮助插入普通的符号： 符号 含义 \\ 反斜线 ` 反引号 * 星号 _ 底线 {} 花括号 [] 方括号 () 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号 代码高亮使用栅栏标记代码块的一个好处是可以标明代码的语种，然后实现代码的高亮。 书写格式 12345```rubyrequire 'redcarpet'markdown = Redcarpet.new(\"Hello World!\")puts markdown.to_html``` 解析效果 123require 'redcarpet'markdown = Redcarpet.new(\"Hello World!\")puts markdown.to_html 其他锚点网页中，锚点 其实就是页内超链接，也就是 链接本文档内部的某些元素 ，实现当前页面中的跳转，最典型的例子就是 目录 这种结构了。比如我这里写下一个锚点，点击 回到目录，就能跳转到 目录。 在 目录 中点击 这一节，就能跳过来。 在 Github 的 md 文件中，会为每个 h1~h6 标签(即 # ... ###### )，自动塞入一个 a 标签，并渲染好 id 。 比如 # h1，被渲染成html如下： 123456789&lt;h1&gt; &lt;a id=\"user-content-h1\" class=\"anchor\" href=\"#h1\" aria-hidden=\"true\"&gt; &lt;svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" role=\"img\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"&gt; &lt;path d=\"M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z\"&gt; &lt;/path&gt; &lt;/svg&gt; &lt;/a&gt; h1&lt;/h1&gt; 不去管 svg 部分，可以看到 h1 标签内嵌入了一个 id 为 &quot;user-content-h1&quot; 的 a 标签，如果标题为 # h5 ，那么 id 就会是 user-content-h5 。 空格在段首加入 &amp;emsp;、&amp;ensp;、&amp;nbsp; 来输入空格，其中，&amp;emsp; 是一个中文字符，&amp;ensp; 是半个中文字符 ，&amp;nbsp; 是1/4中文字符。 图片图床插入图片的地址需要图床，那么，究竟什么是图床呢？ 图床，顾名思义，图片床，即大量图片汇聚地，每一张图片都有一个url,供所需站点使用。 详情可以参考我之前写的博文 图床工具分享 。 另外，越来越多的 Markdown 工具现在开始支持 一键上传图片至云端并生成 Markdown 引用链接至剪切板，可以看看最近的我最近在这方面的 收获总结 —— Md2All Markdown排版利器 以及 qiniu_upload windows工具。 ps：七牛云邀请注册链接：https://portal.qiniu.com/signup?code=3lowm9s25ur82 LaTeX公式 LaTeX公式参考语法 行内公式（$表示） 书写格式 1爱因斯坦发明的质能方程是：$E=mc^2$ 显示效果 爱因斯坦发明的质能方程是：$E=mc^2$ 整行公式（$$表示） 书写格式 123$$\\sum_&#123;i=1&#125;^n a_i=0$$$$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$$$\\sum^&#123;j-1&#125;_&#123;k=0&#125;&#123;\\widehat&#123;\\gamma&#125;_&#123;kj&#125; z_k&#125;$$ 显示效果 $$\\sum_{i=1}^n a_i=0$$$$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$$$\\sum^{j-1}{k=0}{\\widehat{\\gamma}{kj} z_k}$$ 流程图、渲染序列图 流程图参考语法 渲染序列图参考语法 流程图123456789101112```flowst=&gt;start: Start:&gt;https://www.zybuluo.comio=&gt;inputoutput: verificationop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?sub=&gt;subroutine: Your Subroutinee=&gt;endst-&gt;io-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;sub-&gt;io``` 流程图 显示效果图 渲染序列图12345```sequenceAlice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks!``` 渲染序列图 显示效果图 GitHub EmojiGithub 的 Markdown 语法支持添加 emoji 表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。我在 github 上分享了 markdown-emoji 列表，可以去看看。 markdown-emoji 列表 可是奇怪的是，我的GitHub Pages 采用 Hexo框架，渲染不出 emoji 表情(不支持)，这是为什么呢？ 这是因为 Hexo 默认的 markdown 渲染引擎不会渲染 emoji 表情，详情可参阅 搭建Hexo博客进阶篇 Markdown的局限性 不同的 Markdown 工具功能细节上可能会不一样 写技术类文章条理很重要，因此在开篇有个目录，也显得非常有必要，因此越来越多工具支持 [TOC] 一键生成目录列表，具体可参看我的 github-md-toc 另外还有，流程图，渲染序列图，LaTex数学公式，代码语法高亮，显示代码行号，图片/文字 居中/左右对齐，[TOC]目录生成，等等这些，其实都是非常必要的功能，值得去做一些扩展。 Markdown 工具的选择 还是那句话，编辑器的兴盛固然是好事，但工具的过度丰富也是一种麻烦，如何选出适合自己的 Markdown 编辑器让很多人大伤脑筋，甚至在很多时候，一个设计不佳的 Markdown 编辑器会让初次尝试 Markdown 的写作者放弃使用 Markdown 来写作。 Windows 平台Sublime 支持 OS X、Windows、Ubuntu 等 UNIX 及 Linux 平台 关联阅读：强大的Sublime编辑器 Sublime Text 是程序员圈子里口口相传的「神器」级代码编辑器，它基于 Vim 开发，各种功能性组件层出不穷，功能极度强大，是代码编辑器中的标杆作品。 同时，它也支持 Markdown 语法高亮，于是很多人都习惯于用它来进行 Markdown 文档书写。由于有着诸如 Markdown Preview、Sublime-Evernote 等扩展性插件，在 Sublime Text 里完全可以完成 Makrdown 书写预览与导出的过程。 如果你是一名开发者，Sublime Text 基本可以满足你对 Markdown 编辑的全部需求，如果你是一名普通用户，我则更推荐你使用专业的 Markdown 编辑器。 image 简书 简书的Web 端使用 Markdown 很舒服，它同样支持左右两栏的实时预览，字体优雅、简洁。 简书 Cmd Markdown 除了编辑，管理您的私有文档，Cmd Markdown 还支持发布文稿，您可以在这里将文稿共享给朋友、亲友、同事。 支持 Linux、Mac、Windows 三大平台，轻松选择适合你的客户端 Cmd Markdown Cmd Markdown 全平台端 优势 马克飞象 支持 Windows 平台 专为 印象笔记 打造的 Markdown 编辑器 马克飞象 为知笔记 支持 Windows 平台 作为一个支持全平台的云笔记应用，为知笔记完全可以当作 Markdown 编辑器来使用，当我们需要跨大平台进行 Markdown 协作写作的时候，会是一个不错的选择。 为知笔记 Simple MarkPad Simple Markpad 最吸引人的一点就是，在诸多看起来就让人觉复杂的 Windows 平台的 Markdown 编辑器中，它始终保持着简约的风格。 它支持自动列表、图片拖入、Markdown 语法高亮、全屏写作模式、字数统计，还有丰富的快捷键，同时具有着素雅而克制的界面风格。 image MarkPad 支持 Windows 平台 MarkPad Miu 支持 Windows 平台 一个很优秀的工具，但是由于和 Mou 重复性比较高，同时与其有些争议问题，故并未介绍，有兴趣的话可以自行查看。 Miu Mac 平台Mou Mou 是一款由国人开发的 Mac 平台上的 Markdown 编辑器，支持自定义界面主题，导入输出CSS格式文件，最重要的是 Mou 支持 Markdown 实时预览，这让不少初学者能快速上手 Markdown 写作。 Mou 除了直观的实时预览功能之外，还是目前对中文支持最好的 Markdown 编辑器，无论是多种的编辑主题，还是各式的输出样式，在支持自定义的同时，对中文的优化也是目前的最好的，Mou 甚至支持竖排编写。同时，Mou 还具有发布功能，支持发布到 Tumblr。 image Ulysses 作为 Markdown 编辑器领域的老牌王者，这款应用入围了苹果2013年 Mac App Store 的 The Best of 2013。Ulysses 有着经典的文档库架构，多样化的可供自定义的编辑主题，大量的输出格式选择，功能丰富，最适合长文写作与颜控用户。 无论是 PDF 还是 ePub 格式你都可以在官网下载到大量的现成格式模版，省去大量的用在排版上的时间，你需要做的只是按照自己的想法写完文章，之后就可以通过 Ulysses 导出成任意自己想要的格式了。 image Byword 如果说 Ulysses 是功能最丰富的 Markdown 编辑器，Byword 就是最简约的 Markdown 编辑器。同样作为 Apple 平台上的老牌编辑器，Byword 有着一种简约克制的气质，仅有 6.4 MB 的体量，却创造出了一个完美而纯粹的写作环境。 在我看来 Byword 应该是目前编辑器中最忠于 Markdown 语言发明初衷的的编辑器 —— 简单、干净、利落，All for writing feelings。 image typora 支持 Mac 与 Windows 平台 关联阅读： 《让 Markdown 写作更简单，免费极简编辑器：Typora》这款编辑器在大家都还在苦恼如何处理预览和写作界面之间的关系时候，机智的将「写作」和「预览」合二为一了，你输入的地方，即是你输出的地方。 Markdown 标记成为了类似快捷键一样的存在，你就像在使用一个所见即所编辑器一样，自然而快速的进行写作。可以说，Typora 完全颠覆了目前的 Markdown 编辑器的交互模式，将 Markdown 写作向普通用户推进了一大步。 image Typora 的革新不止于此，它还提供了了类似 Office 的图像式表格建立方式，支持目录大纲生成，支持拖拽插入图片，并且支持所有主流代码的高亮与 LaTeX 公式编写。 可以说 Typora 是目前 Markdown 编辑器中功能最与众不同的一个，诸多新鲜而强大的功能让它卓尔不群，绝对值得尝试。 image Quiver 关联阅读：《技术写作者的专属笔记本：Quiver》 Quiver 同样是一款国人开发的软件。它具有着强大的 Markdown 编辑能力，但同时又不仅限于此。 它集合了写作软件与笔记软件的特点，它既有着传统 Markdown 写作软件的实时编辑预览，又有着笔记软件的文件逻辑结构，同时它还内置了 Ace 代码编辑器，通过 Cell 的概念，将各种不同的格式组合在一起，最后形成一个个文件。 Quiver 可以说是一款为技术写作设计的，专注于笔记方向的 Markdown 编辑器，它能够在为你提供流畅的 Markdown 写作体验的同时，为你构建起一个良好的知识管理结构。 image Alternote 同为 Mac 平台上的笔记式 Markdown 编辑软件，Alternote 则是为印象笔记进行了深度定制，成为了一款简约轻量的第三方印象笔记客户端。它抛弃了印象笔记臃肿的架构，专注于对写作体验的优化，深度重构了印象笔记对对于 Markdown 写作者的意义。 在 Alternote 里，Markdown 标记在输入完成后会自动转换成对应的富文本格式，并不需要额外的预览，不过美中不足的是，这样也造成了一旦转换为富文本就无法再转换回来的问题。 Alternote SnippetsLab Snippetslab9 是一款 Mac 平台的面向开发者的代码管理与编写工具，专注于帮助使用者收集整理代码片段，快速调用有价值的代码片段，打造属于个人的代码仓库。 那么它和 Markdown 的关系在哪里呢？奥秘就在它的菜单栏助手上。Snippetslab 的菜单栏助手有着类似印象笔记菜单栏助手的特性，支持在菜单栏打开小窗口进行程序编写，同时可以对代码进行语法高亮，而它正好也支持 Markdown。 目前所有平台中，Snippetslab 是唯一一款提供了菜单栏 Markdown 文字输入的应用，你可以在不用打开主题程序的情况下，以小视窗形式快速的进行 Markdown 编写。 image MarkdownPad 支持 Mac 平台 image 网页版(线上) 程序猿DD - 常用工具：Markdown转换工具 马克飞象 - 专为印象笔记打造的Markdown编辑器 Cmd Markdown编辑阅读器 - 作业部落出品 Dillinger, the Last Markdown Editor ever. StackEdit – In-browser Markdown editor Scribble - Simple Markdown Wiki Free Markdown to HTML Converter Draft. Write Better. Markable.in Markdown.css 同时，也有一些 Markdown 相关浏览器插件也是很棒的，最典型的便是：Markdown-Here，我也有写一篇博文专门介绍分享了它 —— Markdown-Here md-2-html渲染 Others Editor.md - 开源在线 Markdown 编辑器 WriteMonkey DAUX.IO ReText Cmd Markdown vim Mango Haroopad iA Writer MarkdownX markItUp! Universal Markup jQuery Editor More如有更好的 Markdown 免费编辑器推荐，请到这里留言反馈，谢谢~ 推荐阅读 MarkDown学习笔记 首次使用MarkDown好激动 让你的Markdown用起来得心应手 一段JS代码让Markdown自动生成侧边栏目录 Markdown 语法说明 (简体中文版) 码字必备：18 款优秀的 Markdown 写作工具 | 2015 年度盘点 - 少数派 补充2018/04/20 07:12 Markdown_desktop_tool_rank.png 2018/08/05 20:36 整理于2015年","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"Markdown","slug":"Markdown","permalink":"https://zhouie.cn/tags/Markdown/"}]},{"title":"【转载】 图灵访谈：Redis带你尽享丝滑","date":"2018-03-19T17:30:39.000Z","path":"posts/201803191/","text":"作者简介：白宸，本名郑明杭，现阿里云NOSQL数据库技术专家。先后从事Tair分布式系统、Memcached云服务及阿里云Redis数据库云服务开发，关注分布式系统及NOSQL存储技术前沿。曾在飞马网&amp;中生代技术嘉年华上发表题为《ApsaraDB for Redis云数据库技术栈详解》的演讲内容，获得观众一致好评！ 问：为什么选择数据库方面的工作？ 答：数据库是产品应用的基础。直播、共享单车等每个火爆产品的背后都是大量关系型数据库、NOSQL类型数据库在支撑。另外，中小企业为了专注自身业务的发展都会选择云计算，将基础设置的建设交给云服务商。云服务商为了提供高性能、高可用的数据库产品需要投入足够多的研发精力。在数据库研发过程中，数据库研发者既可以深入内核、网络、存储设备进行深度的优化改进，又能够在数据库层面扩展出分布式、异地容灾等不同的产品形态，同时结合不同类型的业务进行不同的深度优化。 选择数据库开发工作主要是为了能够结合计算机理论知识，实践分布式、存储、数据库、内核，反过来在实践开发过程中巩固提高自己。 问：阿里云的Redis数据库和其他云计算厂商相比，有何优点？ 答：阿里云的Redis云服务整体架构在ApsaraDB上，具有完善的任务管理、监控运维、高可用体系，能够支撑海量的实例管理及不同的产品需求。阿里云Redis数据库提供了主从双副本、主从单副本、集群双副本等多样的产品供用户选择。 主从双副本版本要求主从双机热备，将数据持久化到磁盘，当主库发生故障的时候快速切换到备库上以保证服务的可用性。相比开源Redis及其他厂商的Redis，阿里云对Redis的故障探测进行了更深度地优化：通过专门的探测端口来避免Redis单线程阻塞的影响，通过对磁盘、CPU、内存等硬件的检测提前发现故障隐患进行主动切换，优化原生的主备复制机制，采用增量日志加内存buffer的方式进行同步，避免弱网情况下主备复制频繁断开及全量同步。 主从单副本是云数据库 Redis 推出的一种全新系列，采用单个数据库节点部署架构。与双副本版本相比，它只包含一个节点，没有备用节点实时同步数据，不提供数据持久化和备份策略，适用于对数据可靠性要求不高的纯缓存业务场景。与其他云厂商相比，阿里云Redis单副本能够保证在主库发生故障的时候快速切换到新节点，但是这个新节点是没有数据的，用户需要在切换完成之后进行数据预热避免数据库的打穿。 阿里云Redis集群完全采用自研的技术体系，设计的时候充分考虑到用户能够从主从版本平滑迁移过来的需求。Redis集群架构引入了Proxy、Config模块，Proxy负责数据的分发及路由，Config负责数据的迁移及路由表管理。多个无状态的Proxy、Config模块可以保证整个链路的高可用，避免单点问题。与其他云厂商相比，阿里云Redis集群能够保证更高的兼容性，用户可以在主从版本和Redis集群之间进行无缝切换，不需要去更改用户的代码。同时，阿里云Redis集群还支持多db的模式，相比大部分开源的Redis集群方案有较大的优势。 为了更好的服务用户，后续阿里云Redis产品还会推出读写分离、异地容灾、异地多活等产品形态供用户进行选择。最近阿里云Redis又推出了256MB的主从双副本实例，适用于PHP缓存、论坛加速、数据库加速等，随着业务的发展用户还可以进一步扩容。活动期间可以享受99元包年的优惠！ 问：先后接触过Tair，Memcached和Redis后，在云服务开发中有哪些深刻的体会？ 答：作为基础服务开发工程师，数据库的稳定性、性能是第一要位的。用户对数据库的高可用及稳定性都有很高要求的，我们在开发过程中需要选用合理的架构，在架构上避免单点问题，避免故障无法恢复问题。对于云服务需要做到足够的隔离，避免不同租户的互相影响，同时在设计云服务过程中需要考虑到可扩展性。公有云服务的每个业务都有自己的特点，会催生出不同的业务需求，所以在初步设计的时候需要保留支持多种业务模式的能力。 问：在阿里云内部，Redis技术最得意的应用场景是什么？使用过程中存在哪些痛点？ 答：阿里内部大量使用了阿里云Redis服务，比如手淘、高德、CDN业务、菜鸟等都大量使用了Redis以实现不同的业务。微淘社区承载了亿级淘宝用户的社交关系链，其中每个用户都有自己的关注列表，每个商家都有自己的粉丝信息。我用下面的图来展示整个微淘社区承载的关系链。 如果选用传统的关系型数据库模型表达上面的关系信息，业务设计会变得异常繁杂，也不能获得良好的性能体验。使用Redis集群，微淘社区缓存了存储社区的关注链，简化了关注信息的存储，并保证了双11业务丝滑一般的体验。微淘社区使用了Hashes存储用户之间的关注信息，存储结构如下图所示。 随着业务规模的壮大，用户需要后端Redis云服务能够做到动态扩容。阿里云Redis集群实例提供了资源变配功能，用户可以在需要的时候进行变配以应对容量的增加。另外，对于淘宝业务来说，每年的双11都是重中之重，我们在双11之前都会跟业务方确认当年的访问量和业务量，同时提前进行双11的全链路压测，保证业务丝滑般的体验。 在使用开源Redis的过程中，我们也碰到了很多问题，比如原生Redis的同步依赖于内存buffer，这会带来一个问题：在弱网情况下，如果内存buffer溢出，原生Redis需要进行一次全量同步。为此阿里云Redis对主备同步进行了优化，通过binlog日志加内存buffer的形式解决掉弱网全量同步的缺陷。另外，在云服务开发运维过程中难免需要对Redis服务进行升级管理，但原生的Redis内核不能很好地支持热升级机制，如果直接重启会对用户的访问产生很大的影响。阿里云Redis通过拆分动态库的形式做到了3ms内对一个实例进行热升级，而且升级过程中对用户的访问不会有任何影响。 问：关系型和非关系型数据库在实现上有哪些主要区别？各自面向的应用领域和作用是什么？ 答：简单来说，关系型数据库是指采用关系模型来组织的数据库。传统的关系型数据库由二维表模型来组织，表与表之间具有一定联系，业务可以通过SQL语句对数据库进行更新、查找、删除。非关系型数据库（NoSQL）的最初定义是没有SQL的轻量级数据库，并且不保证遵循ACID原则的数据存储系统。 关系型和非关系型最大的区别在于是否保持事务的一致性，虽然像Redis这样的非关系型数据库也有事务的说法，不过Redis事务是相对简单的事务模型，而传统关系型的数据库是要求读写操作来保证事务一致性的，因为关系型的数据库具有更多的应用场景，并且多用于对数据一致性有强烈要求的系统中。非关系型数据库里的key—value结构具有极高的并发读写性能，所以常常用于高速缓存中，作为传统数据库的缓存提供更高的并发访问。 问：新手如何选择数据库类型，传统关系型数据库还是非关系型数据库？ 答：两种数据库类型是相辅相成的，关系型数据库可以用于对数据一致性有更高要求的场景，同时能够支撑复杂类型的关联查询，而非关系型的数据库可以用于数据库的缓存，或者用于结构简单的业务场景。另外，由于Redis提供了更多复杂类型的数据结构，所以也可以将Redis用于更丰富的业务场景，比如用List结构来实现推送系统、弹幕系统等。 问：数据库的实现相当复杂，如果想要研究如何实现数据库系统，即学习造轮子，您有什么建议？ 答：如果要研究数据库的实现可以先从应用层的应用开始，先熟悉数据库的应用场景，也可以先阅读数据库相关的基础知识，了解数据库的SQL解析、持久化机制、数据同步、数据库索引等掌握数据库实现的设计原理。学习过程中，我们可以阅读优秀开源数据库的源码实现，跟踪调试了解整个数据库命令执行的过程；根据数据库命令的每一步执行，在代码跟进过程中思考如何优化和增加新功能。积极融入开源社区的各种活动，定期查看社区的问题。在解决社区用户汇报问题的过程中，对数据库知识做到整体地把握，着重深入某一具体方面的知识。 以NOSQL数据库的学习为例，我们可以通过阅读Redis数据库源码，了解每种数据结构在内存里的组织方式，思考如何更好地存储复杂类型的数据结构。跟Memcached进行比较，分析两种做法的优劣。 为了更好地研究数据库的实现，我们需要多动手，在实际项目中了解数据库的实现，通过开发新功能、优化老功能来巩固知识，同时兼顾数据库理论知识的学习。 问：如何保证缓存数据和数据库数据的一致性？ 答：在大数据、高并发的情况下，很多业务系统都会采用“缓存+数据库”的方式，对缓存副本和数据库数据做同步处理。同步的方式主要有以下几种。 自动失效: 通过设置过期时间让缓存中的数据自动失效，对数据一致性要求更高的业务，可以将过期时间设置得短一点 定时刷新: 通过后台设置定时刷新的线程，定时将数据库的数据同步到缓存中，这种模式适合对一致性要求不是很高的业务 同步更新：在更新完成数据库之后，直接更新缓存的数据。这样缓存的数据就永远在数据库之后更新，能够保证数据的一致性 中间件更新：通过中间件订阅数据库的binlog服务，感知数据库信息的变化在中间件上对缓存进行更新，这种模式能够快速感知数据库的变化并且不需要业务方去管理缓存，方便业务接入缓存系统 问：谈谈分布式系统存储技术未来的方向？ 由于传统单机数据库在可扩展性上面临着巨大的挑战，而NOSQL并不能很好地支持关系型的数据库模型，NewSQL成为了目前分布式数据库存储技术最前沿的一个方向。NewSQL具有海量数据的存储管理并且能够保持传统数据库的ACID及SQL特性。 NewSQL采用了大量的新技术。在存储方面，NewSQL采用以内存为主的存储，将主要的数据缓存于内存中，能够维持内存和持久化存储的数据比例，提高系统的性能；为了支持数据库的可扩展性，NewSQL通过数据分片的模式将数据分布到不同的group中，同时能够支持不同group的数据进行热迁移以达到数据的负载均衡；NewSQL在复制方面需要保证数据的一致性，事务的写入必须在被确认提交之前被确认并安装到所有副本；要做到高可用就需要从崩溃中恢复，相比传统的故障恢复，NewSQL还希望尽量减少故障恢复的时间。 从技术角度来讲，NewSQL与传统数据库并不是完全不同的架构，NewSQL的新特点在于能够融合多方的技术，在一个独立的系统中进行实现，同时随着硬件技术的发展能够提供更可靠更具有扩展性的数据库服务。 本文作者：六米，转载自图灵访谈，仅用于学习和交流目的，非商业转载请注明作译者、出处，并保留本文的原始链接。","tags":[{"name":"阅读","slug":"阅读","permalink":"https://zhouie.cn/tags/阅读/"},{"name":"Redis","slug":"Redis","permalink":"https://zhouie.cn/tags/Redis/"}]},{"title":"【摘录】 Justin Frankel - Winapp的反斗奇星","date":"2018-03-16T13:21:34.000Z","path":"posts/201803161/","text":"文章名：Justin Frankel | Winapp的反斗奇星刊载：《程序员》 2005年03期作者：方茜原文链接：Justin Frankel Winamp的反斗奇星-程序员2005年03期-手机知网 你肯定用过他的产品——Winamp，但你不一定知道他是谁。他叫Justin Frankel，27岁的美国小伙子，Winamp是他19岁时的杰作。他像Bill Gates一样年少得志，但却没有选择走Bill Gates那样的道路。他不断地为后来的雇主AOL制造麻烦，但又不断地涌出奇思妙想，创造各种软件工具。 与Bill Gates一样，Frankel出生在一个中产家庭。在Frankel很小的时候，他的哥哥开始在Atari 800XL（比任天堂还早的家庭电视游戏机）上编写小程序，这激起了他对BASIC的兴趣。从此一发不可收拾，小Frankel接着又学习了Turbo Pascal、Turbo C++和C。这些编程技能最终让他成为所在高中的网络管理员，那时他还为同学写邮件应用程序以及按键日志程序。这个按键日志程序可以记录人们在使用计算机时敲击过的字母、数字等。那时他就为自己的软件起名为“Nullsoft”，这是为了嘲讽Microsoft，后来这也成为他自己公司的名字。 1996年，Frankel进入犹他大学学习计算机科学。但很快半年后他就退学了，就像Bill Gates当年所做的一样，他也开始了自己的创业。1997年，一位名叫Tomislav Uzelac 的开发者开发了世界上第一个MP3播放器——AMP MP3 播放引擎并在网络上免费发布。Frankel把这个引擎移植到Windows上，并添上由他朋友Tom Pepper制作的用户界面，这就是最初的Winamp，由他新成立的公司Nullsoft免费向网民发布。几经修改，凭借独特的均衡器、播放列表和迷幻的视觉效果，Winamp受到MP3用户的追捧，到1998年，便有1亿5千多万人下载了这个程序。面对如此大的成功，Frankel在父母的建议下从Winamp1.40版起开始向用户收取10美元的注册费用，Nullsoft也因此每月有了1万美元的进账。许多公司闻风而至，要求注资Nullsoft，为此Frankel的父亲放弃了自己的法律业务，开始帮助儿子处理公司的相关事务。 1999年，Frankel以8亿6千万美元的价格把Nullsoft卖给了AOL。由于之前Nullsoft没有接受过大规模的融资稀释股权，Frankel个人从这笔交易中获得了1亿美元的进账。不过，作为这笔交易辅助条款，Frankel不得不继续留在Nullsoft中为AOL工作。 显然，我行我素惯了的Frankel进入控制森严的AOL后感到非常不适应。他可以与因循守旧的教授闹翻而中途辍学，还可以天马行空地编写自己喜欢的程序交换MP3而把唱片版权置之脑后，而这里却是一个“我无法做我想要做的事情”的环境。所以，不愿意适应“公司文化”的Frankel时不时给他的老板制造麻烦。麻烦之一就是Gnutella。2000年3月，Frankel未经AOL允许私自通过Nullsoft公司网络服务器发布了这个P2P文件共享系统。它类似Napster，不过与Napster不同的是Gnutella允许用户共享任何类型的文件而不仅是MP3。更重要的是，Gnutella还避免了Napster的致命弱点，它没有索引中枢，不会记录用户信息和传输内容。然而，这对一直打击网络共享的时代华纳公司来说很要命。而那时，AOL正在紧锣密鼓地收购时代华纳，当然不愿意看到因为Gnutella而影响收购进程。Gnutella最终被勒令停止，AOL向时代华纳道歉说这只是Frankel的个人行为。 这件事之后，AOL对Frankel的监管更加严密，但Frankel依然我行我素，继续与AOL的“内部官僚主义政治”抗争。Frankel炮制出的麻烦之二是AIMazing ，这个程序可以把AOL Instant Messenger中的条形广告替换成声波图。Frankel称这是“一项可爱的发明”。《华尔街时报》称Frankel简直就是“AOL管不住的大炮”。麻烦还不仅如此。2003年5月，Nullsoft开发了WASTE，一种私人的加密P2P文件共享软件。通过AOL Instant Messenger或ICQ，它可以安全地传送文件和消息而不被记录和察觉。不可避免，AOL立即取消WASTE项目。为此Frankel威胁要辞职，但他仍然在公司留了很长时间，直到Winamp 5.0完成。离开AOL后，Justin Frankel一点都不寂寞，成立了一家新公司Cockos，尝试实现各种有趣的想法，比如实时的声效处理软硬件、HTTP包的拦截、目录同步工具等。谁知道哪一天这位反斗奇星又会给我们带来怎样的新惊喜？ 补充一下，近来有接触到Foobar2000这款免费的多功能音频播放器，作者是也是原Winamp开发公司Nullsoft成员 Peter Pawlowski。除了播放之外，它还支持生成媒体库、转换媒体文件编码、提取CD等功能，是一款功能强大的音频处理工具。Foobar2000之所以出现，便是在于Peter Pawlowski 不满于Winamp2.x的插件体系架构和更倾向于图形、外观的发展方向的 Winamp3。从使用上来看，这款软件很好用也有一些插件什么的，可以用来扩展功能。 相关链接： 百度云分享（提取码：6lxk）https://www.cockos.com/index.phpfoobar2000音频播放器Foobar2000的汉化版","tags":[{"name":"阅读","slug":"阅读","permalink":"https://zhouie.cn/tags/阅读/"},{"name":"Winapp","slug":"Winapp","permalink":"https://zhouie.cn/tags/Winapp/"},{"name":"cockos","slug":"cockos","permalink":"https://zhouie.cn/tags/cockos/"},{"name":"Justin Frankel","slug":"Justin-Frankel","permalink":"https://zhouie.cn/tags/Justin-Frankel/"}]},{"title":"【分享】 本地文件搜索引擎工具","date":"2018-03-13T19:25:24.000Z","path":"posts/201803131/","text":"您是否觉得 Windows 自带的文件搜索比较慢？！ 今天，给大家分享一款超快好用的本地文件搜索软件：Everything Search Engine. Everything 是一个运行于Windows系统，基于文件、文件夹名称的快速搜索引擎。它体积小巧，界面简洁易用，快速建立索引，快速搜索，同时占用极低的系统资源，实时跟踪文件变化，并且还可以通过http或ftp形式分享搜索。 总的来说，Everything 最主要的特点就是“快”！ 一个刚装的Win8系统（大约70,000个文件），只需要1秒左右就建好了搜索数据库。1,000,000个文件，也只需要大约一分钟。 下载地址： 官方地址 百度云分享（提取码：uvfn） 注意： 使用 Everything 的前提是，你的硬盘分区格式必须是NTFS. Everything 搜索还支持 正则表达式，可以提高搜索精细度。","tags":[{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"},{"name":"本地搜索引擎","slug":"本地搜索引擎","permalink":"https://zhouie.cn/tags/本地搜索引擎/"}]},{"title":"【电台】 ONE深夜电台","date":"2018-03-09T23:23:23.000Z","path":"posts/201803091/","text":"讲述生活，则声音没有不和谐的。 隆重介绍这两位”卖声工作者” —— 李荟莹 &amp; 马晓橙 注：“ONE•一个”是由韩寒主编的一款文艺阅读应用，是高辨识度、不可替代的文艺品牌，集合阅读、音乐、电影内容，是流行的新媒体阅读产品，也是极具价值的故事IP发表平台和储备库。 2019-02-22 需要更新一下的是，2018年9月份的时候，他们两位电台主播已经从ONE离职了。很开心的是，就在他俩生日那天，终于等到了他们最（暂）新（时）的合作电台————WE深夜电台！ 这里顺带推一下这两位的私人微信公众号 “听了就睡”、 “马泽法客”。","tags":[{"name":"电台","slug":"电台","permalink":"https://zhouie.cn/tags/电台/"},{"name":"音乐","slug":"音乐","permalink":"https://zhouie.cn/tags/音乐/"}]},{"title":"【收藏】 近25万倍压缩的精品3D动画","date":"2018-03-05T11:17:19.000Z","path":"posts/201803051/","text":"写在前面 WareZ是个无形的组织，号称“不以赢利为目的纯技术团体”。他们有自己的信念和约定成俗的行规，他们没有自己网站，不赚钱，破解的游戏只用FTP上传以供下载，并通过BBS交流信息。其组织成员很有奉献精神，以自己是“WAREZ”或 “0 DAY”组织成员为荣。只不过他们的成果被那些商人所利用才有今天所谓“盗版软件”。解释一下“WAREZ”的含义，“WARE”表示破解软件，“Z”表示零（ZERO），意为在不到一天的时间里破解软件。那么“0 DAY”的意思也就不言而喻了。 Prophecy《彗星撞地球》 下载地址：百度云分享（提取码：4uu7） 每年，世界各地著名的Warez组织都会推出一个小的动画片来比较，仅仅是用来炫耀其实力。一首普通的MP3，通常就有4000K左右，一张普通的JPG压缩图片也要30－40K，而这个仅有63K的3D动画，其3D渲染和声效令人震撼，竟然演示了近30分钟的不重复3D影片，其技术令人震惊！而事实上，这个动画的真正容量超过15G，也就是说这个Warez组织把它 压缩了25万倍。 注意：系统必须安装有Directx8.0才行，因为动画支持DX8.0加速；这个程序是1997年的Mekka ’97 4K Intro比赛的一等奖作品。整个程序全长4095字节，其中包含133字节的自解压程序(类RAR压缩)，未解压的程序长4782字节。三维场景包含144个立方体，367个面，362个点，15个不同的64*64的纹理……这个程序是用汇编语言来实现的。 3D射击小游戏 下载地址：百度云分享（提取码：h5rf） 虽然也只有64K左右，但确实是一个可以运行的3D游戏。WASD控制方向，鼠标左键射击。","tags":[{"name":"3D动画","slug":"3D动画","permalink":"https://zhouie.cn/tags/3D动画/"},{"name":"WAREZ","slug":"WAREZ","permalink":"https://zhouie.cn/tags/WAREZ/"},{"name":"Collection","slug":"Collection","permalink":"https://zhouie.cn/tags/Collection/"}]},{"title":"【分享】 PDF相关工具","date":"2018-03-01T19:25:24.000Z","path":"posts/201803011/","text":"SmartPDF阅读器下载地址：官方地址百度云分享（提取码：xmn8） 也不知道是怎么回事，一段时间没去看，官网最新版安装包竟然都到100多M了… PDF橡皮擦PDF橡皮擦是一款Windows平台下的PDF内容处理软件工具。 它支持擦除PDF里的文字、图片和任何内容，操作非常简单，只需用鼠标选择橡皮然后进行擦除即可。可以轻松的擦去不需要的文字或者图片logo等信息。 还带有编辑功能，支持二次添加文字和图片，您可以在擦掉PDF内容后，将您自己的文字和图片等添加到PDF文件中，让修改PDF文件变的空前简单。 带有一个内嵌的PDF页面删除工具，它可以删除不需要的PDF页，整合剩下的PDF页成为一个新的PDF文件。 下载地址：官方地址百度云分享（提取码：cbw0） 安装和注册：大致过程见下面的截图 PDF全能转换PDF全能转换是一款WINDOWS平台PDF文件转换软件，可以将PDF文件转换成WORD、EXCEL、图片、文本、HTML和FLASH等多种格式，这样您就可以轻松的使用和编辑PDF文件的内容。PDF全能转换也支持批量操作，可以将数百个PDF文件同时转换成其他格式。 功能特点: PDF转WORD - 轻松将PDF格式转换成WORD格式进行编辑处理 PDF转EXCEL - 可以将PDF表格转换成EXCEL XLS格式，更方便的修改表格内容 PDF转图片 - PDF全能转换可以把PDF文档转换成流行图片格式如JPG，BMP，PNG，GIF和TIF格式 PDF转TXT - 喜欢看电子书的朋友，可以使用PDF全能转换把PDF文件转换成纯文本TXT格式 PDF转HTML - PDF转换成HTML网页格式，这样就可以轻松制作在线帮助了 PDF转SWF - 通过这个功能，您可以直接把PDF转成FLASH来以动画形式展示PDF的内容 高质量转换 - PDF全能转换可以在转换结果中保存所有图片和文本信息，并且支持高质量图片转换 页面选择 - 您可以选择转换部分页面，省时省力 支持10多种语言 - 除了中文PDF，PDF全能转换还支持更多其他国语言的PDF文件 批量模式 - 一次性批量转换几百个PDF文件，您只需要喝杯咖啡，等候转换完成 下载地址：官方地址 PDF防复制工具PDF防复制工具不同于一般的PDF加密软件只是增加了PDF的权限设置，很容易被一些破解工具或者在线服务直接解密掉。PDF防复制工具是将PDF文件的文字和图形重新解析，然后重新处理，在保持了原文件的排版和结构的前提下，使您的PDF文件只允许打开查看，不允许复制拷贝PDF内容。经过PDF防复制工具处理的PDF文件，即使使用PDF权限破解工具，也无法实现内容的复制拷贝了。 PDF防复制工具具有页面选择功能，可以让您把重要的PDF页保护起来，只能查看不能复制拷贝。您也可以将所有的页面内容都禁止复制和拷贝。 同时PDF防复制工具还有禁止打印的选项，您可以通过这个选项设定是否允许打印PDF文件来防止打印PDF文件。 另外一个功能是禁止全局复制功能，如果您勾选了这个选项，您的PDF文件被打开后，右键中的复制选项就被禁止了。 下载地址：官方地址 各种(包括PDF)在线格式转换、处理https://smallpdf.com/cnhttps://zhcn.109876543210.com/http://www.docpe.com/https://cn.office-converter.com/","tags":[{"name":"Pdf","slug":"Pdf","permalink":"https://zhouie.cn/tags/Pdf/"},{"name":"Tool-share","slug":"Tool-share","permalink":"https://zhouie.cn/tags/Tool-share/"}]},{"title":"【博客】 Jekyll搭建个人博客-拓展版","date":"2018-02-15T11:22:32.000Z","path":"posts/201802151/","text":"简介Jekyll 是一个简单的博客形态的静态站点生产机器。它有一个模版目录，其中包含原始文本格式的文档，通过 Markdown （或者 Textile） 以及 Liquid 转化成一个完整的可发布的静态网站，你可以发布在任何你喜爱的服务器上。Jekyll 也可以运行在 GitHub Page 上，也就是说，你可以使用 GitHub 的服务来搭建你的项目页面、博客或者网站，而且是完全免费的。 书写博客是一个很好地习惯，所以就整理创建一个博客系统来记录自己的所见所闻所得！ 另外，个人感觉另一款博客框架hexo也挺好的，实际上这两款博客框架都是目前较为主流的。 写在前面(网上搜集来的) 针对Windows系统下的用户，使用 Jekyll 搭建博客之前要确认下本机环境，Git 环境（用于部署到远端）、Ruby 环境（Jekyll 是基于 Ruby 开发的）、包管理器 RubyGems (由于我是基于windows来做这个的，所以有必要配置安装相关的Windows环境，方便以后操作。) Jekyll是一个免费的简单静态网页生成工具，可以配合第三方服务例如： 评论、分享等等扩展功能(评论第三方服务的选择后面会讲到)，Jekyll 可以直接部署在 Github（国外） 或 Coding（国内） 上，可以绑定自己的域名。Jekyll中文文档、Jekyll英文文档、Jekyll主题列表。 如果你是 Mac 用户，你就需要安装Xcode和Command-Line Tools了。 ruby与ruby gem的关系 ruby是一种脚本语言ruby的其中一个“程序”叫rubygems，简称gem(ruby 1.9.2及其以上就已经默认安装了ruby gem的，所以无需再次手动安装)另外还有一个ruby bunder(rails框架中用来管理项目的gem的，叫bundle)，在windows中搭建jekyll，需要安装完ruby后用gem安装下bunder。 ruby与jekyll的关系 jekyll是基于ruby的，所以搭建jekyll之前必须确保ruby正常安装 注意，必须ruby大于2.0.0。 jekyll与python的关系(表示才知道) jekyll3.0之前，有一个语法高亮插件”Pygments”，这玩意是基于python的，所以才会有各种教程里面都说搭建jekyll之前需要python环境。!!!但是,请注意 jekyll3.0以后，语法高亮插件已经默认改成了 “rouge‘ 而它是基于ruby的，也就是说 现在搭建jekyll,我们完全不必要再安装python这样可以减少很大一部分工作量。 为什么ruby要改用source来源 不管是那一篇教程，都会告诉你安装完ruby后需要通过gem命令将官方源改成淘宝源或[ruby china][]源，这是因为默认的官方源在国外，国内几乎是无法访问的(具体原因么…)所以才会必须改成其否源，否则无法使用，但是，请注意 现在淘宝源已经停止维护了，最新搭建jekyll 都应该要改成 [ruby china][]的源http://gems.ruby-china.org 如何解决jekyll安装过程中的问题 首先，在确保ruby(2.0.0以上)正常安装，并且切换了ruby china源(或者淘宝源)后，其它遇到的所有问题几乎都能解决。当然，确实某些ruby程序的问题，所以只需要根据提示 通过相应命令，比如gem install ...即可解决. 注：windows下还得确保DEVELOPMENT KIT正常安装，并且正确配置。 提前总结一下，安装Jekyll主要有以下三个步骤 安装 Ruby 安装 DevKit 安装 Jekyll 接下来就正式开始安装啦！ 安装Ruby下载安装exe，地址：http://rubyinstaller.org/downloads/ 根据自己的机型选择对应的安装包(因后续有需要安装不同的gem，我发现好多因为ruby版本问题装不了，所以在这推荐使用2.2.4版本的) 安装的注意点：自动帮你配置环境变量，要安装在根目录 测试是否安装完成： 1ruby -v 我的输出结果是 1ruby 2.3.0p0 (2015-12-25 revision 53290) [x64-mingw32] 安装Devkit 1）运行安装包并解压缩至某文件夹，如C:\\DevKit 2）通过初始化来创建config.yml文件。在命令行窗口内，输入下列命令： 123cd “C:\\DevKit”ruby dk.rb initnotepad config.yml 3）在打开的记事本窗口中，于末尾添加新的一行- C:\\Ruby200-x64(这段代表加上自己的ruby路径，实际中可以将C:\\Ruby200-x64改为自己的实际ruby目录)，保存文件并退出。 4）回到命令行窗口内，审查（非必须）并安装。 12ruby dk.rb reviewruby dk.rb install 一切顺利后，就代表Development Kit已经正确安装并配置 更改默认的source源这是很重要的一步！鉴于官方源无法访问，所以我们得更换为可以使用的源，这里推荐使用[ruby china][]源，大致步骤如下: 先键入命令gem sources -l查看当前已经添加的源(默认应该是同时有官方源和淘宝源); 然后通过gem sources -r https://rubygems.org/ gem sources -r https://ruby.taobao.org/分别移除官方源和淘宝源 (注意，请对比实际，移除自己已经添加的源即可，可以改为自己上一步中查询出来的地址); 通过gem sources -a http://gems.ruby-china.org添加了[ruby china][]的可用源; 修改来源后可以通过gem sources -l查看是否正确修改。 注意,上述的[ruby china][]源,我采用了http链接，这是因为我在windows中使用https时遇到了ssl问题，并且无法解决，如果你能正确解决，可以换为https链接。 安装jekyll先查看你的gem是否安装完毕： 12gem -vgem install jekyll 测试是否安装完毕： 新建jekyll 项目 12jekyll new myblogcd myblog 运行jekyll 项目： 官方文档 1jekyll s / jekyll serve 另外，如果过程中遇到一些其它缺失组件的情况，可以通过相应的gem命令安装 最终成功运行！ 在浏览器里输入： http://localhost:4000，就可以看到你的博客效果了. 简析目录结构 Jekyll 的核心其实是一个文本转换引擎。它的概念其实就是： 你用你最喜欢的标记语言来写文章，可以是 Markdown，也可以是Textile,或者就是简单的HTML, 然后 Jekyll 就会帮你套入一个或一系列的布局中。在整个过程中你可以设置URL路径, 你的文本在布局中的显示样式等等。这些都可以通过纯文本编辑来实现，最终生成的静态页面就是你的成品了。 一个基本的 Jekyll 网站的目录结构一般是像这样的： 12345678910111213141516171819├── _config.yml├── _includes| ├── footer.html| └── header.html├── _layouts| ├── default.html| ├── post.html| └── page.html├── _posts| └── 2018-01-11-welcome-to-jekyll.md├── _sass| ├── _base.scss| ├── _layout.scss| └── _syntax-highlighting.scss├── about.md├── css| └── main.scss├── feed.xml└── index.html 注意：如果你暂时没有自己的域名，CNAME里面就什么都不用填。 这些目录结构以及具体的作用可以参考 官网文档 进入 _config.yml里面，修改成你想看到的信息，重新 jekyll server ，刷新浏览器就可以看到你刚刚修改的信息了。 到此，基于Jekyll初步搭建博客算是完成了。 关于网站评论管理系统与访问统计系统访问统计 你需要去百度统计和Google Analytics(翻个墙咯~ 多大点事)注册账号，并提取相应的id（详细操作请Baidu或Google）这在后面会使用到。 评论管理系统 目前本网站使用的是一款韩国名为“来必力”评论系统，来必力官网。当然也推荐了解了一下这款快速、简洁且高效的无后端评论系统——Valine评论系统，补充以下浏览到的这篇文字Valine优化增强版; 后面我又发现了gitment，一款由国内大牛imsun开发的基于github issues的评论系统，网上也是有不少相关的布置教程的，作者在这里提供一篇仅供参考–在Jekyll博客添加评论系统：gitment篇。 下面是这段时间在解决 添加评论系统 问题时,花时间找了一下国内外的几个第三方评论系统: 多说，曾经较火的评论系统，网上介绍文章比较多，但已于2017年6月1日正式关停服务，无法再用了。 畅言，sohu旗下的，网上说：需要个人博客备案后才能使用，备案操作本身就很繁琐(这个我没有测试过，不肯确定)。 友言，jiaThis旗下的，网上说：由于时http请求，github pages现在都是https了， 在https站点无法调用http请求，故也无法使用(这个我也没有测试过，不肯确定)。 网易云跟贴，曾被当作“多说”的替代品，可惜官方通报说也在2017年8月1日下线了。 再看看Disqus，国外比较火的评论系统，但在国内墙了，也只能暂时放弃了。 很感谢碰到了来必力,通过这段时间使用情况看，还是挺好的。 下面这些是后期补充的 Gittalk Gitment Valine HYPERCOMMENTS 关于编写文章所有的文章都是_posts目录下面，文章格式为mardown 格式，文章文件名可以是.mardown或者.md。 编写一篇新文章很简单，你可以直接从_posts/目录下复制一份出来 2018-01-13-Hello World.md ，修改名字为 2018-01-11-article1.md ，注意：文章名的格式必须为 年-月-日-articleName ，后面的 articleName同时也是该篇文章的链接 URL。 只不过如果文章名为中文，比如文章https://javef.github.io/2018/04/走进Markdown园子/的链接URL就会变成这样的：https://javef.github.io/2018/04/%E8%B5%B0%E8%BF%9BMarkdown%E5%9B%AD%E5%AD%90/。 所以建议文章名最好是英文或者阿拉伯数字。 打开你新建的博客文章2018-01-11-article1.markdown 1234567---layout: posttitle: \"article1\"date: 2018-01-11tag: jekyll---(这儿便是正文内容了...) 其中： 123title: 显示的文章名， 如：title: 我的第一篇文章 date: 显示的文章发布日期，如：date: 2018-01-11(格式要对) tag: tag标签的分类，如：tag: 随笔 注意：文章头部格式必须包含上面的那些样板信息，这样才能正确解析。 我写文章使用的是Cmd Markdown 编辑阅读器，如果你对 Markdown 语法不熟悉或者想要了解更多，也可以看看我的另一篇博客: 走进Markdown园子。 关于自定义域名其实官方的帮助文档Setting up a custom domain with GitHub Pages已经讲得很清楚了，而且网上也有一大堆教程。 需要注意的是： CNAME文件名必须是大写； 如果要使用的域名是zhouie.cn，所以在域名解析设置应该使用A记录，解析到Github的IP。如果我要使用的域名是www.zhouie.cn，才应该使用CNAME记录，解析到***.github.io 总结 虽然说在windows上搭建jekyll时遇到了各种各样问题，但是最终都解决了； 在解决的那一瞬间，其实是挺有满足感的(大概这也是乐此不疲的原因之一吧)，而且确实感觉知识面比起以前还是有所拓展的； 所以不管怎么样，还是得多学多动手尝试！ 你现在所学的知识，一定会在将来的某个时间段派上用场！ update 2018/4/22 进一步了解 我们前面讲的都是基于ruby+git配置安装jekyll(Hexo也一样)，实际上是利用了Jekyll的博客框架的优势！ 通过本地开启Jekyll服务实现本地随时随地调试，方便； 再将自己调试好的个人博客项目上传到远端代码托管仓库，如GitHub、Coding等，利用他们提供的Pages功能实现静态网页的部署； 当然，如果你有自己的域名的话，也可以将你的域名绑定到你的Pages页面，可以看看我的这篇文章：为GitHub Pages自定义域名并添加SSL-开启HTTPS强制 真正快速部署个人博客先提前说明一下这种取巧的方法，需要下载安装哪些 GitHub Desktop Git 具体步骤 创建一个 github 账号，然后创建一个跟你账户名一样的仓库，如我的 github 账户名叫 Javef，我的 github 仓库名就叫 javef.github.io； 其实这个时候去浏览器输入https://javef.github.io,这个静态页面就已经创建好了，只是这个时候页面内容太空虚… 那么为了创建一个好看又稳定、简洁又完整的网页，去Google或Baidu搜索挑选下载某个你认为与你审美搭得上的Jekyll、Hexo等等框架开放源码项目，至于修改其中哪些配置参数变成你自己可用的页面框架，这里就不赘述了，很简单的。这里我提供一些:Jekyll-powered blogs and sites； 下载安装Git； 下载安装GitHub Desktop，输入你的GitHub账号密码登录； 通过以下方法将你之前挑选准备的网页框架项目文件上传到远端托管仓库。 打开此电脑，选择一个文件夹，比如 f 盘的 test 文件，右键空白处点击 git bash here； git clone https://github.com/Javef/javef.github.io.git javef.github.io cd javef.github.io 将自己之前准备的网页框架项目文件复制粘贴至 f 盘的 test 文件中 git add . # 将新添加的文件加入索引中 git commit -m “first commit” # 将这次的修改作为一个打包 git push origin master # 提交到远程仓库 可能会有弹出框让你输入你的 github 账号和密码哦 这个时候你再去浏览器输入https://javef.github.io，刷新一下，就可以看到全新的页面了~ 补充-常用git命令：1234567$ git clone //本地如果无远程代码，先做这步，不然就忽略$ cd //定位到你blog的目录下$ git status //查看本地自己修改了多少文件$ git add . //添加远程不存在的git文件$ git commit -m \"what I want told to someone\" //提交修改$ git push //更新到远程服务器上$ git rm //移除文件 注意: git status 列出当前目录所有还没有被git管理的文件和被git管理且被修改但还未提交(git commit)的文件，也就是所有改动文件，红色字体标出。 然后输入 git add . (有个点) 表示添加当前目录下的所有文件和子目录， 然后再输入一次 git status 如果看见文件都变绿了 ，那么就代表 它们已经准备好了被提交（git commit）。 关于 git rm 由于在github上只能删除仓库,却无法删除文件夹或文件，所以只能通过命令来解决 $ git rm file1.txt #删除file1.txt git commit -m ‘delete file1.txt’ #提交,添加操作说明 git push -u origin master #将本次更改更新到github项目上去 这个命令必须是在提交到版本库中以后才能够执行的,否则的话： 如果这个文件没有提交到暂存区，它是不会被发现的： 12$ git rm file1.txtfatal: pathspec 'file1.txt' did not match any files 如果提交到暂存区了以后，还是没办法删除： 1234$ git rm file1.txterror: the following file has changes staged in the index: file1.txt(use --cached to keep the file, or -f to force removal) 如果这个文件与版本库中不一致，就删除不了，除非强制删除，如下所示： 1234$ git rm file2.txterror: the following file has staged content different from both the file and the HEAD: file2.txt(use -f to force removal) 如果你只有一个文件想要删除，使用这个命令可以真正的从文件系统中删除了文件，并且它会暂存这个文件已经被删除的事实，如果你提交了，这个文件不会从之前的历史中消失，但会从未来的提交中消失。 参数–cached 如果你想删除这样一个文件，不想从文件系统中真正的删除它,也就是本地项目中的文件不受操作影响,删除的只是远程仓库中的文件，就是用下面的命令： 1$ git rm --cached file3.txt 换个说法，你想告诉Git，不再跟踪这个文件，但是把它保留在工作树中，这可能是一种情况，你以外地提交了一个文件，你并不想让他成为历史的一部分。它暂存了删除，但是，他在那里保存了文件，现在，在你的工作树中，作为一个不被追踪的文件。 注意：每次增加文件或删除文件，都要commit 然后直接 git push -u origin master，就可以同步到github上了。 参考资料 Jekyll主题集锦 Jekyll Plugins 介绍一些免费好用的静态网站托管服务 Jekyll+多说，建立属于你的轻博客&gt;&gt;&gt;&gt;虽然多说已经亡了，但通过这篇博文很感慨这家伙当年的强大…","tags":[{"name":"Jekyll","slug":"Jekyll","permalink":"https://zhouie.cn/tags/Jekyll/"},{"name":"Ruby","slug":"Ruby","permalink":"https://zhouie.cn/tags/Ruby/"},{"name":"Git","slug":"Git","permalink":"https://zhouie.cn/tags/Git/"},{"name":"Comment","slug":"Comment","permalink":"https://zhouie.cn/tags/Comment/"}]},{"title":"【转载】 图灵访谈：为什么写博客？","date":"2018-02-14T20:30:11.000Z","path":"posts/201802141/","text":"作者简介：阮一峰，70年代生于上海。毕业于上海财经大学，经济学博士，同时也是一名程序员，个人博客访问量过千万，译有《黑客与画家》、《软件随想录》。目前供职于一所上海本地高校。本文为阮一峰笔记体博客文集《如何变得有思想？》和《一个寻找作者的读者》的代序。 2010年4月，我与百姓网CEO王建硕有过一次对话。我们谈到了为什么写博客。 ​ 阮：建硕，我知道你有两个博客，一个是英文的，另一个是中文的。但是，你更新英文博客的频率，远远高于中文博客，这是为什么？ 王：这其实是一种机缘巧合。 2000 年，我在微软做工程师，习惯阅读一种叫做KB（知识库）的文章。我就模仿这样的格式和写法，写了一些关于浦东机场的英文介绍，结果排在Google搜索Pudong Airport的第一条结果，可见当时互联网上关于中国的英文内容非常少。 2002年，我开始用Movable Type架博客的时候，我觉得自己应该写一些能提供价值的东西。为来华的外国旅行者撰写英文介绍，就是一个很独特、而且我做得到的事情。 此后的8年，我在博客上记录的事情，不过只是一些日常生活。如果用中文写，本地的读者可能没兴趣，不觉得这样的文章有任何价值。比如，上海的公交车票2块钱一张，上海的火警电话是119、不是911等等，这种鸡毛蒜皮的话题，本地读者司空见惯，但对于英文读者，却是其他地方很难得到的信息。我的中文博客也在写，不过内容主要是IT评论，更新频率就慢一些。 阮：我觉得，你说出了写作博客的正确做法，那就是为读者创造价值。如果有人想要建立一个受欢迎的、有影响力的博客，那么这一点是他必须牢记的。只有你的文章对他人有价值，你才会有读者。我其实一直想建立一个英文博客，但就是因为找不到我能够写的、并且西方读者也会感兴趣的内容，所以迟迟没有动手。 当然，除了创造价值，博客还有另一个作用—-沟通媒介。通过博客，别人能够知道我们在干什么，怎么想，每一篇博客都是一个与他人沟通的机会。所以，你较少写中文blog，我觉得挺遗憾的，因为这样一来，你与其他同业的沟通、你在国内业界的影响力就少了一个重要渠道，毕竟你的事业还是在国内。不过，我现在对这一点也不是很确定了，博客的沟通功能也许并不重要。上个月，Joel宣布不在网志上谈论软件了，因为他发现除了自己以外，没有人能够通过写博客获得成功。 所以，我就想问你第二个问题，写作Blog与个人职业之间，到底是一个怎样的关系？因为我发现，你很少在网志上谈到你的公司，尤其很少谈到公司的产品？ 王：其实在微软的时候，我是有意避免谈论公司的。 两个原因。第一，我不太能区分哪些是公开信息，哪些不是，分起来很累。第二，也是更重要的原因，博客是我个人的表达，不是传播公司信息的渠道。微软是一家很了不起的公司，它的名声和光环是属于它自己的，不是属于我的，我只是一个微软的普通员工。 我觉得一定要分清楚，哪些是自己建立起来的，哪些是公司带给你的。你之所以拥有后者，很可能仅仅是因为运气好，是公司的成功，而不是你的成功。所以，我不太会写到公司。 后来在百姓网，我同样延续了这种方式，把公司和自己分开。自己就是有血有肉的一个人，在需要代表公司的时候，我会扮演那个角色，而在博客上，是自己。 阮：看来你把博客和公司分得很开。确实如你所说，个人博客不是宣传公司的窗口。事实上，很少人有动力，无偿为公司做宣传，这也是为什么商业公司的博客大多不成功的原因。但是，如果公司是你自己的，你会不会在博客上写自己的公司？我的问题其实是，创业者应不应该利用博客，作为宣传自己的工具？ 王： 即使是自己的公司，我希望在博客上面分享的更多的是运行公司过程中的心得，尤其是失误和教训，来帮助其他的创业者。这部分是我作为一个活生生的人，与他人分享我的想法，不是在做宣传。 我更多地把读者当做自己的朋友，而不是我要发展的客户。我从来不想在家人和朋友面前炫耀公司，更多的是分享自己的心得。每个人写博客的原因千差万别，有人写博客是为了宣传自己的公司或者自己，这个动机无可厚非，只是这不是我写博客的目的。 阮：如果我创业的话，肯定会在博客上宣传，因为我需要更多的人帮我。所以，我还是挺看重网站流量的。你写作博客的立足点是分享心得，对流量大概就不是很重视了。你的博客流量目前是多少？ 王：刚才看了下，远没有以前多，大概每个月25万（只是以前的1/4）。可见现在关于上海的英文信息越来越多，我的博客已经不是那么重要了，这是好事情。同时，越来越多的人订阅Feed来看博客，不再访问网站了。 阮：我的流量比你少，现在一个月的独立IP访问者，大概10多万。而且已经一年了，一直稳定在这个数量，没有明显增长。所以，我怀疑博客也不是一个很好的商业工具，到了一定程度，流量就上不去了。 当然，非商业性的个人博客，不用太在乎流量。但我也不觉得流量减少是好事情，因为读者反馈也会相应减少。如果长期没有足够的读者留言，对我写文章的积极性是有打击的。老实说，我确实希望每篇文章的读者留言能够多一点。 说到读者留言，那就引出了下面一个问题，写作博客的意义到底何在？有些人很不理解，认为写作博客无偿给他人阅读，是一种很傻的行为，既赚不到钱，又浪费时间。我当然不同意这种看法，但是我想先问问你，坚持不断写网志，你觉得最大的收获是什么？ 王：促进思考。 每天写博客，帮助自己养成了更多观察、更多探究的习惯。看到地铁开通，或者其他有趣的事情，我总是习惯性地去关心，这就是多年博客写作让我养成的习惯。每天晚上，我都要问自己：今天有什么特别？我应该写点什么？……你知道一件事情，与你要表达一件事情，这是完全不同的。通过写作，你能帮助自己更清楚地理解问题。 另一方面，全世界读者的留言，是我从博客收获的最大财富。每天与不同的观点对话，会让自己更全面地看待这个世界。 阮：说得好！写作帮助我们整理自己的思想。博客其实是一种理性思维和表达能力的训练，很多时候我们写作博客，就是在做这种训练。我写作的时候，有时会尝试不同的表达方法，看看怎么写最容易看懂、最容易被他人接受。每当有读者留言批评我的观点，我就知道了我的思维和表达在什么地方还有欠缺。Joel说过，写作能力是区分领袖和普通程序员的标志。我们不一定要当领袖，但是能够说服他人认同你的观点，这绝对是不容忽视的能力，而博客就是获取这种能力的一种卓越训练方法。 此外，写作博客还有一个最大理由。我记得，你在网志中写过一件事，有人问：”你为什么写博客？”你反问道：”你为什么打电话？”我简直要为这个回答拍案叫绝。我们需要与人交流，渴望了解全部的世界，博客帮助我们遇到那些其他方式无法遇到的人。 不过，写作博客的代价，是要花费很多时间和精力。你每天要在博客上用掉多少时间？ 王：平均每天半个小时。 阮：这就是我佩服你的地方。你用英语写，经常有1000词以上的长文，而且写得很清晰易读，却只需要半个小时。这意味着，你基本上没有把时间花在苦苦构思和反复修改上面，属于一次成文。我用汉语写，也做不到这一点。 我的每一篇文章，通常需要2小时~6小时的写作时间。有时候写完以后，觉得特别累，都不想干别的事情了。不过，我还是觉得这是值得的。回过头看，我幸亏把时间花在写作博客上面，否则那些时间就白白过去了，没有留下任何印记。 我现在怀疑的就是，我能不能把这种写作热情保持下去。你能保持吗？相比十年前，你对于博客是否还有同样的热情，或者说同等程度的通过文字、向他人表达自己的愿望？ 王：我依然热情不减。我的博客最重要的读者，就是我自己。如果碰巧帮助了别人，那是额外的收获。即使没有人读，我觉得我也会继续，因为它帮助自己思考。 阮：这一点，我与你不同。博客就好像一个人在自说自话，但是随着年龄的增大，我想要说出自己见解的意愿不是那么强烈了，也不是那么在乎，能不能获得外界的承认了。如果有一天，我觉得自己想说的东西，都已经说完了，可能就不写博客了。冯友兰《中国哲学简史》的结束语，我印象很深。他说：”人必须先说很多话，然后保持静默。”不过，我的这一天，还要等很久才会到来。 你想过这个问题吗？觉得自己还会坚持博客多久？forever？ 王：我觉得只要这还是一种可以帮助自己思考、帮助自己记录的好办法，我就会继续。但是如果不是了，我并没有永远写作博客下去的预设的目标。 下面这句话，与诸位共勉… I want to write, not to run blogging software. 转载自盼盼姐，本文仅用于学习和交流目的，非商业转载请注明作译者、出处，并保留本文的原始链接。","tags":[{"name":"阅读","slug":"阅读","permalink":"https://zhouie.cn/tags/阅读/"}]}]